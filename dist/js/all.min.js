// Configuration and Constants
const Config = {
    // Animation settings
    animations: {
        windowOpenDuration: 300,
        windowCloseDuration: 200,
        minimizeDuration: 300,
        dockHoverScale: 1.2,
        dockHoverDistance: 100,
        transitionEasing: 'cubic-bezier(0.34, 1.56, 0.64, 1)'
    },
    
    // Window settings
    windows: {
        defaultWidth: 1200,
        defaultHeight: 800,
        minWidth: 1000,
        minHeight: 700,
        maxZIndex: 9999,
        snapDistance: 20,
        resizeHandleSize: 20
    },
    
    // Dock settings
    dock: {
        autoHide: false,
        magnification: true,
        position: 'bottom',
        items: [
            { id: 'about', icon: 'fas fa-user-circle', title: 'About Me' },
            { id: 'projects', icon: 'fas fa-folder', title: 'Projects' },
            { id: 'resume', icon: 'fas fa-file-alt', title: 'Resume' },
            { id: 'contact', icon: 'fas fa-envelope', title: 'Contact' },
            { type: 'separator' },
            { id: 'finder', icon: 'fas fa-search', title: 'Finder' },
            { id: 'settings', icon: 'fas fa-cog', title: 'Settings' },
            { id: 'trash', icon: 'fas fa-trash', title: 'Trash' }
        ]
    },
    
    // Desktop settings
    desktop: {
        iconGrid: {
            width: 80,
            height: 100,
            spacing: 20
        },
        wallpaper: {
            type: 'gradient',
            colors: ['#667eea', '#764ba2'],
            animated: true
        }
    },
    
    // Contact form settings
    contact: {
        maxNameLength: 50,
        maxEmailLength: 100,
        maxMessageLength: 1000,
        validationDelay: 500,
        submitDelay: 1500
    },
    
    // Content loading settings
    content: {
        loadingDelay: 200,
        errorRetryAttempts: 3,
        cacheTimeout: 300000 // 5 minutes
    },
    
    // Debug settings
    debug: {
        enabled: false,
        logLevel: 'info', // 'debug', 'info', 'warn', 'error'
        showFPS: false,
        enableConsoleCommands: true
    },
    
    // Responsive breakpoints
    breakpoints: {
        mobile: 480,
        tablet: 768,
        desktop: 1024,
        largeDesktop: 1440
    },
    
    // Theme settings
    theme: {
        primaryColor: '#007AFF',
        secondaryColor: '#667eea',
        accentColor: '#764ba2',
        backgroundColor: 'rgba(255, 255, 255, 0.95)',
        textColor: '#1d1d1f',
        borderRadius: 12,
        backdropBlur: 20
    },
    
    // Performance settings
    performance: {
        enableGPUAcceleration: true,
        enableAnimations: true,
        enableBackdropFilter: true,
        enableShadows: true,
        maxConcurrentAnimations: 5
    },
    
    // Keyboard shortcuts
    shortcuts: {
        closeWindow: ['cmd+w', 'ctrl+w'],
        minimizeWindow: ['cmd+m', 'ctrl+m'],
        maximizeWindow: ['cmd+shift+f', 'ctrl+shift+f'],
        openAbout: ['cmd+1', 'ctrl+1'],
        openProjects: ['cmd+2', 'ctrl+2'],
        openResume: ['cmd+3', 'ctrl+3'],
        openContact: ['cmd+4', 'ctrl+4']
    },
    
    // API endpoints (if needed)
    api: {
        baseUrl: '',
        endpoints: {
            contact: '/api/contact',
            analytics: '/api/analytics'
        },
        timeout: 10000
    },
    
    // Local storage keys
    storage: {
        windowPositions: 'macos_portfolio_window_positions',
        preferences: 'macos_portfolio_preferences',
        theme: 'macos_portfolio_theme',
        lastVisit: 'macos_portfolio_last_visit'
    },
    
    // Social links
    social: {
        github: 'https://github.com/kevinplumlee',
        linkedin: 'https://linkedin.com/in/kevinplumlee',
        twitter: 'https://twitter.com/kevinplumlee'
    },
    
    // Analytics settings
    analytics: {
        trackWindowOpens: true,
        trackTimeSpent: true,
        trackInteractions: true,
        sendInterval: 60000 // 1 minute
    }
};

// Export for use in other modules
if (typeof module !== 'undefined' && module.exports) {
    module.exports = Config;
}

// Global configuration access
window.PortfolioConfig = Config; // Utility Functions
const Utils = {
    // DOM utilities
    dom: {
        // Get element by ID
        get: (id) => document.getElementById(id),
        
        // Get elements by class name
        getByClass: (className) => document.getElementsByClassName(className),
        
        // Query selector
        query: (selector) => document.querySelector(selector),
        
        // Query selector all
        queryAll: (selector) => document.querySelectorAll(selector),
        
        // Create element with attributes
        create: (tag, attributes = {}, content = '') => {
            const element = document.createElement(tag);
            Object.entries(attributes).forEach(([key, value]) => {
                if (key === 'className') {
                    element.className = value;
                } else if (key === 'innerHTML') {
                    element.innerHTML = value;
                } else {
                    element.setAttribute(key, value);
                }
            });
            if (content) element.textContent = content;
            return element;
        },
        
        // Add event listener with cleanup
        on: (element, event, handler, options = {}) => {
            element.addEventListener(event, handler, options);
            return () => element.removeEventListener(event, handler, options);
        },
        
        // Remove all children
        empty: (element) => {
            while (element.firstChild) {
                element.removeChild(element.firstChild);
            }
        },
        
        // Check if element is visible
        isVisible: (element) => {
            return !!(element.offsetWidth || element.offsetHeight || element.getClientRects().length);
        },
        
        // Get element position
        getPosition: (element) => {
            const rect = element.getBoundingClientRect();
            return {
                x: rect.left + window.scrollX,
                y: rect.top + window.scrollY,
                width: rect.width,
                height: rect.height
            };
        }
    },
    
    // Animation utilities
    animation: {
        // Animate element
        animate: (element, keyframes, options = {}) => {
            const defaultOptions = {
                duration: 300,
                easing: 'ease-out',
                fill: 'forwards'
            };
            return element.animate(keyframes, { ...defaultOptions, ...options });
        },
        
        // Fade in
        fadeIn: (element, duration = 300) => {
            return Utils.animation.animate(element, [
                { opacity: 0 },
                { opacity: 1 }
            ], { duration });
        },
        
        // Fade out
        fadeOut: (element, duration = 300) => {
            return Utils.animation.animate(element, [
                { opacity: 1 },
                { opacity: 0 }
            ], { duration });
        },
        
        // Slide in from bottom
        slideInUp: (element, duration = 600) => {
            return Utils.animation.animate(element, [
                { transform: 'translateY(30px)', opacity: 0 },
                { transform: 'translateY(0)', opacity: 1 }
            ], { duration, easing: 'cubic-bezier(0.34, 1.56, 0.64, 1)' });
        },
        
        // Bounce animation
        bounce: (element, duration = 600) => {
            return Utils.animation.animate(element, [
                { transform: 'translateY(0)' },
                { transform: 'translateY(-20px)', offset: 0.4 },
                { transform: 'translateY(0)', offset: 0.6 },
                { transform: 'translateY(-10px)', offset: 0.8 },
                { transform: 'translateY(0)' }
            ], { duration });
        },
        
        // Scale animation
        scale: (element, fromScale = 0.5, toScale = 1, duration = 300) => {
            return Utils.animation.animate(element, [
                { transform: `scale(${fromScale})`, opacity: 0 },
                { transform: `scale(${toScale})`, opacity: 1 }
            ], { duration });
        }
    },
    
    // Math utilities
    math: {
        // Clamp value between min and max
        clamp: (value, min, max) => Math.min(Math.max(value, min), max),
        
        // Linear interpolation
        lerp: (start, end, factor) => start + (end - start) * factor,
        
        // Distance between two points
        distance: (x1, y1, x2, y2) => Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2)),
        
        // Random number between min and max
        random: (min, max) => Math.random() * (max - min) + min,
        
        // Random integer between min and max
        randomInt: (min, max) => Math.floor(Math.random() * (max - min + 1)) + min,
        
        // Easing functions
        easing: {
            easeInOut: (t) => t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t,
            easeOut: (t) => t * (2 - t),
            easeIn: (t) => t * t,
            bounce: (t) => {
                if (t < 1/2.75) return 7.5625 * t * t;
                else if (t < 2/2.75) return 7.5625 * (t -= 1.5/2.75) * t + 0.75;
                else if (t < 2.5/2.75) return 7.5625 * (t -= 2.25/2.75) * t + 0.9375;
                else return 7.5625 * (t -= 2.625/2.75) * t + 0.984375;
            }
        }
    },
    
    // Time utilities
    time: {
        // Debounce function
        debounce: (func, wait, immediate = false) => {
            let timeout;
            return function executedFunction(...args) {
                const later = () => {
                    timeout = null;
                    if (!immediate) func(...args);
                };
                const callNow = immediate && !timeout;
                clearTimeout(timeout);
                timeout = setTimeout(later, wait);
                if (callNow) func(...args);
            };
        },
        
        // Throttle function
        throttle: (func, limit) => {
            let inThrottle;
            return function(...args) {
                if (!inThrottle) {
                    func.apply(this, args);
                    inThrottle = true;
                    setTimeout(() => inThrottle = false, limit);
                }
            };
        },
        
        // Wait for a specified time
        wait: (ms) => new Promise(resolve => setTimeout(resolve, ms)),
        
        // Format time
        formatTime: (date = new Date()) => {
            return date.toLocaleTimeString([], { 
                hour: 'numeric', 
                minute: '2-digit',
                hour12: true 
            });
        },
        
        // Get time of day greeting
        getGreeting: () => {
            const hour = new Date().getHours();
            if (hour < 12) return 'Good morning';
            if (hour < 18) return 'Good afternoon';
            return 'Good evening';
        }
    },
    
    // Storage utilities
    storage: {
        // Set item in localStorage
        set: (key, value) => {
            try {
                localStorage.setItem(key, JSON.stringify(value));
                return true;
            } catch (e) {
                console.warn('Failed to save to localStorage:', e);
                return false;
            }
        },
        
        // Get item from localStorage
        get: (key, defaultValue = null) => {
            try {
                const item = localStorage.getItem(key);
                return item ? JSON.parse(item) : defaultValue;
            } catch (e) {
                console.warn('Failed to load from localStorage:', e);
                return defaultValue;
            }
        },
        
        // Remove item from localStorage
        remove: (key) => {
            try {
                localStorage.removeItem(key);
                return true;
            } catch (e) {
                console.warn('Failed to remove from localStorage:', e);
                return false;
            }
        },
        
        // Clear all localStorage
        clear: () => {
            try {
                localStorage.clear();
                return true;
            } catch (e) {
                console.warn('Failed to clear localStorage:', e);
                return false;
            }
        }
    },
    
    // String utilities
    string: {
        // Capitalize first letter
        capitalize: (str) => str.charAt(0).toUpperCase() + str.slice(1),
        
        // Convert to kebab-case
        kebabCase: (str) => str.replace(/[A-Z]/g, letter => `-${letter.toLowerCase()}`),
        
        // Convert to camelCase
        camelCase: (str) => str.replace(/-([a-z])/g, (g) => g[1].toUpperCase()),
        
        // Truncate string
        truncate: (str, length, suffix = '...') => {
            return str.length > length ? str.substring(0, length) + suffix : str;
        },
        
        // Generate random string
        random: (length = 8) => {
            const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
            let result = '';
            for (let i = 0; i < length; i++) {
                result += chars.charAt(Math.floor(Math.random() * chars.length));
            }
            return result;
        }
    },
    
    // Event utilities
    event: {
        // Custom event emitter
        emitter: () => {
            const events = {};
            return {
                on: (event, callback) => {
                    if (!events[event]) events[event] = [];
                    events[event].push(callback);
                },
                off: (event, callback) => {
                    if (events[event]) {
                        events[event] = events[event].filter(cb => cb !== callback);
                    }
                },
                emit: (event, ...args) => {
                    if (events[event]) {
                        events[event].forEach(callback => callback(...args));
                    }
                }
            };
        },
        
        // Prevent default and stop propagation
        stop: (e) => {
            e.preventDefault();
            e.stopPropagation();
        },
        
        // Check if key combination matches
        matchKey: (e, combo) => {
            const keys = combo.toLowerCase().split('+');
            const hasCtrl = keys.includes('ctrl') && (e.ctrlKey || e.metaKey);
            const hasShift = keys.includes('shift') && e.shiftKey;
            const hasAlt = keys.includes('alt') && e.altKey;
            const keyPressed = e.key.toLowerCase();
            
            const mainKey = keys.find(k => !['ctrl', 'cmd', 'shift', 'alt'].includes(k));
            
            return (!keys.includes('ctrl') || hasCtrl) &&
                   (!keys.includes('shift') || hasShift) &&
                   (!keys.includes('alt') || hasAlt) &&
                   (keyPressed === mainKey);
        }
    },
    
    // Device utilities
    device: {
        // Check if mobile device
        isMobile: () => window.innerWidth <= Config.breakpoints.mobile,
        
        // Check if tablet device
        isTablet: () => window.innerWidth <= Config.breakpoints.tablet && window.innerWidth > Config.breakpoints.mobile,
        
        // Check if desktop device
        isDesktop: () => window.innerWidth > Config.breakpoints.tablet,
        
        // Check if touch device
        isTouch: () => 'ontouchstart' in window || navigator.maxTouchPoints > 0,
        
        // Get device info
        getInfo: () => ({
            width: window.innerWidth,
            height: window.innerHeight,
            pixelRatio: window.devicePixelRatio || 1,
            userAgent: navigator.userAgent,
            isMobile: Utils.device.isMobile(),
            isTablet: Utils.device.isTablet(),
            isDesktop: Utils.device.isDesktop(),
            isTouch: Utils.device.isTouch()
        })
    },
    
    // Performance utilities
    performance: {
        // Request animation frame with fallback
        raf: (callback) => {
            return (window.requestAnimationFrame || 
                    window.webkitRequestAnimationFrame || 
                    window.mozRequestAnimationFrame || 
                    ((cb) => setTimeout(cb, 16)))(callback);
        },
        
        // Cancel animation frame
        cancelRaf: (id) => {
            return (window.cancelAnimationFrame || 
                    window.webkitCancelAnimationFrame || 
                    window.mozCancelAnimationFrame || 
                    clearTimeout)(id);
        },
        
        // Measure performance
        measure: (name, fn) => {
            const start = performance.now();
            const result = fn();
            const end = performance.now();
            console.log(`${name} took ${end - start} milliseconds.`);
            return result;
        }
    },
    
    // Logger utility
    logger: {
        debug: (...args) => Config.debug.enabled && console.debug('[DEBUG]', ...args),
        info: (...args) => Config.debug.enabled && console.info('[INFO]', ...args),
        warn: (...args) => console.warn('[WARN]', ...args),
        error: (...args) => console.error('[ERROR]', ...args)
    }
};

// Progressive Image Loading for Performance
class ProgressiveImageLoader {
    static createPlaceholder(width, height, color = '#f0f0f0') {
        return `data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='${width}' height='${height}'%3E%3Crect width='${width}' height='${height}' fill='${color}'/%3E%3C/svg%3E`;
    }

    static loadImageProgressive(img, highResSrc, options = {}) {
        const { 
            lowResSrc = null,
            onProgress = null,
            onComplete = null,
            onError = null 
        } = options;

        // Start with placeholder or low-res version
        if (lowResSrc) {
            img.src = lowResSrc;
            img.style.filter = 'blur(2px)';
        }

        // Load high-res image
        const highResImg = new Image();
        
        highResImg.onload = () => {
            img.src = highResSrc;
            img.style.filter = 'none';
            img.style.transition = 'filter 0.3s ease';
            
            if (onComplete) onComplete(img);
        };

        highResImg.onerror = () => {
            if (onError) onError(img);
        };

        // Report progress if supported
        if (onProgress && 'loading' in HTMLImageElement.prototype) {
            img.addEventListener('progress', onProgress);
        }

        highResImg.src = highResSrc;
    }

    static optimizeForViewport(imageSrc, maxWidth = window.innerWidth) {
        // For very large images, we could implement different sizes
        // This is a placeholder for future optimization
        return imageSrc;
    }
}

// Network Performance Monitor
class NetworkMonitor {
    static getConnectionType() {
        if ('connection' in navigator) {
            return navigator.connection.effectiveType || 'unknown';
        }
        return 'unknown';
    }

    static shouldUseHighQualityImages() {
        const connection = this.getConnectionType();
        const isSlowConnection = ['slow-2g', '2g'].includes(connection);
        const reducedData = window.matchMedia('(prefers-reduced-data: reduce)').matches;
        
        return !isSlowConnection && !reducedData;
    }

    static getOptimalImageFormat() {
        // Check WebP support
        const canvas = document.createElement('canvas');
        const webpSupported = canvas.toDataURL('image/webp').indexOf('data:image/webp') === 0;
        
        return webpSupported ? 'webp' : 'jpg';
    }
}

// Add to Utils namespace
Utils.ProgressiveImageLoader = ProgressiveImageLoader;
Utils.NetworkMonitor = NetworkMonitor;

// Global utilities access
window.Utils = Utils; // Window Manager Module - Extended functionality
const WindowManager = {
    dragState: {
        isDragging: false,
        element: null,
        startX: 0,
        startY: 0,
        offsetX: 0,
        offsetY: 0
    },
    
    // Initialize advanced window features
    init() {
        this.setupWindowDragging();
        this.setupWindowResizing();
        this.setupResizeObserver();
        Utils.logger.debug('Window Manager initialized');
    },
    
    // Set up resize observer for automatic layout recalculation
    setupResizeObserver() {
        if (window.ResizeObserver) {
            const resizeObserver = new ResizeObserver(entries => {
                entries.forEach(entry => {
                    const window = entry.target;
                    if (window.classList.contains('window') && window.classList.contains('active')) {
                        setTimeout(() => {
                            this.recalculateWindowLayout(window);
                        }, 10);
                    }
                });
            });
            
            // Observe all windows
            Utils.dom.queryAll('.window').forEach(window => {
                resizeObserver.observe(window);
            });
        }
        
        // Fallback for browsers without ResizeObserver
        Utils.dom.on(window, 'resize', Utils.time.debounce(() => {
            Utils.dom.queryAll('.window.active').forEach(window => {
                this.recalculateWindowLayout(window);
            });
        }, 250));
    },
    
    // Recalculate window layout for proper scrolling
    recalculateWindowLayout(window) {
        const content = window.querySelector('.window-content');
        if (!content) return;
        
        // Get actual dimensions
        const windowRect = window.getBoundingClientRect();
        const header = window.querySelector('.window-header');
        const headerHeight = header ? header.offsetHeight : 36;
        
        // Calculate available content height
        const availableHeight = windowRect.height - headerHeight;
        
        // Update content height
        content.style.height = availableHeight + 'px';
        
        // Force scroll state recalculation
        if (content.scrollHeight > content.clientHeight) {
            content.style.overflowY = 'auto';
        } else {
            content.style.overflowY = 'hidden';
        }
        
        // Trigger scroll event to update scrollbar visibility
        content.dispatchEvent(new Event('scroll'));
    },
    
    // Set up window dragging
    setupWindowDragging() {
        Utils.dom.queryAll('.window-header').forEach(header => {
            Utils.dom.on(header, 'mousedown', this.startDrag.bind(this));
        });
        
        Utils.dom.on(document, 'mousemove', this.handleDrag.bind(this));
        Utils.dom.on(document, 'mouseup', this.stopDrag.bind(this));
    },
    
    // Set up window resizing
    setupWindowResizing() {
        Utils.dom.queryAll('.window').forEach(window => {
            this.addResizeHandle(window);
        });
    },
    
    // Start dragging
    startDrag(e) {
        const window = e.currentTarget.closest('.window');
        if (!window || window.classList.contains('maximized')) return;
        
        // Bring window to front when starting to drag
        const appName = window.dataset.app;
        if (appName && window.PortfolioApp) {
            window.PortfolioApp.bringWindowToFront(appName);
        }
        
        this.dragState.isDragging = true;
        this.dragState.element = window;
        this.dragState.startX = e.clientX;
        this.dragState.startY = e.clientY;
        
        const rect = window.getBoundingClientRect();
        this.dragState.offsetX = e.clientX - rect.left;
        this.dragState.offsetY = e.clientY - rect.top;
        
        window.style.cursor = 'grabbing';
        window.classList.add('dragging');
        
        // Prevent event bubbling to avoid conflicts with click handlers
        e.stopPropagation();
    },
    
    // Handle dragging
    handleDrag(e) {
        if (!this.dragState.isDragging) return;
        
        const window = this.dragState.element;
        const newX = e.clientX - this.dragState.offsetX;
        const newY = e.clientY - this.dragState.offsetY;
        
        window.style.left = Math.max(0, newX) + 'px';
        window.style.top = Math.max(0, newY) + 'px';
    },
    
    // Stop dragging
    stopDrag() {
        if (this.dragState.isDragging) {
            this.dragState.element.style.cursor = 'default';
            this.dragState.element.classList.remove('dragging');
            this.dragState.isDragging = false;
            this.dragState.element = null;
        }
    },
    
    // Add resize handle to window
    addResizeHandle(window) {
        const resizeHandle = Utils.dom.create('div', {
            className: 'resize-handle',
            style: 'position: absolute; bottom: 0; right: 0; width: 20px; height: 20px; cursor: se-resize;'
        });
        
        window.appendChild(resizeHandle);
        
        let isResizing = false;
        
        Utils.dom.on(resizeHandle, 'mousedown', (e) => {
            isResizing = true;
            e.stopPropagation();
            window.classList.add('resizing');
        });
        
        Utils.dom.on(document, 'mousemove', (e) => {
            if (!isResizing) return;
            
            const rect = window.getBoundingClientRect();
            const newWidth = e.clientX - rect.left;
            const newHeight = e.clientY - rect.top;
            
            window.style.width = Math.max(Config.windows.minWidth, newWidth) + 'px';
            window.style.height = Math.max(Config.windows.minHeight, newHeight) + 'px';
            
            // Recalculate layout during resize
            this.recalculateWindowLayout(window);
        });
        
        Utils.dom.on(document, 'mouseup', () => {
            if (isResizing) {
                window.classList.remove('resizing');
                // Final layout recalculation after resize
                setTimeout(() => {
                    this.recalculateWindowLayout(window);
                }, 50);
            }
            isResizing = false;
        });
    }
};

// Global access
window.WindowManager = WindowManager; // Enhanced Dock Manager Module - macOS Style Magnification
const DockManager = {
    state: {
        isHovered: false,
        mouseX: 0,
        items: [],
        maxScale: 1.8,
        baseScale: 1,
        influence: 150, // Distance of influence in pixels
        scalingSpeed: 0.15 // Animation smoothing factor
    },

    // Initialize dock functionality
    init() {
        this.setupDockItems();
        this.setupMagnificationEvents();
        this.setupHoverEffects();
        this.startAnimationLoop();
        Utils.logger.debug('Enhanced Dock Manager initialized');
    },

    // Setup dock items array for efficient management
    setupDockItems() {
        const dockItems = Utils.dom.queryAll('.dock-item');
        this.state.items = Array.from(dockItems).map(item => ({
            element: item,
            originalRect: null,
            currentScale: 1,
            targetScale: 1,
            centerX: 0
        }));
        
        this.updateItemPositions();
    },

    // Update item center positions
    updateItemPositions() {
        const dock = Utils.dom.get('dock');
        if (!dock) return;
        
        const dockRect = dock.getBoundingClientRect();
        
        this.state.items.forEach(item => {
            const rect = item.element.getBoundingClientRect();
            item.centerX = rect.left + rect.width / 2 - dockRect.left;
            item.originalRect = {
                width: rect.width,
                height: rect.height
            };
        });
    },

    // Setup magnification event listeners
    setupMagnificationEvents() {
        const dock = Utils.dom.get('dock');
        if (!dock) return;
        
        // Mouse enter dock
        Utils.dom.on(dock, 'mouseenter', (e) => {
            this.state.isHovered = true;
            dock.classList.add('dock-magnification');
        });
        
        // Mouse move within dock
        Utils.dom.on(dock, 'mousemove', (e) => {
            this.handleMouseMove(e);
        });
        
        // Mouse leave dock
        Utils.dom.on(dock, 'mouseleave', () => {
            this.state.isHovered = false;
            dock.classList.remove('dock-magnification');
            this.resetMagnification();
        });

        // Handle window resize
        Utils.dom.on(window, 'resize', () => {
            this.updateItemPositions();
        });
    },

    // Handle mouse movement for magnification
    handleMouseMove(e) {
        if (!this.state.isHovered) return;
        
        const dock = e.currentTarget;
        const dockRect = dock.getBoundingClientRect();
        this.state.mouseX = e.clientX - dockRect.left;
        
        this.calculateMagnification();
    },

    // Calculate magnification scales for all items
    calculateMagnification() {
        this.state.items.forEach(item => {
            const distance = Math.abs(this.state.mouseX - item.centerX);
            
            // Calculate scale based on distance with smooth curve
            let scale = this.state.baseScale;
            
            if (distance <= this.state.influence) {
                // Use a smooth easing curve for natural magnification
                const normalizedDistance = distance / this.state.influence;
                const easedDistance = 1 - Math.pow(normalizedDistance, 1.5);
                scale = this.state.baseScale + (this.state.maxScale - this.state.baseScale) * easedDistance;
            }
            
            item.targetScale = Math.max(this.state.baseScale, Math.min(this.state.maxScale, scale));
        });
    },

    // Animation loop for smooth scaling
    startAnimationLoop() {
        const animate = () => {
            let hasChanges = false;
            
            this.state.items.forEach((item, index) => {
                // Smooth animation towards target scale
                const diff = item.targetScale - item.currentScale;
                
                if (Math.abs(diff) > 0.001) {
                    item.currentScale += diff * this.state.scalingSpeed;
                    hasChanges = true;
                    
                    // Apply transform with improved spacing
                    this.applyItemTransform(item, index);
                }
            });
            
            requestAnimationFrame(animate);
        };
        
        animate();
    },

    // Apply transform to individual dock item
    applyItemTransform(item, index) {
        const scale = item.currentScale;
        
        // Calculate spacing adjustment to prevent overlap
        const spacing = this.calculateSpacing(index, scale);
        
        // Apply combined transform
        const transform = `translateX(${spacing}px) translateY(${-Math.max(0, (scale - 1) * 8)}px) scale(${scale})`;
        item.element.style.transform = transform;
        
        // Adjust z-index for proper layering
        item.element.style.zIndex = Math.round(scale * 100);
    },

    // Calculate spacing adjustment to prevent overlapping
    calculateSpacing(index, scale) {
        let spacing = 0;
        const items = this.state.items;
        
        // Calculate cumulative spacing from items to the left
        for (let i = 0; i < index; i++) {
            const leftItemScale = items[i].currentScale;
            const extraSpace = (leftItemScale - 1) * 24; // Adjust multiplier as needed
            spacing += extraSpace;
        }
        
        return spacing;
    },

    // Reset magnification to normal state
    resetMagnification() {
        this.state.items.forEach(item => {
            item.targetScale = this.state.baseScale;
        });
    },

    // Setup hover effects for individual items
    setupHoverEffects() {
        this.state.items.forEach(item => {
            Utils.dom.on(item.element, 'mouseenter', () => {
                item.element.classList.add('hover');
                
                // Add subtle bounce effect
                if (!this.state.isHovered) {
                    item.element.style.transform = 'translateY(-4px) scale(1.1)';
                }
            });
            
            Utils.dom.on(item.element, 'mouseleave', () => {
                item.element.classList.remove('hover');
                
                // Reset if not in magnification mode
                if (!this.state.isHovered) {
                    item.element.style.transform = 'scale(1)';
                    item.element.style.zIndex = '';
                }
            });
            
            // Add click feedback
            Utils.dom.on(item.element, 'click', (e) => {
                this.showClickFeedback(item.element);
            });
        });
    },

    // Show visual feedback when dock item is clicked
    showClickFeedback(element) {
        // Add click effect class
        element.classList.add('dock-click-feedback');
        
        // Create ripple effect
        const ripple = document.createElement('div');
        ripple.className = 'dock-ripple';
        
        const rect = element.getBoundingClientRect();
        const size = Math.max(rect.width, rect.height);
        ripple.style.width = ripple.style.height = size + 'px';
        ripple.style.left = rect.width / 2 - size / 2 + 'px';
        ripple.style.top = rect.height / 2 - size / 2 + 'px';
        
        element.appendChild(ripple);
        
        // Remove effects after animation
        setTimeout(() => {
            element.classList.remove('dock-click-feedback');
            if (ripple.parentNode) {
                ripple.remove();
            }
        }, 300);
    },

    // Enhanced feedback for specific actions
    showToggleCloseFeedback(appName) {
        const dockItem = document.querySelector(`.dock-item[data-app="${appName}"]`);
        if (!dockItem) return;
        
        // Special animation for closing
        dockItem.style.transform = 'scale(0.85) rotate(5deg)';
        dockItem.style.transition = 'all 0.15s ease-out';
        
        setTimeout(() => {
            dockItem.style.transform = '';
            dockItem.style.transition = '';
        }, 150);
    },

    // Enhanced feedback for opening apps
    showOpenFeedback(appName) {
        const dockItem = document.querySelector(`.dock-item[data-app="${appName}"]`);
        if (!dockItem) return;
        
        // Bounce animation for opening
        dockItem.style.animation = 'dockBounce 0.4s ease-in-out';
        
        setTimeout(() => {
            dockItem.style.animation = '';
        }, 400);
    },

    // Public API methods
    setMagnificationLevel(level) {
        this.state.maxScale = Math.max(1, Math.min(3, level));
    },

    setInfluenceRadius(radius) {
        this.state.influence = Math.max(50, Math.min(300, radius));
    },

    setAnimationSpeed(speed) {
        this.state.scalingSpeed = Math.max(0.05, Math.min(0.5, speed));
    },

    // Add new dock item dynamically
    addDockItem(element) {
        const newItem = {
            element: element,
            originalRect: null,
            currentScale: 1,
            targetScale: 1,
            centerX: 0
        };
        
        this.state.items.push(newItem);
        this.updateItemPositions();
        this.setupHoverEffects();
    },

    // Debug info
    getDebugInfo() {
        return {
            isHovered: this.state.isHovered,
            mouseX: this.state.mouseX,
            itemCount: this.state.items.length,
            maxScale: this.state.maxScale,
            influence: this.state.influence
        };
    }
};

// Global access and testing functions
window.DockManager = DockManager;

// Testing utilities
window.testDockMagnification = function(maxScale = 1.8, influence = 150, speed = 0.15) {
    DockManager.setMagnificationLevel(maxScale);
    DockManager.setInfluenceRadius(influence);
    DockManager.setAnimationSpeed(speed);
    console.log('🎯 Dock magnification updated:', { maxScale, influence, speed });
};

window.getDockDebug = function() {
    console.log('🔍 Dock Debug Info:', DockManager.getDebugInfo());
}; // Desktop Manager Module
const DesktopManager = {
    // Drag state management
    dragState: {
        isDragging: false,
        draggedIcon: null,
        startX: 0,
        startY: 0,
        offsetX: 0,
        offsetY: 0,
        originalPosition: null,
        dragThreshold: 5,
        dragTimeout: null
    },
    
    // Click state management
    clickState: {
        clickTimeout: null,
        clickDelay: 200,
        lastClickedIcon: null
    },
    
    // Grid configuration
    gridConfig: {
        cellWidth: 100,
        cellHeight: 120,
        gap: 10,
        padding: 20
    },
    
    // Initialize desktop functionality
    init() {
        this.setupIconSelection();
        this.setupIconDragging();
        this.setupGridPositioning();
        this.updateGridConfig();
        Utils.logger.debug('Desktop Manager initialized');
    },
    
    // Update grid configuration based on screen size
    updateGridConfig() {
        const desktop = Utils.dom.get('desktop');
        const desktopRect = desktop.getBoundingClientRect();
        
        if (window.innerWidth <= 480) {
            this.gridConfig = { cellWidth: 80, cellHeight: 100, gap: 6, padding: 10 };
        } else if (window.innerWidth <= 768) {
            this.gridConfig = { cellWidth: 90, cellHeight: 110, gap: 8, padding: 15 };
        } else {
            this.gridConfig = { cellWidth: 100, cellHeight: 120, gap: 10, padding: 20 };
        }
        
        // Update CSS custom properties
        document.documentElement.style.setProperty('--grid-cell-width', this.gridConfig.cellWidth + 'px');
        document.documentElement.style.setProperty('--grid-cell-height', this.gridConfig.cellHeight + 'px');
        document.documentElement.style.setProperty('--grid-gap', this.gridConfig.gap + 'px');
    },
    
    // Set up icon selection
    setupIconSelection() {
        Utils.dom.queryAll('.desktop-icon').forEach(icon => {
            Utils.dom.on(icon, 'click', (e) => {
                e.stopPropagation();
                this.handleIconClick(icon);
            });
            
            // Double-click to open (existing functionality)
            Utils.dom.on(icon, 'dblclick', (e) => {
                e.stopPropagation();
                e.preventDefault();
                
                // Clear any pending single click
                if (this.clickState.clickTimeout) {
                    clearTimeout(this.clickState.clickTimeout);
                    this.clickState.clickTimeout = null;
                }
                
                const appName = icon.dataset.app;
                if (window.PortfolioApp && typeof window.PortfolioApp.openApplication === 'function') {
                    window.PortfolioApp.openApplication(appName);
                }
            });
        });
        
        Utils.dom.on(Utils.dom.get('desktop'), 'click', () => {
            this.deselectAll();
        });
    },
    
    // Handle icon click with delay to distinguish from double-click
    handleIconClick(icon) {
        // Clear any existing timeout
        if (this.clickState.clickTimeout) {
            clearTimeout(this.clickState.clickTimeout);
            this.clickState.clickTimeout = null;
        }
        
        // Set timeout for single click action
        this.clickState.clickTimeout = setTimeout(() => {
            this.selectIcon(icon);
            this.clickState.clickTimeout = null;
        }, this.clickState.clickDelay);
        
        this.clickState.lastClickedIcon = icon;
    },
    
    // Set up icon dragging
    setupIconDragging() {
        Utils.dom.queryAll('.desktop-icon').forEach(icon => {
            Utils.dom.on(icon, 'mousedown', this.startDrag.bind(this));
        });
        
        Utils.dom.on(document, 'mousemove', this.handleDrag.bind(this));
        Utils.dom.on(document, 'mouseup', this.stopDrag.bind(this));
        
        // Touch events for mobile
        Utils.dom.queryAll('.desktop-icon').forEach(icon => {
            Utils.dom.on(icon, 'touchstart', this.startDrag.bind(this), { passive: false });
        });
        
        Utils.dom.on(document, 'touchmove', this.handleDrag.bind(this), { passive: false });
        Utils.dom.on(document, 'touchend', this.stopDrag.bind(this));
    },
    
    // Start dragging an icon
    startDrag(e) {
        const icon = e.currentTarget;
        const clientX = e.touches ? e.touches[0].clientX : e.clientX;
        const clientY = e.touches ? e.touches[0].clientY : e.clientY;
        
        // Store initial position for drag detection
        this.dragState.startX = clientX;
        this.dragState.startY = clientY;
        this.dragState.draggedIcon = icon;
        
        const rect = icon.getBoundingClientRect();
        this.dragState.offsetX = clientX - rect.left;
        this.dragState.offsetY = clientY - rect.top;
        
        // Store original grid position
        this.dragState.originalPosition = {
            column: icon.style.gridColumn || getComputedStyle(icon).gridColumn,
            row: icon.style.gridRow || getComputedStyle(icon).gridRow
        };
        
        // Set a timeout to start dragging - this allows clicks to work
        this.dragState.dragTimeout = setTimeout(() => {
            if (!this.dragState.isDragging && this.dragState.draggedIcon === icon) {
                this.beginDrag(icon, rect);
            }
        }, 150);
        
        // Prevent text selection during potential drag
        e.preventDefault();
    },
    
    // Begin the actual drag operation
    beginDrag(icon, rect) {
        this.dragState.isDragging = true;
        
        // Add dragging class and make it float
        icon.classList.add('dragging');
        icon.style.left = rect.left + 'px';
        icon.style.top = rect.top + 'px';
        
        // Select the icon being dragged
        this.selectIcon(icon);
        
        // Prevent text selection
        document.body.style.userSelect = 'none';
        
        Utils.logger.debug('Started dragging icon:', icon.dataset.app);
    },
    
    // Handle drag movement
    handleDrag(e) {
        if (!this.dragState.draggedIcon) return;
        
        const clientX = e.touches ? e.touches[0].clientX : e.clientX;
        const clientY = e.touches ? e.touches[0].clientY : e.clientY;
        
        // Check if we've moved enough to start dragging
        const deltaX = Math.abs(clientX - this.dragState.startX);
        const deltaY = Math.abs(clientY - this.dragState.startY);
        
        if (!this.dragState.isDragging && (deltaX > this.dragState.dragThreshold || deltaY > this.dragState.dragThreshold)) {
            // Clear the drag timeout and start dragging immediately
            if (this.dragState.dragTimeout) {
                clearTimeout(this.dragState.dragTimeout);
                this.dragState.dragTimeout = null;
            }
            
            const rect = this.dragState.draggedIcon.getBoundingClientRect();
            this.beginDrag(this.dragState.draggedIcon, rect);
        }
        
        if (!this.dragState.isDragging) return;
        
        e.preventDefault();
        
        const icon = this.dragState.draggedIcon;
        const newX = clientX - this.dragState.offsetX;
        const newY = clientY - this.dragState.offsetY;
        
        // Update icon position
        icon.style.left = newX + 'px';
        icon.style.top = newY + 'px';
        
        // Show grid position hints
        this.showGridHints(clientX, clientY);
    },
    
    // Stop dragging
    stopDrag(e) {
        // Clear drag timeout if it exists
        if (this.dragState.dragTimeout) {
            clearTimeout(this.dragState.dragTimeout);
            this.dragState.dragTimeout = null;
        }
        
        if (!this.dragState.isDragging) {
            // If we weren't dragging, just reset the drag state
            this.dragState.draggedIcon = null;
            return;
        }
        
        const icon = this.dragState.draggedIcon;
        const clientX = e.changedTouches ? e.changedTouches[0].clientX : e.clientX;
        const clientY = e.changedTouches ? e.changedTouches[0].clientY : e.clientY;
        
        // Calculate grid position
        const gridPosition = this.getGridPosition(clientX, clientY);
        
        // Check if position is valid and not occupied
        if (this.isValidGridPosition(gridPosition) && !this.isGridPositionOccupied(gridPosition, icon)) {
            // Snap to grid
            this.snapToGrid(icon, gridPosition);
            Utils.logger.debug('Icon snapped to grid:', gridPosition);
        } else {
            // Revert to original position
            this.revertToOriginalPosition(icon);
            Utils.logger.debug('Icon reverted to original position');
        }
        
        // Clean up
        icon.classList.remove('dragging');
        icon.style.left = '';
        icon.style.top = '';
        this.hideGridHints();
        document.body.style.userSelect = '';
        
        // Reset drag state
        this.dragState.isDragging = false;
        this.dragState.draggedIcon = null;
        
        Utils.logger.debug('Stopped dragging icon');
    },
    
    // Get grid position from mouse coordinates
    getGridPosition(clientX, clientY) {
        const desktop = Utils.dom.get('desktop');
        const desktopRect = desktop.getBoundingClientRect();
        
        const relativeX = clientX - desktopRect.left - this.gridConfig.padding;
        const relativeY = clientY - desktopRect.top - this.gridConfig.padding;
        
        const column = Math.max(1, Math.floor(relativeX / (this.gridConfig.cellWidth + this.gridConfig.gap)) + 1);
        const row = Math.max(1, Math.floor(relativeY / (this.gridConfig.cellHeight + this.gridConfig.gap)) + 1);
        
        return { column, row };
    },
    
    // Check if grid position is valid
    isValidGridPosition(position) {
        const desktop = Utils.dom.get('desktop');
        const desktopRect = desktop.getBoundingClientRect();
        
        const maxColumns = Math.floor((desktopRect.width - this.gridConfig.padding * 2) / (this.gridConfig.cellWidth + this.gridConfig.gap));
        const maxRows = Math.floor((desktopRect.height - this.gridConfig.padding * 2) / (this.gridConfig.cellHeight + this.gridConfig.gap));
        
        return position.column >= 1 && position.column <= maxColumns && 
               position.row >= 1 && position.row <= maxRows;
    },
    
    // Check if grid position is occupied by another icon
    isGridPositionOccupied(position, excludeIcon) {
        const icons = Utils.dom.queryAll('.desktop-icon');
        
        for (let icon of icons) {
            if (icon === excludeIcon) continue;
            
            const iconColumn = parseInt(icon.style.gridColumn || getComputedStyle(icon).gridColumn);
            const iconRow = parseInt(icon.style.gridRow || getComputedStyle(icon).gridRow);
            
            if (iconColumn === position.column && iconRow === position.row) {
                return true;
            }
        }
        
        return false;
    },
    
    // Snap icon to grid position
    snapToGrid(icon, position) {
        icon.style.gridColumn = position.column;
        icon.style.gridRow = position.row;
        
        // Store position in localStorage for persistence
        this.saveIconPosition(icon.dataset.app, position);
    },
    
    // Revert icon to original position
    revertToOriginalPosition(icon) {
        if (this.dragState.originalPosition) {
            icon.style.gridColumn = this.dragState.originalPosition.column;
            icon.style.gridRow = this.dragState.originalPosition.row;
        }
    },
    
    // Show grid positioning hints
    showGridHints(clientX, clientY) {
        // Remove existing hints
        this.hideGridHints();
        
        const position = this.getGridPosition(clientX, clientY);
        
        if (this.isValidGridPosition(position) && !this.isGridPositionOccupied(position, this.dragState.draggedIcon)) {
            // Create visual hint
            const hint = Utils.dom.create('div', {
                className: 'desktop-grid-cell highlight',
                style: `
                    position: absolute;
                    left: ${this.gridConfig.padding + (position.column - 1) * (this.gridConfig.cellWidth + this.gridConfig.gap)}px;
                    top: ${this.gridConfig.padding + (position.row - 1) * (this.gridConfig.cellHeight + this.gridConfig.gap)}px;
                    width: ${this.gridConfig.cellWidth}px;
                    height: ${this.gridConfig.cellHeight}px;
                    z-index: 5;
                `
            });
            
            Utils.dom.get('desktop').appendChild(hint);
        }
    },
    
    // Hide grid positioning hints
    hideGridHints() {
        Utils.dom.queryAll('.desktop-grid-cell').forEach(hint => {
            hint.remove();
        });
    },
    
    // Set up grid positioning system
    setupGridPositioning() {
        // Load saved positions
        this.loadIconPositions();
        
        // Handle window resize
        Utils.dom.on(window, 'resize', Utils.time.debounce(() => {
            this.updateGridConfig();
        }, 250));
    },
    
    // Save icon position to localStorage
    saveIconPosition(appName, position) {
        const positions = Utils.storage.get('desktop_icon_positions', {});
        positions[appName] = position;
        Utils.storage.set('desktop_icon_positions', positions);
    },
    
    // Load icon positions from localStorage
    loadIconPositions() {
        const positions = Utils.storage.get('desktop_icon_positions', {});
        
        Object.entries(positions).forEach(([appName, position]) => {
            const icon = Utils.dom.query(`.desktop-icon[data-app="${appName}"]`);
            if (icon && this.isValidGridPosition(position)) {
                icon.style.gridColumn = position.column;
                icon.style.gridRow = position.row;
            }
        });
    },
    
    // Select icon
    selectIcon(icon) {
        this.deselectAll();
        icon.classList.add('selected');
    },
    
    // Deselect all icons
    deselectAll() {
        Utils.dom.queryAll('.desktop-icon').forEach(icon => {
            icon.classList.remove('selected');
        });
    }
};

// Global access
window.DesktopManager = DesktopManager; // Menu Bar Manager Module
const MenuBarManager = {
    activeDropdown: null,
    
    // Initialize menu bar functionality
    init() {
        console.log('🚀 Initializing Menu Bar Manager...');
        
        this.updateTime();
        this.startClock();
        this.createDropdowns();
        
        // Set up basic event listeners immediately
        this.setupBasicEventListeners();
        
        // Delay full menu setup to ensure PortfolioApp is loaded
        this.waitForPortfolioApp(() => {
            this.setupEventListeners();
        });
        
        Utils.logger.debug('Menu Bar Manager initialized');
        console.log('✅ Menu Bar Manager initialization complete');
    },
    
    // Setup basic event listeners that don't require PortfolioApp
    setupBasicEventListeners() {
        // Use multiple attempts to ensure Apple listener is attached
        this.setupAppleMenuListener();
        
        // Retry setup after a delay in case elements aren't ready
        setTimeout(() => this.setupAppleMenuListener(), 500);
        setTimeout(() => this.setupAppleMenuListener(), 1000);
        
        // Close dropdowns when clicking elsewhere (but not on menu bar elements)
        document.addEventListener('click', (e) => {
            // Don't close if clicking on menu bar or dropdown elements
            if (e.target.closest('.menu-bar') || e.target.closest('.menu-dropdown')) {
                console.log('🔒 Click on menu element - not closing dropdowns');
                return;
            }
            
            console.log('🔒 Click outside menu - closing dropdowns');
            this.closeAllDropdowns();
        });
    },
    
    // Setup Apple menu listener with improved detection
    setupAppleMenuListener() {
        const appleElement = document.querySelector('.plum-icon.menu-icon');
        
        // Skip if already has our listener
        if (appleElement && appleElement.hasAttribute('data-apple-listener')) {
            return;
        }
        
        if (appleElement) {
            console.log('🍇 Setting up Plum menu listener...', appleElement);
            
            // Mark as having listener to prevent duplicates
            appleElement.setAttribute('data-apple-listener', 'true');
            appleElement.style.cursor = 'pointer';
            
            // Add the click handler with proper binding
            appleElement.addEventListener('click', (e) => {
                e.preventDefault();
                e.stopPropagation();
                console.log('🍇 Plum menu clicked!');
                
                // Ensure dropdowns exist
                if (!document.getElementById('apple-dropdown')) {
                    console.log('🔧 Creating dropdowns...');
                    this.createDropdowns();
                }
                
                // Toggle the Apple dropdown
                this.toggleDropdown('apple');
            });
            
            console.log('✅ Plum menu event listener attached successfully');
        } else {
            console.warn('⚠️ Plum icon not found yet, will retry...');
        }
    },
    
    // Wait for PortfolioApp to be available
    waitForPortfolioApp(callback) {
        if (window.PortfolioApp && typeof window.PortfolioApp.openApplication === 'function') {
            callback();
        } else {
            setTimeout(() => {
                this.waitForPortfolioApp(callback);
            }, 50);
        }
    },
    
    // Setup event listeners for menu bar items
    setupEventListeners() {
        // Menu items functionality
        this.setupMenuItems();
        
        // Time dropdown
        const timeElement = Utils.dom.get('current-time');
        if (timeElement) {
            timeElement.style.cursor = 'pointer';
            timeElement.addEventListener('click', (e) => {
                e.stopPropagation();
                this.toggleDropdown('time');
            });
        }
        
        // WiFi dropdown
        const wifiElement = document.querySelector('.menu-right .fa-wifi');
        if (wifiElement) {
            wifiElement.style.cursor = 'pointer';
            wifiElement.addEventListener('click', (e) => {
                e.stopPropagation();
                this.toggleDropdown('wifi');
            });
        }
        
        // Battery dropdown
        const batteryElement = document.querySelector('.menu-right .fa-battery-three-quarters');
        if (batteryElement) {
            batteryElement.style.cursor = 'pointer';
            batteryElement.addEventListener('click', (e) => {
                e.stopPropagation();
                this.toggleDropdown('battery');
            });
        }
        
        // Apple menu is already set up in setupBasicEventListeners
        // No need to duplicate the event listener here
    },
    
    // Setup menu item functionality
    setupMenuItems() {
        const menuItems = document.querySelectorAll('.menu-item');
        const appMappings = {
            'About': 'about',
            'Healthcare Marketing': 'projects', // Opens projects since it's healthcare focused
            'Resume': 'resume',
            'Contact': 'contact'
        };
        
        menuItems.forEach(item => {
            const itemText = item.textContent.trim();
            
            // Skip the "Kevin Plumlee" item as it's just the brand name
            if (itemText === 'Kevin Plumlee') return;
            
            item.addEventListener('click', (e) => {
                e.preventDefault();
                e.stopPropagation();
                
                // Update active state
                menuItems.forEach(mi => mi.classList.remove('active'));
                item.classList.add('active');
                
                // Open corresponding app
                const appName = appMappings[itemText];
                
                if (appName) {
                    this.closeAllDropdowns(); // Close any open dropdowns
                    
                    // Use the correct PortfolioApp method
                    if (window.PortfolioApp && typeof window.PortfolioApp.openApplication === 'function') {
                        window.PortfolioApp.openApplication(appName);
                    } else {
                        // Fallback: try to trigger dock item click
                        const dockItem = document.querySelector(`.dock-item[data-app="${appName}"]`);
                        if (dockItem) {
                            dockItem.click();
                        }
                    }
                }
            });
        });
    },
    
    // Create dropdown elements
    createDropdowns() {
        const menuBar = document.querySelector('.menu-bar');
        if (!menuBar) {
            console.error('Menu bar not found - cannot create dropdowns');
            return;
        }
        
        console.log('Creating dropdowns...');
        
        // Time dropdown
        const timeDropdown = document.createElement('div');
        timeDropdown.id = 'time-dropdown';
        timeDropdown.className = 'menu-dropdown';
        timeDropdown.innerHTML = this.getTimeDropdownHTML();
        menuBar.appendChild(timeDropdown);
        
        // WiFi dropdown
        const wifiDropdown = document.createElement('div');
        wifiDropdown.id = 'wifi-dropdown';
        wifiDropdown.className = 'menu-dropdown';
        wifiDropdown.innerHTML = this.getWifiDropdownHTML();
        menuBar.appendChild(wifiDropdown);
        
        // Battery dropdown
        const batteryDropdown = document.createElement('div');
        batteryDropdown.id = 'battery-dropdown';
        batteryDropdown.className = 'menu-dropdown';
        batteryDropdown.innerHTML = this.getBatteryDropdownHTML();
        menuBar.appendChild(batteryDropdown);
        
        // Apple dropdown
        const appleDropdown = document.createElement('div');
        appleDropdown.id = 'apple-dropdown';
        appleDropdown.className = 'menu-dropdown';
        appleDropdown.innerHTML = this.getAppleDropdownHTML();
        menuBar.appendChild(appleDropdown);
        
        console.log('✅ All dropdowns created:', {
            time: document.getElementById('time-dropdown'),
            wifi: document.getElementById('wifi-dropdown'),
            battery: document.getElementById('battery-dropdown'),
            apple: document.getElementById('apple-dropdown')
        });
    },
    
    // Toggle dropdown visibility
    toggleDropdown(type) {
        console.log(`🔄 Toggling dropdown: ${type}`);
        const dropdown = document.getElementById(`${type}-dropdown`);
        if (!dropdown) {
            console.error(`❌ Dropdown element not found: ${type}-dropdown`);
            console.log('Available dropdowns:', document.querySelectorAll('.menu-dropdown'));
            return;
        }
        
        console.log(`📍 Found dropdown element:`, dropdown);
        
        if (this.activeDropdown === type) {
            console.log(`🔄 Closing active dropdown: ${type}`);
            this.closeAllDropdowns();
            return;
        }
        
        this.closeAllDropdowns();
        
        // Show the dropdown with enhanced styling
        dropdown.style.display = 'block';
        dropdown.style.visibility = 'visible';
        dropdown.style.opacity = '1';
        dropdown.style.position = 'absolute';
        dropdown.style.zIndex = '9999';
        
        // Enhanced positioning for Apple dropdown
        if (type === 'apple') {
            dropdown.style.left = '8px';
            dropdown.style.top = '24px';
            dropdown.style.right = 'auto';
            dropdown.style.minWidth = '240px';
            dropdown.style.background = 'rgba(30, 30, 30, 0.95)';
            dropdown.style.backdropFilter = 'blur(25px)';
            dropdown.style.borderRadius = '8px';
            dropdown.style.boxShadow = '0 8px 24px rgba(0, 0, 0, 0.4)';
            dropdown.style.border = '1px solid rgba(255, 255, 255, 0.15)';
            console.log('🍎 Applied enhanced Apple dropdown positioning and styling');
        }
        
        this.activeDropdown = type;
        console.log(`✅ Opened dropdown: ${type}`, {
            display: dropdown.style.display,
            visibility: dropdown.style.visibility,
            opacity: dropdown.style.opacity,
            position: dropdown.style.position,
            zIndex: dropdown.style.zIndex,
            left: dropdown.style.left,
            top: dropdown.style.top
        });
        
        if (type === 'time') {
            this.updateCalendar();
            this.updateDetailedTime();
        }
    },
    
    // Close all dropdowns
    closeAllDropdowns() {
        const dropdowns = document.querySelectorAll('.menu-dropdown');
        dropdowns.forEach(dropdown => {
            dropdown.style.display = 'none';
            dropdown.style.visibility = 'hidden';
            dropdown.style.opacity = '0';
        });
        this.activeDropdown = null;
        console.log('🔒 All dropdowns closed');
    },
    
    // Get time dropdown HTML
    getTimeDropdownHTML() {
        return `
            <div class="dropdown-content">
                <div class="digital-clock">
                    <div class="time-display" id="detailed-time"></div>
                    <div class="date-display" id="detailed-date"></div>
                </div>
                <div class="calendar-container">
                    <div class="calendar-header">
                        <button id="prev-month">&lt;</button>
                        <span id="calendar-month-year"></span>
                        <button id="next-month">&gt;</button>
                    </div>
                    <div class="calendar-grid" id="calendar-grid"></div>
                </div>
            </div>
        `;
    },
    
    // Get WiFi dropdown HTML
    getWifiDropdownHTML() {
        const networks = [
            { name: "KevinPlumlee_5G", strength: 3, locked: false, connected: true },
            { name: "FBI Surveillance Van", strength: 2, locked: true, connected: false },
            { name: "404_Network_Unavailable", strength: 1, locked: true, connected: false },
            { name: "Pretty_Fly_For_A_WiFi", strength: 2, locked: true, connected: false },
            { name: "Loading...", strength: 1, locked: false, connected: false },
            { name: "It_Hurts_When_IP", strength: 3, locked: true, connected: false }
        ];
        
        let html = '<div class="dropdown-content"><div class="wifi-header">Wi-Fi Networks</div>';
        networks.forEach(network => {
            const bars = '▂▄▆'.substring(0, network.strength);
            const lockIcon = network.locked ? '🔒' : '';
            const checkIcon = network.connected ? '✓' : '';
            html += `
                <div class="wifi-network ${network.connected ? 'connected' : ''}" onclick="MenuBarManager.connectToWifi('${network.name}')">
                    <span class="network-name">${checkIcon} ${network.name} ${lockIcon}</span>
                    <span class="signal-strength">${bars}</span>
                </div>
            `;
        });
        html += '</div>';
        return html;
    },
    
    // Get Battery dropdown HTML
    getBatteryDropdownHTML() {
        return `
            <div class="dropdown-content">
                <div class="battery-header">Battery Status</div>
                <div class="battery-visual">
                    <div class="battery-body">
                        <div class="battery-level" id="battery-fill"></div>
                    </div>
                    <div class="battery-tip"></div>
                </div>
                <div class="battery-info">
                    <div class="battery-percentage" id="battery-percent">84%</div>
                    <div class="battery-time" id="battery-time">6:42 remaining</div>
                </div>
                <div class="battery-tips">
                    <div class="tip">💡 Tip: Your laptop is powered by caffeine and determination</div>
                    <div class="tip">⚡ Fun fact: This battery is 47% organic</div>
                    <div class="tip">🔋 Current mood: Electrically optimistic</div>
                </div>
                <button class="battery-saver" onclick="MenuBarManager.toggleBatterySaver()">
                    Enable Procrastination Mode
                </button>
            </div>
        `;
    },
    
    // Get Apple dropdown HTML
    getAppleDropdownHTML() {
        return `
            <div class="dropdown-content">
                <div class="apple-menu-item" onclick="MenuBarManager.appleMenuAction('about')">
                    <span>About This Kevin™</span>
                </div>
                <div class="menu-separator"></div>
                <div class="apple-menu-item" onclick="MenuBarManager.appleMenuAction('kevin-preferences')">
                    <span>Kevin Preferences... ⚙️</span>
                </div>
                <div class="apple-menu-item" onclick="MenuBarManager.appleMenuAction('healthcare-store')">
                    <span>Healthcare Marketing Store 🏥</span>
                </div>
                <div class="menu-separator"></div>
                <div class="apple-menu-item" onclick="MenuBarManager.appleMenuAction('recent')">
                    <span>Recent Coffee Breaks ☕</span>
                    <span class="submenu-arrow">▶</span>
                </div>
                <div class="menu-separator"></div>
                <div class="apple-menu-item" onclick="MenuBarManager.appleMenuAction('force-quit')">
                    <span>Force Quit Procrastination 💪</span>
                </div>
                <div class="menu-separator"></div>
                <div class="apple-menu-item" onclick="MenuBarManager.appleMenuAction('sleep')">
                    <span>Power Nap Mode 😴</span>
                </div>
                <div class="apple-menu-item" onclick="MenuBarManager.appleMenuAction('restart')">
                    <span>Restart Creative Genius 🧠</span>
                </div>
                <div class="apple-menu-item" onclick="MenuBarManager.appleMenuAction('shutdown')">
                    <span>Log Off Work Day 🏠</span>
                </div>
                <div class="menu-separator"></div>
                <div class="apple-menu-item" onclick="MenuBarManager.appleMenuAction('logout')">
                    <span>Log Out Kevin Plumlee 👋</span>
                </div>
            </div>
        `;
    },
    
    // Update detailed time display
    updateDetailedTime() {
        const timeEl = document.getElementById('detailed-time');
        const dateEl = document.getElementById('detailed-date');
        if (timeEl && dateEl) {
            const now = new Date();
            timeEl.textContent = now.toLocaleTimeString('en-US', {
                hour12: true,
                hour: 'numeric',
                minute: '2-digit',
                second: '2-digit'
            });
            dateEl.textContent = now.toLocaleDateString('en-US', {
                weekday: 'long',
                year: 'numeric',
                month: 'long',
                day: 'numeric'
            });
        }
    },
    
    // Update calendar
    updateCalendar() {
        const now = new Date();
        const year = now.getFullYear();
        const month = now.getMonth();
        
        document.getElementById('calendar-month-year').textContent = 
            now.toLocaleDateString('en-US', { month: 'long', year: 'numeric' });
        
        this.renderCalendar(year, month);
        
        // Setup month navigation
        document.getElementById('prev-month').onclick = () => {
            const newDate = new Date(year, month - 1);
            this.renderCalendar(newDate.getFullYear(), newDate.getMonth());
        };
        
        document.getElementById('next-month').onclick = () => {
            const newDate = new Date(year, month + 1);
            this.renderCalendar(newDate.getFullYear(), newDate.getMonth());
        };
    },
    
    // Render calendar grid
    renderCalendar(year, month) {
        const grid = document.getElementById('calendar-grid');
        if (!grid) return;
        
        const firstDay = new Date(year, month, 1).getDay();
        const daysInMonth = new Date(year, month + 1, 0).getDate();
        const today = new Date();
        
        let html = '<div class="calendar-row">';
        ['S', 'M', 'T', 'W', 'T', 'F', 'S'].forEach(day => {
            html += `<div class="calendar-day-header">${day}</div>`;
        });
        html += '</div>';
        
        html += '<div class="calendar-row">';
        let dayCount = 0;
        
        // Empty cells for days before month starts
        for (let i = 0; i < firstDay; i++) {
            html += '<div class="calendar-day empty"></div>';
            dayCount++;
        }
        
        // Days of the month
        for (let day = 1; day <= daysInMonth; day++) {
            if (dayCount % 7 === 0 && dayCount > 0) {
                html += '</div><div class="calendar-row">';
            }
            
            const isToday = today.getFullYear() === year && 
                           today.getMonth() === month && 
                           today.getDate() === day;
            
            html += `<div class="calendar-day ${isToday ? 'today' : ''}">${day}</div>`;
            dayCount++;
        }
        
        html += '</div>';
        grid.innerHTML = html;
    },
    
    // Enhanced alert with visual effects
    showCoolAlert(message, icon = '💡') {
        // Create custom modal with macOS styling
        const modal = document.createElement('div');
        modal.style.cssText = `
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(0, 0, 0, 0.4);
            backdrop-filter: blur(20px);
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 10000;
            animation: fadeIn 0.2s ease;
        `;
        
        const content = document.createElement('div');
        content.style.cssText = `
            background: rgba(30, 30, 30, 0.95);
            backdrop-filter: blur(40px);
            border-radius: 12px;
            padding: 24px 32px;
            max-width: 480px;
            max-height: 70vh;
            overflow-y: auto;
            color: #ffffff;
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Helvetica Neue', Arial, sans-serif;
            text-align: left;
            box-shadow: 0 12px 40px rgba(0, 0, 0, 0.6), 0 0 0 0.5px rgba(255, 255, 255, 0.1);
            transform: scale(0.95);
            animation: popIn 0.2s ease forwards;
            position: relative;
            border: 1px solid rgba(255, 255, 255, 0.08);
        `;
        
        content.innerHTML = `
            <div style="text-align: center; margin-bottom: 20px;">
                <div style="font-size: 48px; margin-bottom: 8px;">${icon}</div>
            </div>
            <div style="
                font-family: 'SF Mono', Monaco, 'Cascadia Code', 'Roboto Mono', Consolas, monospace;
                white-space: pre-wrap;
                line-height: 1.4;
                margin: 0;
                font-size: 13px;
                color: #e5e5e7;
                background: rgba(0, 0, 0, 0.2);
                padding: 16px;
                border-radius: 8px;
                border: 1px solid rgba(255, 255, 255, 0.05);
            ">${message}</div>
            <div style="text-align: center; margin-top: 24px;">
                <button onclick="this.closest('.modal').remove()" style="
                    background: rgba(0, 122, 255, 0.8);
                    border: none;
                    color: white;
                    padding: 8px 20px;
                    border-radius: 6px;
                    cursor: pointer;
                    font-size: 13px;
                    font-weight: 500;
                    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
                    transition: all 0.2s ease;
                    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.3);
                " onmouseover="this.style.background='rgba(0, 122, 255, 1)'" onmouseout="this.style.background='rgba(0, 122, 255, 0.8)'">
                    OK
                </button>
            </div>
        `;
        
        modal.className = 'modal';
        modal.appendChild(content);
        document.body.appendChild(modal);
        
        // Add macOS-style CSS animations
        const style = document.createElement('style');
        style.textContent = `
            @keyframes fadeIn {
                from { opacity: 0; }
                to { opacity: 1; }
            }
            @keyframes popIn {
                from { transform: scale(0.95); opacity: 0; }
                to { transform: scale(1); opacity: 1; }
            }
        `;
        document.head.appendChild(style);
        
        // Auto-close after 15 seconds
        setTimeout(() => {
            if (modal.parentNode) {
                modal.remove();
                style.remove();
            }
        }, 15000);
    },
    
    // macOS-style confirmation dialog
    showMacConfirm(message, icon = '❓', onConfirm = null, onCancel = null) {
        const modal = document.createElement('div');
        modal.style.cssText = `
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(0, 0, 0, 0.4);
            backdrop-filter: blur(20px);
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 10000;
            animation: fadeIn 0.2s ease;
        `;
        
        const content = document.createElement('div');
        content.style.cssText = `
            background: rgba(30, 30, 30, 0.95);
            backdrop-filter: blur(40px);
            border-radius: 12px;
            padding: 24px 32px;
            max-width: 420px;
            max-height: 70vh;
            overflow-y: auto;
            color: #ffffff;
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Helvetica Neue', Arial, sans-serif;
            text-align: left;
            box-shadow: 0 12px 40px rgba(0, 0, 0, 0.6), 0 0 0 0.5px rgba(255, 255, 255, 0.1);
            transform: scale(0.95);
            animation: popIn 0.2s ease forwards;
            position: relative;
            border: 1px solid rgba(255, 255, 255, 0.08);
        `;
        
        const cancelBtn = document.createElement('button');
        cancelBtn.innerHTML = 'Cancel';
        cancelBtn.style.cssText = `
            background: rgba(108, 108, 112, 0.8);
            border: none;
            color: white;
            padding: 8px 20px;
            border-radius: 6px;
            cursor: pointer;
            font-size: 13px;
            font-weight: 500;
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
            transition: all 0.2s ease;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.3);
            margin-right: 12px;
        `;
        
        const confirmBtn = document.createElement('button');
        confirmBtn.innerHTML = 'OK';
        confirmBtn.style.cssText = `
            background: rgba(0, 122, 255, 0.8);
            border: none;
            color: white;
            padding: 8px 20px;
            border-radius: 6px;
            cursor: pointer;
            font-size: 13px;
            font-weight: 500;
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
            transition: all 0.2s ease;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.3);
        `;
        
        cancelBtn.onmouseover = () => cancelBtn.style.background = 'rgba(108, 108, 112, 1)';
        cancelBtn.onmouseout = () => cancelBtn.style.background = 'rgba(108, 108, 112, 0.8)';
        confirmBtn.onmouseover = () => confirmBtn.style.background = 'rgba(0, 122, 255, 1)';
        confirmBtn.onmouseout = () => confirmBtn.style.background = 'rgba(0, 122, 255, 0.8)';
        
        cancelBtn.onclick = () => {
            modal.remove();
            if (onCancel) onCancel();
        };
        
        confirmBtn.onclick = () => {
            modal.remove();
            if (onConfirm) onConfirm();
        };
        
        content.innerHTML = `
            <div style="text-align: center; margin-bottom: 20px;">
                <div style="font-size: 48px; margin-bottom: 8px;">${icon}</div>
            </div>
            <div style="
                font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Helvetica Neue', Arial, sans-serif;
                white-space: pre-wrap;
                line-height: 1.4;
                margin: 0;
                font-size: 13px;
                color: #e5e5e7;
                background: rgba(0, 0, 0, 0.2);
                padding: 16px;
                border-radius: 8px;
                border: 1px solid rgba(255, 255, 255, 0.05);
            ">${message}</div>
            <div style="text-align: center; margin-top: 24px;" class="button-container">
            </div>
        `;
        
        content.querySelector('.button-container').appendChild(cancelBtn);
        content.querySelector('.button-container').appendChild(confirmBtn);
        
        modal.className = 'modal';
        modal.appendChild(content);
        document.body.appendChild(modal);
        
        // Add macOS-style CSS animations
        const style = document.createElement('style');
        style.textContent = `
            @keyframes fadeIn {
                from { opacity: 0; }
                to { opacity: 1; }
            }
            @keyframes popIn {
                from { transform: scale(0.95); opacity: 0; }
                to { transform: scale(1); opacity: 1; }
            }
        `;
        document.head.appendChild(style);
        
        return modal;
    },
    
    // Fun WiFi connection function
    connectToWifi(networkName) {
        if (networkName === 'KevinPlumlee_5G') {
            this.showCoolAlert('Already connected to the fastest network in Columbia, MD! 🚀\n\nThis premium network features:\n• Unlimited healthcare marketing bandwidth\n• Coffee-grade connection stability\n• Built-in inspiration boost\n• Zero lag on brilliant ideas', '📶');
        } else if (networkName === 'FBI Surveillance Van') {
            this.showCoolAlert('Connection failed. 🕵️\n\nError Code: EMBARRASSING_BROWSER_HISTORY\n\nYour search history includes:\n• "How to make healthcare marketing fun"\n• "Is too much coffee bad for you" (47 searches)\n• "Kevin Plumlee awesome" (daily searches)\n\nAccess denied for your own protection. 😄', '🚫');
        } else if (networkName === '404_Network_Unavailable') {
            this.showCoolAlert('Error 404: Humor Not Found 😄\n\nWe searched everywhere for this network:\n• Under the couch cushions\n• In Kevin\'s coffee mug\n• Between lines of code\n• Inside healthcare marketing strategies\n\nPlease try again with more coffee. ☕', '🔍');
        } else if (networkName === 'Pretty_Fly_For_A_WiFi') {
            this.showCoolAlert('🎵 Connection Status: Pretty Fly 🎵\n\n"Give it to me baby, uh-huh, uh-huh!"\n\nThis network is too cool for you right now.\n\nRequired credentials:\n• Must know all lyrics to The Offspring\n• Minimum 90s nostalgia level\n• Certificate in being awesome\n\nConnection denied. 🎸', '🎵');
        } else if (networkName === 'Loading...') {
            this.showCoolAlert('Still loading... please wait... 💫\n\nProgress: ████████░░ 80%\n\nEstimated time remaining: ∞ minutes\n\nThis network is powered by the same servers that handle Kevin\'s limitless creativity. Please stand by while we process your healthcare marketing potential...', '⏳');
        } else {
            this.showCoolAlert(`Connecting to "${networkName}"... 😉\n\nJust kidding! This is Kevin\'s portfolio, not your network settings.\n\nBut if it were real, this network would probably have:\n• Blazing fast healthcare marketing speeds\n• Built-in coffee delivery service\n• Automatic LinkedIn post optimization\n• 24/7 Kevin consultation hotline`, '📡');
        }
    },
    
    // Toggle battery saver mode
    toggleBatterySaver() {
        const button = event.target;
        if (button.textContent === 'Enable Procrastination Mode') {
            button.textContent = 'Disable Procrastination Mode';
            this.showCoolAlert('Procrastination Mode Enabled! ⏰\n\nAll productivity has been suspended:\n• Marketing deadlines: Snoozed\n• Coffee breaks: Extended indefinitely\n• Creative thinking: Set to "maybe later"\n• To-do lists: Archived\n\nEnjoy your guilt-free downtime! 😴', '🦥');
        } else {
            button.textContent = 'Enable Procrastination Mode';
            this.showCoolAlert('Back to work! ⚡\n\nProcrastination Mode disabled:\n• Your battery is now 23% more motivated\n• Productivity circuits: Reactivated\n• Coffee dependency: Acknowledged\n• Healthcare marketing genius: Unleashed\n\nTime to make some digital magic happen! 💪', '🔋');
        }
    },
    
    // Handle Apple menu actions
    appleMenuAction(action) {
        this.closeAllDropdowns();
        
        // Array of funny responses for more variety
        const responses = {
            about: [
                'About This Kevin™\n\nModel: Kevin Plumlee (VP Performance Marketing Edition)\nProcessor: Healthcare Marketing Expertise 3.0 GHz\nMemory: 15+ Years of Experience RAM\nStorage: Unlimited Creative Ideas SSD\nOperating System: KevinOS v2024 "Columbia MD"\nGraphics: Pure CSS Magic with Healthcare Focus\n\nSerial Number: UNLOCK-HEALTH-VP001\nWarranty: Lifetime of Excellence 🚀\n\n*Coffee-powered since 2008*',
                'About This Kevin™ - PREMIUM EDITION\n\nProcessor: Healthcare Marketing Genius M1 Pro\nMemory: Infinite Healthcare Knowledge\nStorage: 15+ Years of Epic Wins\nBattery: Powered by Dark Roast Coffee ☕\nDisplay: Visionary Healthcare Strategist\nWiFi: Always Connected to Innovation\n\nSpecial Features:\n• Built-in SEO Optimizer\n• Patient Acquisition Accelerator\n• HIPAA Compliance Detector\n• Conversion Rate Maximizer 📊',
                'Kevin™ System Information\n\n🧠 Brain: Healthcare Marketing Supercomputer\n☕ Fuel: Premium Colombian Coffee Beans\n🎯 Focus: Healthcare Digital Domination\n💡 Creativity: Infinite Loop Algorithm\n🚀 Speed: Faster than competitor analysis\n📈 Results: Always trending upward\n\nLast Updated: Every sip of coffee\nNext Reboot: Never (runs 24/7)'
            ],
            'kevin-preferences': [
                'Kevin Preferences™ - ULTIMATE SETTINGS\n\n☕ Coffee Requirement: MAXIMUM (Non-negotiable)\n🎯 Marketing Focus: Healthcare Excellence Only\n📍 Base Station: Columbia, MD Command Center\n⚡ Energy Level: Over 9000!\n🧠 Creativity Mode: BEAST MODE ACTIVATED\n💡 Innovation Setting: Revolutionary\n🎪 Fun Level: Dad Jokes Enabled\n📊 Analytics Obsession: CRITICAL\n\n*Warning: Reducing coffee intake may cause system malfunction*',
                'Kevin™ Advanced Configuration\n\n🏥 Healthcare Radar: Always Scanning\n📱 LinkedIn Networking: Aggressive Mode\n🎨 Design Standards: Pixel Perfect\n📈 ROI Expectations: Astronomical\n🚀 Project Velocity: Ludicrous Speed\n☕ Coffee Buffer: Never Empty\n💪 Motivation Level: Unstoppable Force\n\n[Save Settings] [Cancel] [Add More Coffee]',
                'System Preferences - Kevin Edition\n\n🔧 Default Browser: Healthcare Marketing Opportunities\n🎵 Startup Sound: "Cha-ching" (conversion sound)\n🖱️ Click Speed: Faster than market changes\n⌨️ Typing Speed: 120 WPM (Words Per Marketing-idea)\n📊 Dashboard: Always show ROI metrics\n🎯 Target Audience: Healthcare Heroes\n\n*Some settings require admin privileges (ask my wife)*'
            ],
            'healthcare-store': [
                'Welcome to the Kevin Plumlee Healthcare Store! 🏥✨\n\n🎯 SEO Wizardry Package - $PRICELESS\n📊 Performance Marketing Magic - $GUARANTEED-RESULTS\n💊 Healthcare Expertise Capsules - $DOCTOR-APPROVED\n🚀 Digital Transformation Rocket - $TO-THE-MOON\n☕ Coffee-Powered Solutions - $ENERGIZING\n🧠 Strategy Consulting Brain - $MIND-BLOWING\n📈 ROI Multiplication Formula - $LEGENDARY\n\n*All solutions come with a 15+ year warranty and unlimited coffee refills*\n\n[Add to Cart] [Bulk Discount Available] [Talk to Kevin]',
                '🛒 Healthcare Marketing Marketplace\n\nFEATURED ITEMS:\n🏆 "The Kevin Special" - Complete digital makeover\n🎪 Conversion Rate Circus - Where boring becomes AMAZING\n🔮 SEO Crystal Ball - See the future of search\n💎 Premium Lead Generation Gems - Rare quality\n🎭 Brand Personality Makeover - From bland to GRAND\n\n💳 Payment Options: Results, References, or Referrals\n🚚 Shipping: Faster than your competition\n📞 Customer Service: Kevin personally answers!',
                'Kevin\'s Healthcare Marketing Emporium 🎪\n\n🌟 TODAY\'S SPECIALS:\n- Buy 1 Website, Get Infinite Updates FREE\n- SEO Package includes complimentary mind-reading\n- Social Media Management with built-in humor\n- Analytics Dashboard that actually makes sense\n\n🎁 BONUS: Every purchase includes a personal Kevin pep talk!\n\n"If it doesn\'t convert, it\'s not from Kevin\'s store!"'
            ],
            recent: [
                'Recent Coffee Breaks ☕ - PREMIUM LOG\n\n• Double Espresso Strategy Session (2 mins ago) 💡\n• Healthcare Trend Analysis Latte (47 mins ago) 📈\n• LinkedIn Networking Cappuccino (1 hour ago) 🤝\n• Morning SEO Audit Americano (2 hours ago) 🔍\n• Unlock Health Team Sync Macchiato (Yesterday) 🏥\n• Client Victory Celebration Mocha (Yesterday) 🎉\n• Weekend Family Coffee + Idea Brainstorm (Sunday) ☀️\n\n*Each coffee break generates minimum 3 breakthrough ideas*\n\n[Export to Calendar] [Schedule Next Break]',
                'Kevin\'s Coffee-Powered Achievement Log ☕\n\n🏆 RECENT VICTORIES:\n• Crushed Q4 goals while sipping Colombian blend\n• Generated 847 leads during morning coffee ritual\n• Had brilliant healthcare campaign idea in line at Starbucks\n• Solved client\'s conversion problem between coffee sips\n• Networked with 12 healthcare executives over lattes\n\n☕ Coffee-to-Success Ratio: 1:∞\n📊 Productivity Correlation: +9000% with caffeine',
                'Coffee Break Analytics Dashboard ☕📊\n\nTODAY\'S STATS:\n• Cups Consumed: 6 (and counting)\n• Ideas Generated: 23 breakthrough concepts\n• Problems Solved: 8 major, 15 minor\n• Healthcare Connections Made: 4 new prospects\n• "Aha!" Moments: 12 (personal record)\n\nCURRENT STATUS: Caffeinated Genius Mode ACTIVE ⚡\n\n[Refill Coffee] [Share Success Story] [Schedule Power Nap]'
            ],
            'force-quit': [
                'Force Quit Procrastination 💪 - SYSTEM CLEANER\n\nTerminating processes...\n• Social media scrolling... ❌ ELIMINATED\n• Email perfectionism... ❌ DESTROYED\n• Analysis paralysis... ❌ OBLITERATED\n• Imposter syndrome... ❌ BANISHED FOREVER\n• Netflix temptation... ❌ BLOCKED\n• Perfectionist tendencies... ❌ OPTIMIZED\n\n✅ PRODUCTIVITY BEAST MODE: ACTIVATED! 🚀\n✅ Healthcare marketing domination: INITIATED!\n✅ Coffee addiction: Still running (by design)\n\nKevin is now operating at MAXIMUM EFFICIENCY! 💻⚡',
                'KEVIN.EXE - Task Manager 💻\n\nFORCE QUITTING:\n❌ "Maybe later" syndrome - TERMINATED\n❌ Overthinking simple tasks - KILLED\n❌ Comparison with others - DELETED\n❌ Fear of failure - UNINSTALLED\n❌ Boring marketing ideas - PURGED\n\n✅ LAUNCHING NEW PROCESSES:\n🚀 Unstoppable creativity - RUNNING\n💡 Breakthrough thinking - ACTIVE\n🎯 Laser focus - ENGAGED\n☕ Coffee optimization - PRIORITY 1\n\nSystem Status: LEGENDARY MODE ENABLED! 🏆',
                '🔧 Kevin System Maintenance Complete!\n\nCLEANED UP:\n• 847 MB of self-doubt\n• 12 GB of overthinking files\n• 99 unnecessary worry processes\n• Entire "what if" directory\n\nINSTALLED UPDATES:\n• Confidence.exe v10.5\n• Innovation.dll (latest)\n• Healthcare-Genius.sys\n• Unlimited-Energy.bat\n\nRESTART COMPLETE: Welcome to Kevin 2.0! 🚀\n*Now with 300% more awesome*'
            ]
        };
        
        switch(action) {
            case 'about':
                if (window.PortfolioApp && typeof window.PortfolioApp.openApplication === 'function') {
                    window.PortfolioApp.openApplication('about');
                } else {
                    const randomResponse = responses.about[Math.floor(Math.random() * responses.about.length)];
                    this.showCoolAlert(randomResponse, '🖥️');
                }
                break;
                
            case 'kevin-preferences':
                const prefResponse = responses['kevin-preferences'][Math.floor(Math.random() * responses['kevin-preferences'].length)];
                this.showCoolAlert(prefResponse, '⚙️');
                break;
                
            case 'healthcare-store':
                const storeResponse = responses['healthcare-store'][Math.floor(Math.random() * responses['healthcare-store'].length)];
                this.showCoolAlert(storeResponse, '🏪');
                break;
                
            case 'recent':
                const recentResponse = responses.recent[Math.floor(Math.random() * responses.recent.length)];
                this.showCoolAlert(recentResponse, '☕');
                break;
                
            case 'force-quit':
                const forceResponse = responses['force-quit'][Math.floor(Math.random() * responses['force-quit'].length)];
                this.showCoolAlert(forceResponse, '💪');
                this.addScreenEffect('force-quit');
                break;
                
            case 'sleep':
                this.powerNapMode();
                break;
                
            case 'restart':
                this.restartCreativeGenius();
                break;
                
            case 'shutdown':
                this.logOffWorkDay();
                break;
                
            case 'logout':
                this.logoutKevin();
                break;
        }
    },
    
    // Enhanced power nap mode
    powerNapMode() {
        const messages = [
            'Initiating Power Nap Protocol 😴\n\nEven healthcare marketing superheroes need rest...\n\nDimming screen for optimal nap conditions...',
            'Entering Sleep Mode 🌙\n\nKevin.exe is taking a well-deserved break...\n\nDreaming of conversion rates and patient acquisition...',
            'Power Nap Commencing 💤\n\nRecharging creative batteries...\nProcessing today\'s healthcare marketing wins...\nPreparing for next burst of genius...'
        ];
        
        const message = messages[Math.floor(Math.random() * messages.length)];
        this.showCoolAlert(message, '😴');
        
        document.body.style.filter = 'brightness(0.2) blur(2px)';
        document.body.style.transition = 'filter 2s ease';
        
        setTimeout(() => {
            document.body.style.filter = '';
            const wakeUpMessages = [
                'Power Nap Complete! 🌟\n\nKevin.exe has been refreshed:\n• Creativity: +500% boost ⚡\n• Energy: Fully recharged 🔋\n• Marketing ideas: Overflowing 💡\n• Coffee requirement: URGENT ☕\n• Healthcare domination: Ready! 🚀\n\nLet\'s revolutionize some patient experiences!',
                'WAKE UP SUCCESSFUL! ☀️\n\nSystem Reboot Complete:\n✅ Brain defragmented\n✅ Inspiration cache cleared\n✅ Creative processes optimized\n✅ Healthcare radar recalibrated\n✅ Coffee dependency acknowledged\n\nStatus: SUPERHUMAN MODE ACTIVATED! 💪',
                'Rise and Shine, Marketing Genius! 🌅\n\nNap Analytics:\n• REM cycles: 3 perfect rounds\n• Dreams about ROI: 7 epic visions\n• Subconscious problem-solving: 12 breakthroughs\n• Energy restoration: 1000% complete\n\nReady to make healthcare marketing magic! ✨'
            ];
            const wakeMessage = wakeUpMessages[Math.floor(Math.random() * wakeUpMessages.length)];
            this.showCoolAlert(wakeMessage, '⚡');
        }, 4000);
    },
    
    // Enhanced restart function
    restartCreativeGenius() {
        const confirmMessages = [
            'Are you sure you want to restart Kevin\'s Creative Genius? 🧠\n\n⚠️ WARNING: This will temporarily pause all innovative healthcare marketing ideas and might cause withdrawal symptoms in nearby colleagues.',
            'Restart Creative Engine? 🚀\n\n⚠️ CAUTION: During restart, the healthcare marketing universe may experience a brief moment of decreased awesome. Proceed?',
            'Reboot Kevin\'s Brain? 🔄\n\n⚠️ ALERT: All currently running brilliant ideas will be saved to cloud. New ideas may be 47% more amazing after restart.'
        ];
        
        const confirmMessage = confirmMessages[Math.floor(Math.random() * confirmMessages.length)];
        
        this.showMacConfirm(confirmMessage, '🔄', () => {
            const restartMessages = [
                'Restarting Creative Genius... 🔄\n\n🧠 Backing up 15+ years of healthcare marketing wisdom...\n☕ Flushing coffee buffer...\n💡 Defragmenting idea database...\n🎯 Recalibrating target audience sensors...\n🚀 Loading next-level awesome protocols...',
                'Kevin.exe Restart Initiated 💻\n\n⚡ Shutting down current processes...\n🔄 Running creativity diagnostics...\n📊 Optimizing ROI calculation algorithms...\n🏥 Refreshing healthcare knowledge base...\n☕ Preheating coffee dependency systems...',
                'SYSTEM REBOOT IN PROGRESS... 🔧\n\n🧠 Neural networks: Rebooting...\n💡 Inspiration engine: Restarting...\n🎨 Design cortex: Refreshing...\n📈 Analytics brain: Recalibrating...\n☕ Coffee interface: Always online...'
            ];
            
            const restartMessage = restartMessages[Math.floor(Math.random() * restartMessages.length)];
            this.showCoolAlert(restartMessage, '🔄');
            
            setTimeout(() => {
                location.reload();
            }, 3000);
        });
    },
    
    // Enhanced shutdown function  
    logOffWorkDay() {
        const shutdownMessages = [
            'Are you sure you want to Log Off Work Day? 🏠\n\n⚠️ WARNING: Kevin\'s marketing genius will temporarily go offline, which may cause a noticeable decrease in healthcare marketing excellence across the internet.',
            'End Work Session? 🌅\n\n⚠️ NOTICE: Logging off will pause all healthcare marketing domination activities. The competition might catch up by 0.001%.',
            'Shut Down Kevin OS? 💤\n\n⚠️ ALERT: Work day termination will activate rest mode. Kevin\'s brain will continue processing healthcare strategies in the background.'
        ];
        
        const shutdownMessage = shutdownMessages[Math.floor(Math.random() * shutdownMessages.length)];
        
        this.showMacConfirm(shutdownMessage, '🌅', () => {
            const messages = [
                'Logging off work day... 🌅\n\n💾 Saving all brilliant ideas to secure cloud...\n📅 Scheduling tomorrow\'s healthcare marketing domination...\n☕ Setting coffee alarm for 6:00 AM...\n🏆 Backing up today\'s victories...\n\nThanks for visiting Kevin\'s digital workspace! 👋',
                'Work Day Shutdown Sequence... 💻\n\n✅ Daily goals: CRUSHED\n✅ Client expectations: EXCEEDED\n✅ Healthcare marketing: REVOLUTIONIZED\n✅ Coffee quota: ACHIEVED\n✅ Tomorrow\'s plan: READY\n\nKevin OS will resume excellence in 16 hours! ⏰',
                'End of Day Protocol Active... 🌆\n\n📊 Today\'s Stats:\n• Problems solved: 23\n• Minds blown: 47\n• Conversions improved: ∞%\n• Coffee consumed: Optimal\n• Fun level: Maximum\n\nSee you tomorrow for more marketing magic! ✨'
            ];
            
            const message = messages[Math.floor(Math.random() * messages.length)];
            this.showCoolAlert(message, '🌅');
            
            setTimeout(() => {
                document.body.innerHTML = `
                    <div style="display:flex;align-items:center;justify-content:center;height:100vh;background:linear-gradient(135deg, #667eea 0%, #764ba2 100%);color:#fff;font-family:system-ui;text-align:center;">
                        <div>
                            <div style="font-size: 80px; margin-bottom: 30px;">🌟</div>
                            <h1 style="font-size:3em;margin-bottom:20px;">Work Day Complete!</h1>
                            <p style="font-size:1.2em;margin-bottom:30px;">Kevin Plumlee has logged off for the day</p>
                            <p style="opacity:0.8;">Healthcare marketing excellence will resume tomorrow ☕</p>
                            <p style="margin-top:30px;opacity:0.6;">Thanks for exploring the digital workspace!</p>
                            <div style="margin-top: 40px;">
                                <button onclick="location.reload()" style="background:rgba(255,255,255,0.2);border:2px solid rgba(255,255,255,0.3);color:white;padding:15px 30px;border-radius:10px;cursor:pointer;font-size:16px;">
                                    Restart Kevin 🚀
                                </button>
                            </div>
                        </div>
                    </div>
                `;
            }, 2000);
        });
    },
    
    // Enhanced logout function
    logoutKevin() {
        const logoutMessages = [
            'Are you sure you want to log out Kevin Plumlee? 👋\n\n⚠️ NOTICE: This will end your healthcare marketing session and may cause severe FOMO (Fear of Missing Out on awesome marketing insights).',
            'Log Out Kevin OS? 📱\n\n⚠️ WARNING: Ending session will disconnect you from the Kevin Plumlee experience. Side effects may include: missing his expertise, wanting to hire him immediately.',
            'Terminate Kevin Connection? 🔌\n\n⚠️ ALERT: Logging out will stop the flow of healthcare marketing wisdom. Your conversion rates may experience temporary sadness.'
        ];
        
        const logoutMessage = logoutMessages[Math.floor(Math.random() * logoutMessages.length)];
        
        this.showMacConfirm(logoutMessage, '👋', () => {
            const messages = [
                'Logging out Kevin Plumlee... 📱\n\nSession Summary:\n• Healthcare marketing excellence: ✅ DELIVERED\n• Creative ideas shared: ∞ COUNTLESS\n• Professional connections: 🤝 AVAILABLE 24/7\n• Coffee consumed: ☕ OPTIMAL AMOUNT\n• Mind-blowing moments: 🤯 TOO MANY TO COUNT\n\nCome back anytime for more marketing genius!',
                'Kevin OS Logout Successful! 👋\n\n📊 Your Visit Stats:\n• Inspiration gained: MAXIMUM LEVEL\n• Healthcare insights: OVERFLOWING\n• Fun moments: LEGENDARY\n• Professional envy: UNDERSTANDABLE\n• Desire to work with Kevin: INEVITABLE\n\nThanks for experiencing the Kevin difference! 🚀',
                'Session Terminated Successfully! ⚡\n\n🎯 Mission Accomplished:\n• Portfolio viewed: ✅\n• Kevin\'s awesomeness: CONFIRMED\n• Healthcare marketing potential: RECOGNIZED\n• Coffee appreciation: MUTUAL\n• Future collaboration: HIGHLY PROBABLE\n\nKevin\'s digital door is always open! 🚪'
            ];
            
            const message = messages[Math.floor(Math.random() * messages.length)];
            this.showCoolAlert(message, '👋');
            
            setTimeout(() => {
                const emails = [
                    'mailto:kevin@kevinplumlee.com?subject=Your Portfolio Blew My Mind! 🤯 - Let\'s Connect!&body=Hi Kevin,%0A%0AI just explored your incredible portfolio website and I\'m seriously impressed! Your healthcare marketing expertise is exactly what we need. The apple menu was hilarious by the way! 😄%0A%0ALet\'s chat about:%0A• Healthcare marketing opportunities%0A• Digital transformation projects%0A• SEO and conversion optimization%0A• Or just coffee and marketing strategy%0A%0ABest regards,',
                    'mailto:kevin@kevinplumlee.com?subject=That Apple Menu Though! 😂 - Hire This Man!&body=Kevin,%0A%0AYour portfolio site is AMAZING! I spent way too much time clicking that apple menu and laughing at your responses. But seriously, your healthcare marketing background is impressive.%0A%0AWe should definitely talk about working together. Anyone who can make system preferences funny can definitely make our marketing better!%0A%0ACall me! ☕',
                    'mailto:kevin@kevinplumlee.com?subject=Kevin OS > Apple OS 🚀 - Let\'s Talk Business&body=Hi Kevin,%0A%0AJust wanted to say your portfolio site is brilliant! The personalized apple menu responses had me cracking up, and your healthcare marketing expertise is exactly what our organization needs.%0A%0ALet\'s schedule a coffee break (I see you\'re properly caffeinated) to discuss potential collaboration.%0A%0ACheers!'
                ];
                
                const randomEmail = emails[Math.floor(Math.random() * emails.length)];
                window.location.href = randomEmail;
            }, 2000);
        });
    },
    
    // Update time display
    updateTime() {
        const timeElement = Utils.dom.get('current-time');
        if (timeElement) {
            timeElement.textContent = Utils.time.formatTime();
        }
        
        // Update detailed time if dropdown is open
        if (this.activeDropdown === 'time') {
            this.updateDetailedTime();
        }
    },
    
    // Start clock updates
    startClock() {
        setInterval(() => {
            this.updateTime();
        }, 1000);
    },
    
    // Manual test function to force show Apple dropdown
    forceShowAppleDropdown() {
        console.log('🧪 MANUAL TEST: Forcing Apple dropdown to show...');
        
        // First, ensure dropdown exists
        let appleDropdown = document.getElementById('apple-dropdown');
        if (!appleDropdown) {
            console.log('Creating Apple dropdown...');
            this.createDropdowns();
            appleDropdown = document.getElementById('apple-dropdown');
        }
        
        if (appleDropdown) {
            console.log('Found Apple dropdown, forcing it to show...');
            
            // Force all styles to make it visible
            appleDropdown.style.display = 'block';
            appleDropdown.style.visibility = 'visible';
            appleDropdown.style.opacity = '1';
            appleDropdown.style.position = 'absolute';
            appleDropdown.style.top = '24px';
            appleDropdown.style.left = '0px';
            appleDropdown.style.zIndex = '9999';
            appleDropdown.style.background = 'rgba(30, 30, 30, 0.95)';
            appleDropdown.style.borderRadius = '8px';
            appleDropdown.style.minWidth = '240px';
            appleDropdown.style.boxShadow = '0 8px 24px rgba(0, 0, 0, 0.4)';
            appleDropdown.style.border = '1px solid rgba(255, 255, 255, 0.15)';
            
            console.log('✅ Apple dropdown forced to show with inline styles');
            console.log('📋 Dropdown HTML content:', appleDropdown.innerHTML);
            
            return true;
        } else {
            console.error('❌ Could not create Apple dropdown');
            return false;
        }
    },
    
    // Add special visual effects
    addScreenEffect(type) {
        const effect = document.createElement('div');
        effect.style.cssText = `
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            pointer-events: none;
            z-index: 9999;
        `;
        
        if (type === 'force-quit') {
            effect.style.background = 'linear-gradient(45deg, #ff0000, #00ff00, #0000ff, #ffff00)';
            effect.style.opacity = '0.1';
            effect.style.animation = 'rainbow 2s ease-in-out';
            
            const style = document.createElement('style');
            style.textContent = `
                @keyframes rainbow {
                    0%, 100% { opacity: 0; }
                    50% { opacity: 0.3; }
                }
            `;
            document.head.appendChild(style);
            
            setTimeout(() => {
                effect.remove();
                style.remove();
            }, 2000);
        }
        
        document.body.appendChild(effect);
    }
};

// Global access
window.MenuBarManager = MenuBarManager;

// Add global test functions for easy debugging
window.testAppleMenu = () => {
    console.log('🧪 Testing Apple menu from global function...');
    if (window.MenuBarManager) {
        return MenuBarManager.forceShowAppleDropdown();
    } else {
        console.error('MenuBarManager not available');
        return false;
    }
};

window.clickAppleMenu = () => {
            console.log('🧪 Simulating Plum menu click...');
            const appleElement = document.querySelector('.plum-icon.menu-icon');
    if (appleElement) {
        appleElement.click();
        return true;
    } else {
        console.error('Plum icon not found');
        return false;
    }
};

window.debugMenuBar = () => {
    console.log('🔍 Menu Bar Debug Info:');
    console.log('- MenuBarManager:', window.MenuBarManager);
            console.log('- Plum icon:', document.querySelector('.plum-icon.menu-icon'));
    console.log('- Apple dropdown:', document.getElementById('apple-dropdown'));
    console.log('- All dropdowns:', document.querySelectorAll('.menu-dropdown'));
    console.log('- Active dropdown:', window.MenuBarManager?.activeDropdown);
}; // Content Loader Module
const ContentLoader = {
    cache: new Map(),
    
    // Embedded content to avoid CORS issues with local files
    embeddedContent: {
        about: `<div class="about-content">
    <!-- Header section with profile picture on left and name/title on right -->
    <div class="about-header">
        <div class="header-profile-image">
            <img src="../images/profilepicture/Kevin_Plumlee.webp" alt="Kevin Plumlee - VP Performance Marketing at Unlock Health" />
        </div>
        <div class="header-info">
            <h2>Kevin Plumlee</h2>
            <p class="title">VP Performance Marketing at Unlock Health</p>
            <p class="subtitle">Digital Marketing Strategist | Healthcare Innovation Leader</p>
        </div>
    </div>

    <!-- Main bio and value proposition -->
    <div class="profile-bio-section">
        <p class="bio">Transform your healthcare organization with over 15 years of cutting-edge digital marketing, SEO mastery, and full-stack web development expertise. As VP of Performance Marketing at Unlock Health and co-founder of Dreamscape Marketing, I lead our team in architecting data-driven digital ecosystems that revolutionize patient acquisition, enhance online visibility, and deliver exceptional ROI.</p>
        
        <div class="career-highlight">
            <p><strong>From scaling startups to 80+ person agencies to becoming the largest behavioral health marketing firm in the U.S.</strong>, I now bring this expertise to Unlock Health, where I blend technical prowess with strategic vision to create digital solutions that connect people to life-changing care.</p>
        </div>
        
        <div class="value-proposition">
            <div class="value-item">
                <i class="fas fa-rocket"></i>
                <div class="value-content">
                    <span class="value-title">Growth Catalyst</span>
                    <span class="value-desc">Scaled companies from 2 to 80+ employees through strategic digital transformation</span>
                </div>
            </div>
            <div class="value-item">
                <i class="fas fa-chart-line"></i>
                <div class="value-content">
                    <span class="value-title">ROI Focused</span>
                    <span class="value-desc">Consistently deliver measurable results exceeding industry benchmarks</span>
                </div>
            </div>
            <div class="value-item">
                <i class="fas fa-shield-alt"></i>
                <div class="value-content">
                    <span class="value-title">Healthcare Compliant</span>
                    <span class="value-desc">HIPAA-compliant solutions with deep regulatory understanding</span>
                </div>
            </div>
        </div>
        
        <div class="unlock-health-role">
            <h3><i class="fas fa-building"></i> My Role at Unlock Health</h3>
            <p>As VP of Performance Marketing, I lead our healthcare marketing initiatives, overseeing strategic vision and management of SEO, content creation, and web development for healthcare clients nationwide. I work directly with our team to design and implement comprehensive strategies that enhance organic search rankings, drive patient acquisition, and deliver measurable ROI through integrated solutions spanning managed care, marketing, and technology.</p>
        </div>
    </div>

    <div class="expertise-overview">
        <h3>Digital Marketing Excellence at Unlock Health</h3>
        <p class="section-intro">Leading comprehensive digital marketing strategies that drive patient acquisition and organizational growth through integrated, multi-channel approaches.</p>
        
        <div class="marketing-methodology">
            <div class="methodology-card">
                <i class="fas fa-bullhorn"></i>
                <h4>Strategic Digital Marketing</h4>
                <div class="methodology-details">
                    <div class="detail-section">
                        <h5>Campaign Orchestration & Strategy</h5>
                        <ul>
                            <li>Multi-channel campaign orchestration</li>
                            <li>Patient journey mapping & optimization</li>
                            <li>Conversion funnel development</li>
                            <li>Marketing automation & CRM integration</li>
                            <li>Attribution modeling & performance tracking</li>
                            <li>Budget optimization & spend efficiency</li>
                        </ul>
                    </div>
                </div>
            </div>
            
            <div class="methodology-card">
                <i class="fas fa-users"></i>
                <h4>Audience Development</h4>
                <div class="methodology-details">
                    <div class="detail-section">
                        <h5>Healthcare Persona & Segmentation</h5>
                        <ul>
                            <li>Healthcare persona development</li>
                            <li>Behavioral segmentation strategies</li>
                            <li>Demographic & psychographic analysis</li>
                            <li>Patient lifecycle optimization</li>
                            <li>Referral source optimization</li>
                            <li>Community engagement strategies</li>
                        </ul>
                    </div>
                </div>
            </div>
            
            <div class="methodology-card">
                <i class="fas fa-ads"></i>
                <h4>Paid Media Mastery</h4>
                <div class="methodology-details">
                    <div class="detail-section">
                        <h5>Healthcare-Compliant Advertising</h5>
                        <ul>
                            <li>Google Ads campaign management</li>
                            <li>Facebook & social media advertising</li>
                            <li>Healthcare-compliant ad creation</li>
                            <li>Landing page optimization</li>
                            <li>A/B testing & creative optimization</li>
                            <li>Cross-platform campaign coordination</li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="seo-expertise">
        <h3>Advanced SEO & Technical Optimization</h3>
        <p class="section-intro">Leading comprehensive search engine optimization strategies that dominate healthcare search results and drive organic patient acquisition.</p>
        
        <div class="seo-methodology">
            <div class="methodology-card">
                <i class="fas fa-search"></i>
                <h4>Technical SEO Mastery</h4>
                <div class="methodology-details">
                    <div class="detail-section">
                        <h5>Site Architecture & Performance</h5>
                        <ul>
                            <li>Core Web Vitals optimization (LCP, CLS, FID)</li>
                            <li>Mobile-first indexing strategies</li>
                            <li>Page speed optimization & caching</li>
                            <li>Structured data implementation (Schema.org)</li>
                            <li>XML sitemap optimization</li>
                            <li>Robot.txt configuration</li>
                        </ul>
                    </div>
                    
                    <div class="detail-section">
                        <h5>Healthcare SEO Specialization</h5>
                        <ul>
                            <li>Medical entity optimization</li>
                            <li>Local SEO for healthcare practices</li>
                            <li>YMYL (Your Money Your Life) content strategy</li>
                            <li>E-A-T (Expertise, Authority, Trust) building</li>
                            <li>Medical review content processes</li>
                            <li>Healthcare compliance in content</li>
                        </ul>
                    </div>
                </div>
            </div>
            
            <div class="methodology-card">
                <i class="fas fa-keywords"></i>
                <h4>Keyword Research & Strategy</h4>
                <div class="methodology-details">
                    <div class="detail-section">
                        <h5>Advanced Research Techniques</h5>
                        <ul>
                            <li>Healthcare-specific keyword analysis</li>
                            <li>Competitor gap analysis</li>
                            <li>Semantic keyword clustering</li>
                            <li>Intent-based keyword mapping</li>
                            <li>Long-tail opportunity identification</li>
                            <li>Local search optimization</li>
                        </ul>
                    </div>
                    
                    <div class="detail-section">
                        <h5>Content Strategy Integration</h5>
                        <ul>
                            <li>Topic cluster development</li>
                            <li>Pillar page architecture</li>
                            <li>Content calendar optimization</li>
                            <li>Featured snippet targeting</li>
                            <li>FAQ optimization strategies</li>
                            <li>Voice search optimization</li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="seo-technology-stack">
        <div class="section-header">
            <div class="section-icon">
                <i class="fas fa-chart-line"></i>
            </div>
            <div class="section-content">
                <h3>Advanced SEO & Analytics Platform</h3>
                <p class="section-intro">Deploying enterprise-grade SEO platforms and sophisticated analytics solutions to achieve superior search performance, dominate healthcare search rankings, and deliver measurable ROI for patient acquisition.</p>
            </div>
        </div>
        
        <div class="seo-areas">
            <div class="seo-area">
                <i class="fas fa-search"></i>
                <h4>Comprehensive SEO Platforms</h4>
                <div class="tech-stack">
                    <div class="tech-category">
                        <h5>Platform Tools</h5>
                        <div class="tech-tags">
                            <span class="tech-tag">SEMrush</span>
                            <span class="tech-tag">Ahrefs</span>
                            <span class="tech-tag">Moz Pro</span>
                            <span class="tech-tag">Majestic</span>
                        </div>
                    </div>
                    
                    <div class="tech-category">
                        <h5>Core Features</h5>
                        <div class="tech-tags">
                            <span class="tech-tag">Keyword Research</span>
                            <span class="tech-tag">Competitor Analysis</span>
                            <span class="tech-tag">Site Audits</span>
                            <span class="tech-tag">Rank Tracking</span>
                        </div>
                    </div>
                    
                    <div class="tech-category">
                        <h5>Advanced Analysis</h5>
                        <div class="tech-tags">
                            <span class="tech-tag">Backlink Analysis</span>
                            <span class="tech-tag">Content Explorer</span>
                            <span class="tech-tag">Local SEO</span>
                            <span class="tech-tag">Link Explorer</span>
                        </div>
                    </div>
                </div>
            </div>
            
            <div class="seo-area">
                <i class="fas fa-cogs"></i>
                <h4>Technical SEO & Analytics</h4>
                <div class="tech-stack">
                    <div class="tech-category">
                        <h5>Audit Tools</h5>
                        <div class="tech-tags">
                            <span class="tech-tag">Screaming Frog</span>
                            <span class="tech-tag">GTmetrix</span>
                            <span class="tech-tag">PageSpeed Insights</span>
                            <span class="tech-tag">Schema Markup</span>
                        </div>
                    </div>
                    
                    <div class="tech-category">
                        <h5>Performance Monitoring</h5>
                        <div class="tech-tags">
                            <span class="tech-tag">Site Audits</span>
                            <span class="tech-tag">Speed Testing</span>
                            <span class="tech-tag">Core Web Vitals</span>
                            <span class="tech-tag">Broken Links</span>
                        </div>
                    </div>
                    
                    <div class="tech-category">
                        <h5>Data Insights</h5>
                        <div class="tech-tags">
                            <span class="tech-tag">Rich Snippets</span>
                            <span class="tech-tag">Medical Entity</span>
                            <span class="tech-tag">Performance Monitoring</span>
                            <span class="tech-tag">Technical Analysis</span>
                        </div>
                    </div>
                </div>
            </div>
            
            <div class="seo-area">
                <i class="fab fa-google"></i>
                <h4>Google Marketing Platform</h4>
                <div class="tech-stack">
                    <div class="tech-category">
                        <h5>Analytics & Search</h5>
                        <div class="tech-tags">
                            <span class="tech-tag">Google Analytics 4</span>
                            <span class="tech-tag">Google Search Console</span>
                            <span class="tech-tag">Google Ads</span>
                            <span class="tech-tag">Google Tag Manager</span>
                        </div>
                    </div>
                    
                    <div class="tech-category">
                        <h5>Tracking & Events</h5>
                        <div class="tech-tags">
                            <span class="tech-tag">GA4 Migration</span>
                            <span class="tech-tag">Custom Events</span>
                            <span class="tech-tag">Event Tracking</span>
                            <span class="tech-tag">Conversion Setup</span>
                        </div>
                    </div>
                    
                    <div class="tech-category">
                        <h5>Healthcare Campaigns</h5>
                        <div class="tech-tags">
                            <span class="tech-tag">Healthcare Ads</span>
                            <span class="tech-tag">Local Campaigns</span>
                            <span class="tech-tag">Search Performance</span>
                            <span class="tech-tag">Attribution</span>
                        </div>
                    </div>
                </div>
            </div>
            
            <div class="seo-area">
                <i class="fas fa-stethoscope"></i>
                <h4>Healthcare-Specific Tools</h4>
                <div class="tech-stack">
                    <div class="tech-category">
                        <h5>Reputation Management</h5>
                        <div class="tech-tags">
                            <span class="tech-tag">BirdEye</span>
                            <span class="tech-tag">Review Management</span>
                            <span class="tech-tag">Local Listings</span>
                            <span class="tech-tag">Reputation Monitoring</span>
                        </div>
                    </div>
                    
                    <div class="tech-category">
                        <h5>Compliance & Security</h5>
                        <div class="tech-tags">
                            <span class="tech-tag">HIPAA Compliance</span>
                            <span class="tech-tag">Data Privacy</span>
                            <span class="tech-tag">Security Audits</span>
                            <span class="tech-tag">Privacy Protection</span>
                        </div>
                    </div>
                    
                    <div class="tech-category">
                        <h5>Patient Experience</h5>
                        <div class="tech-tags">
                            <span class="tech-tag">Healthcare UX</span>
                            <span class="tech-tag">Accessibility</span>
                            <span class="tech-tag">Patient Journey</span>
                            <span class="tech-tag">User Testing</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="web-development">
        <h3>Full-Stack Web Development</h3>
        <p class="section-intro">Modern, scalable, and HIPAA-compliant web solutions that enhance user experience and drive conversions.</p>
        
        <div class="development-areas">
            <div class="dev-area">
                <i class="fab fa-html5"></i>
                <h4>Frontend Development</h4>
                <div class="tech-stack">
                    <div class="tech-category">
                        <h5>Core Technologies</h5>
                        <div class="tech-tags">
                            <span class="tech-tag">HTML5</span>
                            <span class="tech-tag">CSS3</span>
                            <span class="tech-tag">JavaScript ES6+</span>
                            <span class="tech-tag">TypeScript</span>
                        </div>
                    </div>
                    
                    <div class="tech-category">
                        <h5>Frameworks & Libraries</h5>
                        <div class="tech-tags">
                            <span class="tech-tag">React</span>
                            <span class="tech-tag">Vue.js</span>
                            <span class="tech-tag">Bootstrap</span>
                            <span class="tech-tag">Tailwind CSS</span>
                        </div>
                    </div>
                    
                    <div class="tech-category">
                        <h5>Specializations</h5>
                        <div class="tech-tags">
                            <span class="tech-tag">Responsive Design</span>
                            <span class="tech-tag">Progressive Web Apps</span>
                            <span class="tech-tag">Accessibility (WCAG)</span>
                            <span class="tech-tag">Performance Optimization</span>
                        </div>
                    </div>
                </div>
            </div>
            
            <div class="dev-area">
                <i class="fas fa-server"></i>
                <h4>Backend Development</h4>
                <div class="tech-stack">
                    <div class="tech-category">
                        <h5>Server Technologies</h5>
                        <div class="tech-tags">
                            <span class="tech-tag">Node.js</span>
                            <span class="tech-tag">PHP</span>
                            <span class="tech-tag">Python</span>
                            <span class="tech-tag">Express.js</span>
                        </div>
                    </div>
                    
                    <div class="tech-category">
                        <h5>Database Management</h5>
                        <div class="tech-tags">
                            <span class="tech-tag">MySQL</span>
                            <span class="tech-tag">PostgreSQL</span>
                            <span class="tech-tag">MongoDB</span>
                            <span class="tech-tag">Redis</span>
                        </div>
                    </div>
                    
                    <div class="tech-category">
                        <h5>Integration & APIs</h5>
                        <div class="tech-tags">
                            <span class="tech-tag">RESTful APIs</span>
                            <span class="tech-tag">GraphQL</span>
                            <span class="tech-tag">CRM Integration</span>
                            <span class="tech-tag">Payment Processing</span>
                        </div>
                    </div>
                </div>
            </div>
            
            <div class="dev-area">
                <i class="fas fa-cloud"></i>
                <h4>DevOps & Deployment</h4>
                <div class="tech-stack">
                    <div class="tech-category">
                        <h5>Cloud Platforms</h5>
                        <div class="tech-tags">
                            <span class="tech-tag">AWS</span>
                            <span class="tech-tag">Google Cloud</span>
                            <span class="tech-tag">Microsoft Azure</span>
                            <span class="tech-tag">Netlify</span>
                        </div>
                    </div>
                    
                    <div class="tech-category">
                        <h5>Development Tools</h5>
                        <div class="tech-tags">
                            <span class="tech-tag">Git/GitHub</span>
                            <span class="tech-tag">Docker</span>
                            <span class="tech-tag">CI/CD Pipelines</span>
                            <span class="tech-tag">Webpack</span>
                        </div>
                    </div>
                    
                    <div class="tech-category">
                        <h5>Security & Compliance</h5>
                        <div class="tech-tags">
                            <span class="tech-tag">HIPAA Compliance</span>
                            <span class="tech-tag">SSL/TLS Security</span>
                            <span class="tech-tag">Data Encryption</span>
                            <span class="tech-tag">Security Auditing</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="ai-innovation">
        <h3>AI & Innovation Leadership</h3>
        <p class="section-intro">Pioneering AI-driven solutions that enhance healthcare marketing effectiveness and patient engagement.</p>
        
        <div class="innovation-grid">
            <div class="innovation-item">
                <i class="fas fa-robot"></i>
                <h4>AI-Powered Analytics</h4>
                <ul>
                    <li>ChatGPT API integration for content generation</li>
                    <li>Predictive analytics for patient behavior</li>
                    <li>Automated reporting and insights</li>
                    <li>Natural language processing for patient feedback</li>
                </ul>
            </div>
            
            <div class="innovation-item">
                <i class="fas fa-brain"></i>
                <h4>Machine Learning Applications</h4>
                <ul>
                    <li>Patient journey optimization algorithms</li>
                    <li>Conversion prediction models</li>
                    <li>Dynamic content personalization</li>
                    <li>Automated A/B testing optimization</li>
                </ul>
            </div>
            
            <div class="innovation-item">
                <i class="fas fa-cogs"></i>
                <h4>Marketing Automation</h4>
                <ul>
                    <li>Intelligent lead scoring systems</li>
                    <li>Automated email marketing campaigns</li>
                    <li>Dynamic landing page optimization</li>
                    <li>Cross-platform campaign synchronization</li>
                </ul>
            </div>
        </div>
    </div>

    <div class="industry-achievements">
        <h3>Industry Leadership & Achievements</h3>
        
        <div class="achievements-grid">
            <div class="achievement">
                <i class="fas fa-trophy"></i>
                <h4>Company Scale Success</h4>
                <p>Co-founded and scaled Dreamscape Marketing from 2 employees to 80+, establishing the largest behavioral health marketing firm in the United States.</p>
            </div>
            
            <div class="achievement">
                <i class="fas fa-handshake"></i>
                <h4>Strategic Acquisitions</h4>
                <p>Successfully navigated two major strategic acquisitions by SPM Group and Unlock Health, contributing to the creation of the largest healthcare marketing company nationally.</p>
            </div>
            
            <div class="achievement">
                <i class="fas fa-chart-line"></i>
                <h4>Performance Excellence</h4>
                <p>Consistently delivered ROI exceeding industry benchmarks across multi-million dollar marketing budgets with industry-leading client retention rates.</p>
            </div>
            
            <div class="achievement">
                <i class="fas fa-users"></i>
                <h4>Team Leadership</h4>
                <p>Built and managed high-performing teams of 80+ professionals across marketing, development, and client services with exceptional growth outcomes.</p>
            </div>
        </div>
    </div>

    <div class="healthcare-specializations">
        <h3>Healthcare Sector Expertise</h3>
        <div class="specializations-grid">
            <div class="specialization-item">
                <i class="fas fa-brain"></i>
                <div class="spec-info">
                    <span class="spec-title">Behavioral Health</span>
                    <span class="spec-desc">Mental health, addiction treatment, therapy practices</span>
                </div>
            </div>
            <div class="specialization-item">
                <i class="fas fa-user-friends"></i>
                <div class="spec-info">
                    <span class="spec-title">Senior Living</span>
                    <span class="spec-desc">Assisted living, memory care, independent living</span>
                </div>
            </div>
            <div class="specialization-item">
                <i class="fas fa-tooth"></i>
                <div class="spec-info">
                    <span class="spec-title">Dental Care</span>
                    <span class="spec-desc">General dentistry, orthodontics, oral surgery</span>
                </div>
            </div>
            <div class="specialization-item">
                <i class="fas fa-hospital"></i>
                <div class="spec-info">
                    <span class="spec-title">Hospital Systems</span>
                    <span class="spec-desc">Multi-location healthcare networks, specialty care</span>
                </div>
            </div>
        </div>
    </div>

    <div class="certifications-education">
        <h3>Professional Development</h3>
        <div class="cert-grid">
            <div class="cert-item">
                <i class="fas fa-certificate"></i>
                <div class="cert-info">
                    <h4>Digital Marketing Certification</h4>
                    <p>Advanced certification in digital marketing strategies and analytics</p>
                </div>
            </div>
            <div class="cert-item">
                <i class="fas fa-graduation-cap"></i>
                <div class="cert-info">
                    <h4>Bachelor of Science</h4>
                    <p>Computer Science & Business, Towson University</p>
                </div>
            </div>
        </div>
    </div>

    <div class="contact-cta">
        <h3>Ready to Work with Kevin & Unlock Health?</h3>
        <p>Partner with me and the Unlock Health team to transform your healthcare organization through strategic digital marketing, advanced SEO, and innovative web development solutions that drive exceptional growth.</p>
        
        <div class="cta-highlight">
            <i class="fas fa-handshake"></i>
            <div class="cta-text">
                <h4>Work with Unlock Health</h4>
                <p>Reach out to discuss how Kevin and our expert team can drive your organization's digital marketing success through our comprehensive healthcare marketing platform.</p>
            </div>
        </div>
        
        <div class="cta-buttons">
            <a href="https://unlockhealth.com" class="cta-primary" target="_blank" rel="noopener">
                <i class="fas fa-building"></i>
                Explore Unlock Health
            </a>
            <a href="https://linkedin.com/in/kevinplumlee" class="cta-secondary" target="_blank" rel="noopener">
                <i class="fab fa-linkedin"></i>
                Connect on LinkedIn
            </a>
        </div>
    </div>

    <div class="social-links">
        <a href="https://linkedin.com/in/kevinplumlee" class="social-link" target="_blank" rel="noopener">
            <i class="fab fa-linkedin"></i>
        </a>
        <a href="https://badgr.com/public/assertions/thX0QvfBRc-IOJV7qjZs7g" class="social-link" target="_blank" rel="noopener">
            <i class="fas fa-certificate"></i>
        </a>
        <a href="https://unlockhealth.com" class="social-link" target="_blank" rel="noopener">
            <i class="fas fa-building"></i>
        </a>
    </div>
</div>`,
        
        projects: `<div class="projects-hero">
    <h2>Healthcare Marketing Excellence with Unlock Health</h2>
    <p class="hero-subtitle">Led by Kevin Plumlee, our team delivers comprehensive digital marketing solutions that transform healthcare organizations and drive exceptional patient acquisition results.</p>
    <div class="hero-stats">
        <div class="stat">
            <span class="stat-number">300+</span>
            <span class="stat-label">Healthcare Clients</span>
        </div>
        <div class="stat">
            <span class="stat-number">200%</span>
            <span class="stat-label">Average ROI Increase</span>
        </div>
        <div class="stat">
            <span class="stat-number">$50M+</span>
            <span class="stat-label">Ad Spend Managed</span>
        </div>
    </div>
</div>

<div class="project-filters">
    <div class="filter-btn active" data-filter="all">All Projects</div>
    <div class="filter-btn" data-filter="behavioral-health">Behavioral Health</div>
    <div class="filter-btn" data-filter="senior-living">Senior Living</div>
    <div class="filter-btn" data-filter="healthcare-systems">Healthcare Systems</div>
    <div class="filter-btn" data-filter="addiction-treatment">Addiction Treatment</div>
</div>

<div class="projects-grid">
    <!-- National Addiction Treatment Network -->
    <div class="project-item featured" data-category="addiction-treatment behavioral-health" data-status="completed">
        <div class="project-status completed">Completed</div>
        <div class="project-image">
            <i class="fas fa-hospital-alt"></i>
        </div>
        <div class="project-info">
            <h3>National Addiction Treatment Network</h3>
            <p class="project-subtitle">Multi-Location Treatment Centers</p>
            <p>Led comprehensive digital transformation for one of the nation's largest addiction treatment networks. Delivered a complete website rebuild, enterprise SEO strategy, and multi-location Google Ads campaigns driving over 40% increase in qualified admissions.</p>
            
            <div class="project-details">
                <div class="detail-section">
                    <h4><i class="fas fa-globe"></i> Website Development</h4>
                    <ul>
                        <li>Complete website architecture redesign with patient journey optimization</li>
                        <li>HIPAA-compliant patient intake and assessment forms</li>
                        <li>Multi-location service area mapping and local content</li>
                        <li>Insurance verification tools and treatment program configurators</li>
                        <li>Mobile-first responsive design with Core Web Vitals optimization</li>
                    </ul>
                </div>
                
                <div class="detail-section">
                    <h4><i class="fas fa-search"></i> SEO Strategy</h4>
                    <ul>
                        <li>National and local SEO for 25+ treatment locations</li>
                        <li>Medical entity optimization and E-A-T content strategy</li>
                        <li>Treatment-specific landing pages with conversion optimization</li>
                        <li>Schema markup for medical facilities and treatment programs</li>
                        <li>Achieved 150% increase in organic patient inquiries</li>
                    </ul>
                </div>
                
                <div class="detail-section">
                    <h4><i class="fas fa-ad"></i> Digital Marketing</h4>
                    <ul>
                        <li>Multi-location Google Ads campaigns with geo-targeting</li>
                        <li>Social media marketing for addiction awareness and education</li>
                        <li>Retargeting campaigns for website visitors and previous patients</li>
                        <li>Call tracking and conversion optimization across all channels</li>
                        <li>Crisis intervention advertising and emergency response campaigns</li>
                    </ul>
                </div>
            </div>
            
            <div class="project-results">
                <div class="result-item">
                    <span class="result-number">40%</span>
                    <span class="result-label">Admission Increase</span>
                </div>
                <div class="result-item">
                    <span class="result-number">150%</span>
                    <span class="result-label">Organic Inquiries</span>
                </div>
                <div class="result-item">
                    <span class="result-number">25+</span>
                    <span class="result-label">Locations Optimized</span>
                </div>
            </div>
            
            <div class="project-tech">
                <span class="tech-tag">Multi-Location SEO</span>
                <span class="tech-tag">HIPAA Compliance</span>
                <span class="tech-tag">Google Ads</span>
                <span class="tech-tag">Call Tracking</span>
                <span class="tech-tag">Crisis Marketing</span>
                <span class="tech-tag">Conversion Optimization</span>
            </div>
        </div>
    </div>

    <!-- Luxury Treatment Centers -->
    <div class="project-item featured" data-category="addiction-treatment behavioral-health" data-status="completed">
        <div class="project-status completed">Completed</div>
        <div class="project-image">
            <i class="fas fa-heart"></i>
        </div>
        <div class="project-info">
            <h3>Luxury Treatment Centers</h3>
            <p class="project-subtitle">Premium Addiction Recovery Network</p>
            <p>Developed sophisticated digital marketing strategies for an upscale addiction treatment network, focusing on premium care messaging, family support resources, and high-end treatment program promotion across multiple luxury facilities.</p>
            
            <div class="project-details">
                <div class="detail-section">
                    <h4><i class="fas fa-globe"></i> Website Development</h4>
                    <ul>
                        <li>Luxury-focused website design with premium aesthetic and messaging</li>
                        <li>Comprehensive treatment program showcases and facility virtual tours</li>
                        <li>Advanced patient portal with concierge-level support features</li>
                        <li>Insurance verification for premium plans and private pay options</li>
                        <li>Mobile-optimized design with accessibility and performance focus</li>
                    </ul>
                </div>
                
                <div class="detail-section">
                    <h4><i class="fas fa-search"></i> SEO Strategy</h4>
                    <ul>
                        <li>Luxury treatment and premium care keyword optimization</li>
                        <li>High-value patient targeting and conversion strategy</li>
                        <li>Treatment modality-specific content and authority building</li>
                        <li>Local SEO for exclusive treatment locations</li>
                        <li>Achieved 180% increase in qualified luxury care inquiries</li>
                    </ul>
                </div>
                
                <div class="detail-section">
                    <h4><i class="fas fa-ad"></i> Digital Marketing</h4>
                    <ul>
                        <li>Premium treatment-focused Google Ads and social campaigns</li>
                        <li>Luxury lifestyle targeting and high-value patient acquisition</li>
                        <li>Family education and executive treatment program promotion</li>
                        <li>Concierge service marketing and VIP care coordination</li>
                        <li>Delivered 90% increase in premium program admissions</li>
                    </ul>
                </div>
            </div>
            
            <div class="project-results">
                <div class="result-item">
                    <span class="result-number">90%</span>
                    <span class="result-label">Premium Admissions</span>
                </div>
                <div class="result-item">
                    <span class="result-number">180%</span>
                    <span class="result-label">Luxury Inquiries</span>
                </div>
                <div class="result-item">
                    <span class="result-number">95%</span>
                    <span class="result-label">Patient Satisfaction</span>
                </div>
            </div>
            
            <div class="project-tech">
                <span class="tech-tag">Luxury Marketing</span>
                <span class="tech-tag">Premium SEO</span>
                <span class="tech-tag">Concierge Services</span>
                <span class="tech-tag">Executive Programs</span>
                <span class="tech-tag">VIP Care</span>
                <span class="tech-tag">High-Value Targeting</span>
            </div>
        </div>
    </div>

    <!-- Major Healthcare System -->
    <div class="project-item featured" data-category="healthcare-systems" data-status="completed">
        <div class="project-status completed">Completed</div>
        <div class="project-image">
            <i class="fas fa-clinic-medical"></i>
        </div>
        <div class="project-info">
            <h3>Major Healthcare System</h3>
            <p class="project-subtitle">Integrated Healthcare Network Digital Strategy</p>
            <p>Partnered with a leading healthcare system to enhance their digital ecosystem, focusing on patient engagement, provider connectivity, and integrated care coordination through comprehensive website optimization and strategic digital marketing initiatives.</p>
            
            <div class="project-details">
                <div class="detail-section">
                    <h4><i class="fas fa-hospital"></i> Healthcare System Integration</h4>
                    <ul>
                        <li>Multi-specialty clinic website development and optimization</li>
                        <li>EHR integration and patient portal connectivity</li>
                        <li>Provider directory and appointment scheduling systems</li>
                        <li>Telehealth platform integration and optimization</li>
                        <li>Mobile app development for patient engagement</li>
                    </ul>
                </div>
                
                <div class="detail-section">
                    <h4><i class="fas fa-users"></i> Patient Acquisition Strategy</h4>
                    <ul>
                        <li>Specialty care SEO optimization and content strategy</li>
                        <li>Local SEO for multiple clinic locations and services</li>
                        <li>Healthcare service-specific landing page development</li>
                        <li>Medical professional and service authority building</li>
                        <li>180% increase in online appointment bookings</li>
                    </ul>
                </div>
                
                <div class="detail-section">
                    <h4><i class="fas fa-digital-tachograph"></i> Digital Marketing Excellence</h4>
                    <ul>
                        <li>Healthcare service-focused Google Ads campaigns</li>
                        <li>Physician and specialty care promotional strategies</li>
                        <li>Community health education content marketing</li>
                        <li>Health screening and prevention campaign development</li>
                        <li>Achieved 120% growth in patient referrals</li>
                    </ul>
                </div>
            </div>
            
            <div class="project-results">
                <div class="result-item">
                    <span class="result-number">180%</span>
                    <span class="result-label">Appointment Bookings</span>
                </div>
                <div class="result-item">
                    <span class="result-number">120%</span>
                    <span class="result-label">Patient Referrals</span>
                </div>
                <div class="result-item">
                    <span class="result-number">50+</span>
                    <span class="result-label">Specialty Services</span>
                </div>
            </div>
            
            <div class="project-tech">
                <span class="tech-tag">Healthcare Systems</span>
                <span class="tech-tag">EHR Integration</span>
                <span class="tech-tag">Multi-Location SEO</span>
                <span class="tech-tag">Telehealth</span>
                <span class="tech-tag">Patient Portals</span>
                <span class="tech-tag">Specialty Care</span>
            </div>
        </div>
    </div>

    <!-- National Hospice Network -->
    <div class="project-item" data-category="healthcare-systems" data-status="completed">
        <div class="project-status completed">Completed</div>
        <div class="project-image">
            <i class="fas fa-home"></i>
        </div>
        <div class="project-info">
            <h3>National Hospice Network</h3>
            <p class="project-subtitle">Compassionate End-of-Life Care Marketing</p>
            <p>Developed a comprehensive digital strategy for a leading hospice care provider, focusing on compassionate messaging, family support resources, and healthcare professional outreach across their national network of care locations.</p>
            
            <div class="project-details">
                <div class="detail-section">
                    <h4><i class="fas fa-globe"></i> Website Development</h4>
                    <ul>
                        <li>Compassionate website design with family-focused navigation</li>
                        <li>Grief support resources and educational content libraries</li>
                        <li>Multi-location service area optimization</li>
                        <li>Provider referral portals and professional resources</li>
                        <li>HIPAA-compliant family communication systems</li>
                    </ul>
                </div>
                
                <div class="detail-section">
                    <h4><i class="fas fa-search"></i> SEO Strategy</h4>
                    <ul>
                        <li>Local SEO optimization for 190+ hospice locations</li>
                        <li>Hospice and palliative care keyword targeting</li>
                        <li>Family education content strategy and authority building</li>
                        <li>Healthcare provider outreach and referral optimization</li>
                        <li>Achieved 125% increase in family inquiries</li>
                    </ul>
                </div>
                
                <div class="detail-section">
                    <h4><i class="fas fa-ad"></i> Digital Marketing</h4>
                    <ul>
                        <li>Compassionate messaging campaigns for families and providers</li>
                        <li>Healthcare professional education and outreach programs</li>
                        <li>Community awareness and bereavement support campaigns</li>
                        <li>Referral source development and partnership marketing</li>
                        <li>Delivered 95% increase in provider referrals</li>
                    </ul>
                </div>
            </div>
            
            <div class="project-results">
                <div class="result-item">
                    <span class="result-number">125%</span>
                    <span class="result-label">Family Inquiries</span>
                </div>
                <div class="result-item">
                    <span class="result-number">95%</span>
                    <span class="result-label">Provider Referrals</span>
                </div>
                <div class="result-item">
                    <span class="result-number">190+</span>
                    <span class="result-label">Locations Optimized</span>
                </div>
            </div>
            
            <div class="project-tech">
                <span class="tech-tag">Hospice Marketing</span>
                <span class="tech-tag">Family Resources</span>
                <span class="tech-tag">Multi-Location SEO</span>
                <span class="tech-tag">Provider Outreach</span>
                <span class="tech-tag">Compassionate Messaging</span>
                <span class="tech-tag">Grief Support</span>
            </div>
        </div>
    </div>

    <!-- Premium Senior Living Network -->
    <div class="project-item" data-category="senior-living" data-status="completed">
        <div class="project-status completed">Completed</div>
        <div class="project-image">
            <i class="fas fa-building"></i>
        </div>
        <div class="project-info">
            <h3>Premium Senior Living Network</h3>
            <p class="project-subtitle">Luxury Senior Care Communities</p>
            <p>Created a sophisticated digital marketing ecosystem for a premium senior living network, incorporating virtual community tours, family communication tools, and comprehensive care level marketing to drive occupancy and family engagement.</p>
            
            <div class="project-details">
                <div class="detail-section">
                    <h4><i class="fas fa-globe"></i> Website Development</h4>
                    <ul>
                        <li>Premium community websites with immersive virtual tours</li>
                        <li>Interactive floor plans and amenity showcases</li>
                        <li>Family communication portals and resident updates</li>
                        <li>Care level assessment tools and pricing calculators</li>
                        <li>Mobile-optimized design for family accessibility</li>
                    </ul>
                </div>
                
                <div class="detail-section">
                    <h4><i class="fas fa-search"></i> SEO Strategy</h4>
                    <ul>
                        <li>Senior living keyword optimization and content strategy</li>
                        <li>Local SEO for each community location and care level</li>
                        <li>Family education content and decision-making resources</li>
                        <li>Care level-specific landing pages and conversion optimization</li>
                        <li>Achieved 160% increase in tour bookings</li>
                    </ul>
                </div>
                
                <div class="detail-section">
                    <h4><i class="fas fa-ad"></i> Digital Marketing</h4>
                    <ul>
                        <li>Family-focused Google Ads campaigns and remarketing</li>
                        <li>Social media marketing for community engagement</li>
                        <li>Virtual event marketing and family education seminars</li>
                        <li>Occupancy marketing and waitlist management campaigns</li>
                        <li>Delivered 45% increase in qualified inquiries</li>
                    </ul>
                </div>
            </div>
            
            <div class="project-results">
                <div class="result-item">
                    <span class="result-number">160%</span>
                    <span class="result-label">Tour Bookings</span>
                </div>
                <div class="result-item">
                    <span class="result-number">45%</span>
                    <span class="result-label">Qualified Inquiries</span>
                </div>
                <div class="result-item">
                    <span class="result-number">92%</span>
                    <span class="result-label">Occupancy Rate</span>
                </div>
            </div>
            
            <div class="project-tech">
                <span class="tech-tag">Senior Living</span>
                <span class="tech-tag">Virtual Tours</span>
                <span class="tech-tag">Family Portals</span>
                <span class="tech-tag">Care Assessment</span>
                <span class="tech-tag">Occupancy Marketing</span>
                <span class="tech-tag">Community Engagement</span>
            </div>
        </div>
    </div>

    <!-- Teen & Young Adult Treatment Programs -->
    <div class="project-item" data-category="addiction-treatment behavioral-health" data-status="completed">
        <div class="project-status completed">Completed</div>
        <div class="project-image">
            <i class="fas fa-spa"></i>
        </div>
        <div class="project-info">
            <h3>Teen & Young Adult Treatment Programs</h3>
            <p class="project-subtitle">Adolescent Mental Health & Addiction Services</p>
            <p>Developed specialized marketing strategies for a leading adolescent and young adult treatment provider, focusing on family-centered messaging, educational resources, and age-appropriate treatment program promotion.</p>
            
            <div class="project-details">
                <div class="detail-section">
                    <h4><i class="fas fa-globe"></i> Website Development</h4>
                    <ul>
                        <li>Youth-focused website design with engaging visual elements</li>
                        <li>Parent and teen resource centers with educational content</li>
                        <li>Academic integration tools and school partnership portals</li>
                        <li>Family therapy scheduling and communication systems</li>
                        <li>Mobile-first design optimized for teen and parent usage</li>
                    </ul>
                </div>
                
                <div class="detail-section">
                    <h4><i class="fas fa-search"></i> SEO Strategy</h4>
                    <ul>
                        <li>Teen and young adult treatment keyword optimization</li>
                        <li>Family education content strategy and parent resources</li>
                        <li>Academic support and school integration content</li>
                        <li>Age-specific treatment program landing pages</li>
                        <li>Achieved 140% increase in family consultations</li>
                    </ul>
                </div>
                
                <div class="detail-section">
                    <h4><i class="fas fa-ad"></i> Digital Marketing</h4>
                    <ul>
                        <li>Parent-focused Google Ads campaigns and social media</li>
                        <li>Educational content marketing for families and schools</li>
                        <li>Academic partnership marketing and referral programs</li>
                        <li>Crisis intervention and family support campaigns</li>
                        <li>Delivered 75% increase in program admissions</li>
                    </ul>
                </div>
            </div>
            
            <div class="project-results">
                <div class="result-item">
                    <span class="result-number">75%</span>
                    <span class="result-label">Program Admissions</span>
                </div>
                <div class="result-item">
                    <span class="result-number">140%</span>
                    <span class="result-label">Family Consultations</span>
                </div>
                <div class="result-item">
                    <span class="result-number">90%</span>
                    <span class="result-label">Program Completion</span>
                </div>
            </div>
            
            <div class="project-tech">
                <span class="tech-tag">Teen Treatment</span>
                <span class="tech-tag">Family Therapy</span>
                <span class="tech-tag">Academic Support</span>
                <span class="tech-tag">Mobile-First</span>
                <span class="tech-tag">Social Media</span>
                <span class="tech-tag">Crisis Support</span>
            </div>
        </div>
    </div>

    <!-- Outpatient Treatment Centers -->
    <div class="project-item" data-category="addiction-treatment behavioral-health" data-status="completed">
        <div class="project-status completed">Completed</div>
        <div class="project-image">
            <i class="fas fa-seedling"></i>
        </div>
        <div class="project-info">
            <h3>Outpatient Treatment Centers</h3>
            <p class="project-subtitle">Community-Based Recovery Programs</p>
            <p>Created a comprehensive digital marketing strategy for a growing outpatient treatment network, emphasizing accessibility, insurance acceptance, and community-based care while maintaining strong conversion optimization and local market penetration.</p>
            
            <div class="project-details">
                <div class="detail-section">
                    <h4><i class="fas fa-globe"></i> Website Development</h4>
                    <ul>
                        <li>Accessible outpatient-focused website with scheduling integration</li>
                        <li>Insurance verification and pre-authorization tools</li>
                        <li>Community resource directories and support group listings</li>
                        <li>Flexible program scheduling and appointment booking systems</li>
                        <li>Local community integration and partnership portals</li>
                    </ul>
                </div>
                
                <div class="detail-section">
                    <h4><i class="fas fa-search"></i> SEO Strategy</h4>
                    <ul>
                        <li>Outpatient treatment and local community keyword targeting</li>
                        <li>Insurance acceptance and accessibility content optimization</li>
                        <li>Community-based recovery resource content strategy</li>
                        <li>Local treatment program and support group optimization</li>
                        <li>Achieved 110% increase in program enrollments</li>
                    </ul>
                </div>
                
                <div class="detail-section">
                    <h4><i class="fas fa-ad"></i> Digital Marketing</h4>
                    <ul>
                        <li>Local community-focused Google Ads and social campaigns</li>
                        <li>Insurance-based targeting and affordability messaging</li>
                        <li>Community outreach and partnership development</li>
                        <li>Flexible scheduling and accessibility-focused marketing</li>
                        <li>Delivered 65% increase in community referrals</li>
                    </ul>
                </div>
            </div>
            
            <div class="project-results">
                <div class="result-item">
                    <span class="result-number">110%</span>
                    <span class="result-label">Program Enrollments</span>
                </div>
                <div class="result-item">
                    <span class="result-number">65%</span>
                    <span class="result-label">Community Referrals</span>
                </div>
                <div class="result-item">
                    <span class="result-number">88%</span>
                    <span class="result-label">Patient Retention</span>
                </div>
            </div>
            
            <div class="project-tech">
                <span class="tech-tag">Outpatient Programs</span>
                <span class="tech-tag">Insurance Verification</span>
                <span class="tech-tag">Community Outreach</span>
                <span class="tech-tag">Accessibility Focus</span>
                <span class="tech-tag">Local SEO</span>
                <span class="tech-tag">Support Groups</span>
            </div>
        </div>
    </div>

    <!-- Healthcare Marketing Platform -->
    <div class="project-item featured" data-category="healthcare-systems" data-status="ongoing">
        <div class="project-status ongoing">Ongoing</div>
        <div class="project-image">
            <i class="fas fa-unlock-alt"></i>
        </div>
        <div class="project-info">
            <h3>Unlock Health Marketing Platform</h3>
            <p class="project-subtitle">Integrated Healthcare Marketing Solutions</p>
            <p>Under Kevin's leadership, Unlock Health continues to innovate and deliver comprehensive marketing solutions that integrate managed care, marketing technology, and healthcare expertise to drive measurable growth for organizations nationwide.</p>
            
            <div class="platform-features">
                <div class="feature-grid">
                    <div class="feature-item">
                        <i class="fas fa-chart-network"></i>
                        <h4>Integrated Analytics</h4>
                        <p>Comprehensive reporting across all marketing channels</p>
                    </div>
                    <div class="feature-item">
                        <i class="fas fa-robot"></i>
                        <h4>AI-Powered Optimization</h4>
                        <p>Machine learning for campaign and content optimization</p>
                    </div>
                    <div class="feature-item">
                        <i class="fas fa-shield-check"></i>
                        <h4>Healthcare Compliance</h4>
                        <p>HIPAA-compliant tools and regulatory expertise</p>
                    </div>
                    <div class="feature-item">
                        <i class="fas fa-users-cog"></i>
                        <h4>Managed Services</h4>
                        <p>Full-service marketing team and account management</p>
                    </div>
                </div>
            </div>
            
            <div class="project-tech">
                <span class="tech-tag">Marketing Platform</span>
                <span class="tech-tag">AI Analytics</span>
                <span class="tech-tag">Managed Services</span>
                <span class="tech-tag">Healthcare Focus</span>
                <span class="tech-tag">Compliance Tools</span>
            </div>
        </div>
    </div>
</div>

<div class="projects-cta">
    <h3>Transform Your Healthcare Marketing with Unlock Health</h3>
    <p>Partner with Kevin Plumlee and the Unlock Health team to drive exceptional growth for your healthcare organization through strategic digital marketing, comprehensive SEO, and innovative technology solutions.</p>
    <div class="cta-buttons">
        <a href="https://unlockhealth.com" class="cta-primary" target="_blank">
            <i class="fas fa-rocket"></i>
            Explore Our Services
        </a>
        <a href="mailto:kevin@kevinplumlee.com" class="cta-secondary">
            <i class="fas fa-calendar-alt"></i>
            Schedule Strategy Session
        </a>
    </div>
</div>`,
        
        resume: `<div class="resume-content">
    <div class="resume-header">
        <div class="resume-profile-section">
            <div class="resume-profile-image">
                <img src="images/profilepicture/Kevin_Plumlee.webp" alt="Kevin Plumlee - Healthcare Marketing Executive" />
            </div>
            <div class="resume-profile-info">
                <h2>Kevin Plumlee</h2>
                <div class="contact-info">
                    <span><i class="fas fa-envelope"></i> kevin@kevinplumlee.com</span>
                    <span><i class="fab fa-linkedin"></i> linkedin.com/in/kevinplumlee</span>
                    <span><i class="fas fa-building"></i> unlockhealth.com</span>
                    <span><i class="fas fa-map-marker-alt"></i> Columbia, Maryland</span>
                </div>
            </div>
        </div>
    </div>
    
    <div class="resume-section">
        <h3>Professional Summary</h3>
        <p>Healthcare marketing executive with 15+ years of experience driving transformative growth for organizations in behavioral health, senior living, dental care, and hospital systems. Proven track record in scaling companies, leading digital transformation, and delivering measurable ROI through data-driven strategies. Co-founded Dreamscape Marketing and successfully navigated two strategic acquisitions, establishing industry leadership in healthcare marketing innovation.</p>
    </div>
    
    <div class="resume-section">
        <h3>Experience</h3>
        
        <div class="experience-item">
            <div class="job-header">
                <h4>VP Performance Marketing</h4>
                <span class="duration">Apr 2024 - Present</span>
            </div>
            <p class="company">Unlock Health</p>
            <ul>
                <li>Oversee strategic vision and management of SEO, content creation, and web development for healthcare clients</li>
                <li>Design and implement comprehensive strategies enhancing organic search rankings for hospital systems</li>
                <li>Lead team in creating engaging content tailored to specific healthcare audiences and patient demographics</li>
                <li>Develop user-friendly websites and digital assets aligned with business objectives for sustained organic growth</li>
                <li>Drive measurable ROI through integrated solutions spanning managed care, marketing, and technology</li>
            </ul>
        </div>
        
        <div class="experience-item">
            <div class="job-header">
                <h4>Co-Founder</h4>
                <span class="duration">Jul 2014 - Apr 2024</span>
            </div>
            <p class="company">Dreamscape Marketing, LLC</p>
            <ul>
                <li>Co-founded and scaled company from 2 employees to 80, becoming largest behavioral health marketing firm in the U.S.</li>
                <li>Led strategic acquisitions by SPM Group and Unlock Health, establishing largest healthcare marketing company nationally</li>
                <li>Built comprehensive digital marketing strategies for behavioral health, senior living, and dental care organizations</li>
                <li>Implemented data-driven analytics and process optimization leading to industry-leading client retention rates</li>
                <li>Pioneered innovative approaches in healthcare marketing compliance and patient privacy protection</li>
                <li>Managed multi-million dollar marketing budgets and delivered consistent ROI exceeding industry benchmarks</li>
            </ul>
        </div>
        
        <div class="experience-item">
            <div class="job-header">
                <h4>Digital Marketing Consultant</h4>
                <span class="duration">2010 - 2014</span>
            </div>
            <p class="company">Healthcare Organizations (Various)</p>
            <ul>
                <li>Provided specialized digital marketing consulting for healthcare practices and systems</li>
                <li>Developed SEO strategies and web development solutions for medical practices</li>
                <li>Implemented Google Analytics and tracking systems for patient acquisition measurement</li>
                <li>Created HIPAA-compliant websites and digital marketing campaigns</li>
                <li>Established foundation expertise in healthcare marketing regulations and best practices</li>
            </ul>
        </div>
    </div>
    
    <div class="resume-section">
        <h3>Education</h3>
        
        <div class="education-item">
            <h4>Bachelor of Science in Computer Science, Business</h4>
            <p class="school">Towson University</p>
            <p class="details">2004-2008 • Activities: Intramural Softball</p>
        </div>
        
        <div class="education-item">
            <h4>Associate of Arts in Information Technology, Business</h4>
            <p class="school">Howard Community College</p>
            <p class="details">2002-2004</p>
        </div>
    </div>
    
    <div class="resume-section">
        <h3>Technical Skills & Expertise</h3>
        
        <div class="skills-resume">
            <div class="skill-category">
                <h4><i class="fas fa-search"></i> SEO & Analytics</h4>
                <div class="skill-list">
                    <span class="skill-tag">Google Analytics</span>
                    <span class="skill-tag">Google Search Console</span>
                    <span class="skill-tag">Bing Search Console</span>
                    <span class="skill-tag">Ahrefs</span>
                    <span class="skill-tag">Screaming Frog</span>
                    <span class="skill-tag">Local SEO</span>
                    <span class="skill-tag">Technical SEO</span>
                </div>
            </div>
            
            <div class="skill-category">
                <h4><i class="fas fa-code"></i> Web Development</h4>
                <div class="skill-list">
                    <span class="skill-tag">HTML5</span>
                    <span class="skill-tag">CSS3</span>
                    <span class="skill-tag">JavaScript</span>
                    <span class="skill-tag">Responsive Design</span>
                    <span class="skill-tag">HIPAA Compliance</span>
                    <span class="skill-tag">Web Performance</span>
                </div>
            </div>
            
            <div class="skill-category">
                <h4><i class="fas fa-robot"></i> AI & Automation</h4>
                <div class="skill-list">
                    <span class="skill-tag">ChatGPT APIs</span>
                    <span class="skill-tag">AI Implementation</span>
                    <span class="skill-tag">Process Automation</span>
                    <span class="skill-tag">Predictive Analytics</span>
                </div>
            </div>
            
            <div class="skill-category">
                <h4><i class="fas fa-tools"></i> CRM & Tools</h4>
                <div class="skill-list">
                    <span class="skill-tag">Salesforce</span>
                    <span class="skill-tag">Zoho CRM</span>
                    <span class="skill-tag">Call Tracking Metrics</span>
                    <span class="skill-tag">CallRail</span>
                    <span class="skill-tag">Intranet Management</span>
                </div>
            </div>
            
            <div class="skill-category">
                <h4><i class="fas fa-heartbeat"></i> Healthcare Specialties</h4>
                <div class="skill-list">
                    <span class="skill-tag">Behavioral Health</span>
                    <span class="skill-tag">Senior Living</span>
                    <span class="skill-tag">Dental Marketing</span>
                    <span class="skill-tag">Hospital Systems</span>
                    <span class="skill-tag">Healthcare Compliance</span>
                </div>
            </div>
        </div>
    </div>
    
    <div class="resume-section">
        <h3>Key Achievements</h3>
        
        <div class="achievement-item">
            <i class="fas fa-trophy"></i>
            <div class="achievement-info">
                <h4>Company Growth & Acquisitions</h4>
                <p>Successfully scaled Dreamscape Marketing from startup to industry leader through strategic growth and two major acquisitions</p>
            </div>
        </div>
        
        <div class="achievement-item">
            <i class="fas fa-users"></i>
            <div class="achievement-info">
                <h4>Team Leadership</h4>
                <p>Built and managed teams of 80+ professionals across marketing, development, and client services</p>
            </div>
        </div>
        
        <div class="achievement-item">
            <i class="fas fa-chart-line"></i>
            <div class="achievement-info">
                <h4>Industry Recognition</h4>
                <p>Established largest behavioral health marketing firm in the U.S. and contributed to creating largest healthcare marketing company nationally</p>
            </div>
        </div>
    </div>
    
    <div class="resume-section">
        <h3>Professional Certification</h3>
        
        <div class="cert-item">
            <i class="fas fa-certificate"></i>
            <div class="cert-info">
                <h4>Digital Marketing Certification</h4>
                <p>Verified Achievement • 2024</p>
            </div>
        </div>
    </div>
    
    <div class="download-resume">
        <a href="https://linkedin.com/in/kevinplumlee" target="_blank" rel="noopener" class="download-btn">
            <i class="fab fa-linkedin"></i>
            Connect on LinkedIn
        </a>
    </div>
</div>`,
        
        settings: `<div class="settings-section">
    <h3>Desktop Background</h3>
    <p>Choose a wallpaper from the available options:</p>
    <div class="wallpaper-grid" id="wallpaper-grid">
        <!-- Wallpapers will be loaded dynamically -->
    </div>
</div>`,
        
        contact: `<div class="contact-section">
    <h2>Let's Connect</h2>
    <p class="contact-intro">The best way to reach me is through LinkedIn where I'm most active. For direct communication, feel free to use the contact options below.</p>
    
    <!-- LinkedIn Profile Section -->
    <div class="linkedin-section">
        <h3><i class="fab fa-linkedin"></i> Connect on LinkedIn</h3>
        <div class="linkedin-card">
            <div class="linkedin-info">
                <div class="linkedin-profile">
                    <img src="../images/profilepicture/Kevin_Plumlee.webp" alt="Kevin Plumlee" class="linkedin-avatar">
                    <div class="linkedin-details">
                        <h4>Kevin Plumlee</h4>
                        <p class="linkedin-title">VP Performance Marketing at Unlock Health</p>
                        <p class="linkedin-location">Columbia, Maryland, United States</p>
                        <div class="linkedin-stats">
                            <span><i class="fas fa-users"></i> 500+ connections</span>
                            <span><i class="fas fa-building"></i> Healthcare Marketing Expert</span>
                        </div>
                    </div>
                </div>
                <div class="linkedin-actions">
                    <a href="https://linkedin.com/in/kevinplumlee" class="linkedin-connect-btn" target="_blank" rel="noopener">
                        <i class="fab fa-linkedin"></i>
                        Connect on LinkedIn
                    </a>
                    <p class="linkedin-note">Send me a message on LinkedIn for the fastest response</p>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Contact Methods -->
    <div class="contact-methods-section">
        <h3>Other Ways to Reach Me</h3>
        
        <div class="contact-methods">
            <a href="https://unlockhealth.com/contact" target="_blank" rel="noopener" class="contact-method">
                <i class="fas fa-handshake contact-icon"></i>
                <div class="contact-method-info">
                    <h4>Professional Consultation</h4>
                    <p>Schedule a strategic consultation</p>
                </div>
            </a>
            
            <a href="https://unlockhealth.com" target="_blank" rel="noopener" class="contact-method">
                <i class="fas fa-building contact-icon"></i>
                <div class="contact-method-info">
                    <h4>Unlock Health</h4>
                    <p>Professional inquiries</p>
                </div>
            </a>
            
            <a href="https://badgr.com/public/assertions/thX0QvfBRc-IOJV7qjZs7g" target="_blank" rel="noopener" class="contact-method">
                <i class="fas fa-certificate contact-icon"></i>
                <div class="contact-method-info">
                    <h4>Professional Credentials</h4>
                    <p>View certifications</p>
                </div>
            </a>
        </div>
    </div>
    
    <!-- Professional Info -->
    <div class="professional-info">
        <div class="info-card">
            <i class="fas fa-map-marker-alt"></i>
            <div class="info-content">
                <h4>Location</h4>
                <p>Columbia, Maryland</p>
            </div>
        </div>
        
        <div class="info-card">
            <i class="fas fa-clock"></i>
            <div class="info-content">
                <h4>Time Zone</h4>
                <p>Eastern Time (UTC-5)</p>
            </div>
        </div>
        
        <div class="info-card">
            <i class="fas fa-reply"></i>
            <div class="info-content">
                <h4>Response Time</h4>
                <p>LinkedIn: Same day<br>Consultation: 1-2 business days</p>
            </div>
        </div>
    </div>
    
    <!-- Specialization Areas -->
    <div class="expertise-areas">
        <h3>Areas of Expertise</h3>
        <div class="expertise-grid">
            <div class="expertise-item">
                <i class="fas fa-heartbeat"></i>
                <span>Healthcare Marketing</span>
            </div>
            <div class="expertise-item">
                <i class="fas fa-search"></i>
                <span>SEO Strategy</span>
            </div>
            <div class="expertise-item">
                <i class="fas fa-code"></i>
                <span>Web Development</span>
            </div>
            <div class="expertise-item">
                <i class="fas fa-chart-line"></i>
                <span>Digital Analytics</span>
            </div>
            <div class="expertise-item">
                <i class="fas fa-bullhorn"></i>
                <span>Performance Marketing</span>
            </div>
            <div class="expertise-item">
                <i class="fas fa-cogs"></i>
                <span>Digital Transformation</span>
            </div>
        </div>
    </div>

    <!-- Contact CTA -->
    <div class="contact-cta">
        <h3>Ready to Connect?</h3>
        <p>Whether you're looking for healthcare marketing expertise, SEO consultation, or web development services, I'm here to help transform your digital presence.</p>
        <div class="cta-buttons">
            <a href="https://linkedin.com/in/kevinplumlee" class="cta-primary" target="_blank" rel="noopener">
                <i class="fab fa-linkedin"></i>
                Connect on LinkedIn
            </a>
            <a href="https://unlockhealth.com/contact" class="cta-secondary" target="_blank" rel="noopener">
                <i class="fas fa-building"></i>
                Schedule Consultation
            </a>
        </div>
    </div>
</div>`,


    },
    
    // Load content for a specific app
    async loadContent(appName) {
        Utils.logger.debug(`Loading content for ${appName}`);
        
        // Check cache first
        if (this.cache.has(appName)) {
            Utils.logger.debug(`Content for ${appName} found in cache`);
            return this.cache.get(appName);
        }
        
        try {
            // Show loading state
            this.showLoadingState(appName);
            
            // Add artificial delay for better UX
            await Utils.time.wait(Config.content.loadingDelay);
            
            // Get content from embedded data
            let content = this.embeddedContent[appName];
            
            // Handle function-based content sources
            if (typeof content === 'function') {
                content = content();
            }
            
            if (!content) {
                // Fallback to fetch if embedded content not found
                const response = await fetch(`content/${appName}.html`);
                
                if (!response.ok) {
                    throw new Error(`Failed to load content: ${response.status}`);
                }
                
                content = await response.text();
            }
            
            // Cache the content
            this.cache.set(appName, content);
            
            // Load content into window
            this.injectContent(appName, content);
            
            // Initialize any dynamic functionality
            this.initializeContentFeatures(appName);
            
            Utils.logger.debug(`Content for ${appName} loaded successfully`);
            return content;
            
        } catch (error) {
            Utils.logger.error(`Error loading content for ${appName}:`, error);
            this.showErrorState(appName, error.message);
            throw error;
        }
    },
    
    // Show loading state in window
    showLoadingState(appName) {
        const contentElement = Utils.dom.get(`${appName}-content`);
        if (contentElement) {
            contentElement.innerHTML = `
                <div class="loading">
                    <div class="loading-text">Loading ${Utils.string.capitalize(appName)}...</div>
                </div>
            `;
        }
    },
    
    // Show error state in window
    showErrorState(appName, errorMessage) {
        const contentElement = Utils.dom.get(`${appName}-content`);
        if (contentElement) {
            contentElement.innerHTML = `
                <div class="error-state">
                    <i class="fas fa-exclamation-triangle"></i>
                    <h3>Failed to Load Content</h3>
                    <p>${errorMessage}</p>
                    <button onclick="ContentLoader.retryLoad('${appName}')" class="retry-btn">
                        <i class="fas fa-redo"></i>
                        Try Again
                    </button>
                </div>
            `;
        }
    },
    
    // Inject content into window
    injectContent(appName, content) {
        const contentElement = Utils.dom.get(`${appName}-content`);
        if (contentElement) {
            contentElement.innerHTML = content;
            
            // Animate content entrance
            const children = contentElement.children;
            Array.from(children).forEach((child, index) => {
                child.style.opacity = '0';
                child.style.transform = 'translateY(20px)';
                
                setTimeout(() => {
                    Utils.animation.slideInUp(child, 400);
                }, index * 100);
            });
            
            // Recalculate window layout after content is loaded
            setTimeout(() => {
                const window = contentElement.closest('.window');
                if (window && window.classList.contains('active')) {
                    // Use WindowManager's recalculate function if available
                    if (window.WindowManager && typeof WindowManager.recalculateWindowLayout === 'function') {
                        WindowManager.recalculateWindowLayout(window);
                    } else if (window.PortfolioApp && typeof PortfolioApp.recalculateWindowLayout === 'function') {
                        PortfolioApp.recalculateWindowLayout(window);
                    } else {
                        // Fallback recalculation
                        this.forceLayoutRecalculation(window);
                    }
                }
            }, 500);
        }
    },
    
    // Fallback layout recalculation
    forceLayoutRecalculation(window) {
        const content = window.querySelector('.window-content');
        if (!content) return;
        
        // Force reflow
        const windowRect = window.getBoundingClientRect();
        const header = window.querySelector('.window-header');
        const headerHeight = header ? header.offsetHeight : 36;
        const availableHeight = windowRect.height - headerHeight;
        
        content.style.height = availableHeight + 'px';
        
        // Check if scrolling is needed
        if (content.scrollHeight > content.clientHeight) {
            content.style.overflowY = 'auto';
        } else {
            content.style.overflowY = 'hidden';
        }
        
        Utils.logger.debug('Layout recalculated for', window.dataset.app);
    },
    
    // Initialize dynamic features for specific content
    initializeContentFeatures(appName) {
        switch (appName) {
            case 'projects':
                this.initializeProjectsFeatures();
                break;
            case 'contact':
                this.initializeContactFeatures();
                break;
            case 'resume':
                this.initializeResumeFeatures();
                break;
            case 'about':
                this.initializeAboutFeatures();
                break;

            case 'settings':
                this.initializeSettingsFeatures();
                break;
        }
    },

    // Initialize settings-specific features
    initializeSettingsFeatures() {
        // Let the SettingsManager handle the wallpaper loading
        if (window.settingsManager) {
            setTimeout(() => {
                window.settingsManager.loadWallpapers();
            }, 100);
        }
    },
    
    // Initialize projects-specific features
    initializeProjectsFeatures() {
        // Project filtering
        const filterBtns = Utils.dom.queryAll('.filter-btn');
        const projectItems = Utils.dom.queryAll('.project-item');
        
        filterBtns.forEach(btn => {
            Utils.dom.on(btn, 'click', (e) => {
                const filter = btn.dataset.filter;
                
                // Update active filter
                filterBtns.forEach(b => b.classList.remove('active'));
                btn.classList.add('active');
                
                // Filter projects
                projectItems.forEach(item => {
                    const category = item.dataset.category;
                    const shouldShow = filter === 'all' || category.includes(filter);
                    
                    if (shouldShow) {
                        item.style.display = 'block';
                        Utils.animation.fadeIn(item, 300);
                    } else {
                        const fadePromise = Utils.animation.fadeOut(item, 300);
                        if (fadePromise && typeof fadePromise.then === 'function') {
                            fadePromise.then(() => {
                                item.style.display = 'none';
                            });
                        } else {
                            // Fallback if fadeOut doesn't return a promise
                            setTimeout(() => {
                                item.style.display = 'none';
                            }, 300);
                        }
                    }
                });
                
                // Don't prevent event bubbling - let window focus work
            });
        });
        
        // Project item animations
        projectItems.forEach((item, index) => {
            // Stagger animation
            item.style.animationDelay = `${index * 0.1}s`;
            item.classList.add('animate-slide-in-up');
            
            // Hover effects
            Utils.dom.on(item, 'mouseenter', () => {
                Utils.animation.animate(item, [
                    { transform: 'translateY(0) scale(1)' },
                    { transform: 'translateY(-8px) scale(1.02)' }
                ], { duration: 300, fill: 'forwards' });
            });
            
            Utils.dom.on(item, 'mouseleave', () => {
                Utils.animation.animate(item, [
                    { transform: 'translateY(-8px) scale(1.02)' },
                    { transform: 'translateY(0) scale(1)' }
                ], { duration: 300, fill: 'forwards' });
            });
        });
        
        // Ensure window focus works when clicking on projects content
        const projectsContent = Utils.dom.get('projects-content');
        if (projectsContent) {
            Utils.dom.on(projectsContent, 'click', (e) => {
                // Get the projects window and bring it to front
                const projectsWindow = Utils.dom.get('projects-window');
                if (projectsWindow && window.PortfolioApp) {
                    window.PortfolioApp.bringWindowToFront('projects');
                }
            });
        }
    },
    
    // Initialize contact-specific features
    initializeContactFeatures() {
        // Initialize email protection
        const emailLinks = document.querySelectorAll('.email-link');
        emailLinks.forEach(link => {
            link.addEventListener('click', function(e) {
                e.preventDefault();
                const user = this.getAttribute('data-user');
                const domain = this.getAttribute('data-domain');
                const email = user + '@' + domain;
                
                if (this.textContent === 'Click to reveal email') {
                    this.textContent = email;
                    this.href = 'mailto:' + email;
                } else {
                    window.location.href = 'mailto:' + email;
                }
            });
        });
        
        // Animate LinkedIn card on hover
        const linkedinCard = document.querySelector('.linkedin-card');
        if (linkedinCard) {
            linkedinCard.addEventListener('mouseenter', function() {
                this.style.transform = 'translateY(-5px)';
                this.style.boxShadow = '0 8px 25px rgba(0, 119, 181, 0.15)';
            });
            
            linkedinCard.addEventListener('mouseleave', function() {
                this.style.transform = 'translateY(0)';
                this.style.boxShadow = 'none';
            });
        }
        
        // Animate expertise items
        const expertiseItems = document.querySelectorAll('.expertise-item');
        expertiseItems.forEach((item, index) => {
            item.style.animationDelay = `${index * 0.1}s`;
            item.classList.add('animate-fade-in');
        });
    },
    
    // Initialize resume-specific features
    initializeResumeFeatures() {
        // Animate sections on scroll (if needed)
        const sections = Utils.dom.queryAll('.resume-section');
        
        sections.forEach((section, index) => {
            section.style.animationDelay = `${index * 0.2}s`;
            section.classList.add('animate-slide-in-left');
        });
        
        // Skill tag interactions
        const skillTags = Utils.dom.queryAll('.skill-tag');
        skillTags.forEach(tag => {
            Utils.dom.on(tag, 'click', () => {
                // Bounce animation on click
                Utils.animation.bounce(tag, 600);
            });
        });
    },
    
    // Initialize about-specific features
    initializeAboutFeatures() {
        const skillItems = Utils.dom.queryAll('.skill-item');
        
        // Stagger animation for skill items
        skillItems.forEach((item, index) => {
            item.style.animationDelay = `${index * 0.1}s`;
            item.classList.add('animate-fade-in');
        });
        
        // Interactive skill items
        skillItems.forEach(item => {
            Utils.dom.on(item, 'click', () => {
                item.classList.add('animate-pulse');
                setTimeout(() => {
                    item.classList.remove('animate-pulse');
                }, 1000);
            });
        });
        
        // Social links
        const socialLinks = Utils.dom.queryAll('.social-link');
        socialLinks.forEach(link => {
            Utils.dom.on(link, 'mouseenter', () => {
                Utils.animation.animate(link, [
                    { transform: 'scale(1) rotate(0deg)' },
                    { transform: 'scale(1.1) rotate(5deg)' }
                ], { duration: 200, fill: 'forwards' });
            });
            
            Utils.dom.on(link, 'mouseleave', () => {
                Utils.animation.animate(link, [
                    { transform: 'scale(1.1) rotate(5deg)' },
                    { transform: 'scale(1) rotate(0deg)' }
                ], { duration: 200, fill: 'forwards' });
            });
        });
    },
    

    
    // Retry loading content
    async retryLoad(appName) {
        // Clear cache for this app
        this.cache.delete(appName);
        
        try {
            await this.loadContent(appName);
        } catch (error) {
            Utils.logger.error(`Retry failed for ${appName}:`, error);
        }
    },
    
    // Preload all content
    async preloadAll() {
        const apps = ['about', 'projects', 'resume', 'contact'];
        const promises = apps.map(app => this.loadContent(app).catch(error => {
            Utils.logger.warn(`Failed to preload ${app}:`, error);
        }));
        
        await Promise.all(promises);
        Utils.logger.info('Content preloading completed');
    },
    
    // Clear cache
    clearCache() {
        this.cache.clear();
        Utils.logger.info('Content cache cleared');
    },
    
    // Get cache info
    getCacheInfo() {
        return {
            size: this.cache.size,
            items: Array.from(this.cache.keys())
        };
    }
};

// Global access
window.ContentLoader = ContentLoader; // Contact Form Handler
const ContactFormHandler = {
    // Initialize form handling
    init() {
        const form = Utils.dom.get('contact-form');
        if (!form) return;
        
        // Set up form submission
        Utils.dom.on(form, 'submit', this.handleSubmit.bind(this));
        
        // Set up real-time validation
        this.setupValidation(form);
        
        // Set up character counter
        this.setupCharacterCounter();
        
        Utils.logger.debug('Contact form initialized');
    },
    
    // Handle form submission
    async handleSubmit(e) {
        e.preventDefault();
        
        const form = e.target;
        const formData = new FormData(form);
        const data = Object.fromEntries(formData.entries());
        
        // Validate form
        if (!this.validateForm(data)) {
            this.showMessage('Please fix the errors above.', 'error');
            return;
        }
        
        // Show loading state
        const submitBtn = form.querySelector('.submit-btn');
        const originalText = submitBtn.innerHTML;
        
        submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Sending...';
        submitBtn.disabled = true;
        
        try {
            // Simulate API call
            await Utils.time.wait(Config.contact.submitDelay);
            
            // Show success
            this.showMessage('Message sent successfully! I\'ll get back to you soon.', 'success');
            form.reset();
            
            // Reset character counter
            const charCount = Utils.dom.get('char-count');
            if (charCount) charCount.textContent = '0';
            
        } catch (error) {
            this.showMessage('Failed to send message. Please try again.', 'error');
            Utils.logger.error('Form submission error:', error);
        } finally {
            // Reset button
            setTimeout(() => {
                submitBtn.innerHTML = originalText;
                submitBtn.disabled = false;
            }, 2000);
        }
    },
    
    // Set up form validation
    setupValidation(form) {
        const inputs = form.querySelectorAll('input, textarea');
        
        inputs.forEach(input => {
            // Validate on blur
            Utils.dom.on(input, 'blur', () => {
                this.validateField(input);
            });
            
            // Clear errors on input
            Utils.dom.on(input, 'input', () => {
                this.clearFieldError(input);
            });
        });
    },
    
    // Set up character counter
    setupCharacterCounter() {
        const messageField = Utils.dom.get('message');
        const charCount = Utils.dom.get('char-count');
        
        if (messageField && charCount) {
            Utils.dom.on(messageField, 'input', () => {
                const length = messageField.value.length;
                charCount.textContent = length;
                
                const counter = charCount.parentElement;
                counter.classList.remove('warning', 'error');
                
                if (length > Config.contact.maxMessageLength * 0.8) {
                    counter.classList.add('warning');
                }
                if (length > Config.contact.maxMessageLength * 0.95) {
                    counter.classList.add('error');
                }
            });
        }
    },
    
    // Validate entire form
    validateForm(data) {
        let isValid = true;
        
        // Validate name
        if (!data.name || data.name.trim().length < 2) {
            this.showFieldError('name', 'Please enter your full name');
            isValid = false;
        }
        
        // Validate email
        if (!data.email || !this.isValidEmail(data.email)) {
            this.showFieldError('email', 'Please enter a valid email address');
            isValid = false;
        }
        
        // Validate subject
        if (!data.subject || data.subject.trim().length < 3) {
            this.showFieldError('subject', 'Please enter a subject');
            isValid = false;
        }
        
        // Validate message
        if (!data.message || data.message.trim().length < 10) {
            this.showFieldError('message', 'Please enter a message (at least 10 characters)');
            isValid = false;
        }
        
        if (data.message && data.message.length > Config.contact.maxMessageLength) {
            this.showFieldError('message', `Message too long (max ${Config.contact.maxMessageLength} characters)`);
            isValid = false;
        }
        
        return isValid;
    },
    
    // Validate individual field
    validateField(field) {
        const value = field.value.trim();
        
        switch (field.type) {
            case 'email':
                if (value && !this.isValidEmail(value)) {
                    this.showFieldError(field.id, 'Please enter a valid email address');
                    return false;
                }
                break;
            default:
                if (field.required && !value) {
                    this.showFieldError(field.id, 'This field is required');
                    return false;
                }
        }
        
        this.clearFieldError(field);
        return true;
    },
    
    // Show field error
    showFieldError(fieldId, message) {
        const field = Utils.dom.get(fieldId);
        const formGroup = field.closest('.form-group');
        const errorElement = formGroup.querySelector('.error-message');
        
        formGroup.classList.add('error');
        if (errorElement) {
            errorElement.textContent = message;
        }
    },
    
    // Clear field error
    clearFieldError(field) {
        const formGroup = field.closest('.form-group');
        formGroup.classList.remove('error');
    },
    
    // Show form message
    showMessage(message, type) {
        // Remove existing message
        const existingMessage = Utils.dom.query('.form-message');
        if (existingMessage) {
            existingMessage.remove();
        }
        
        // Create new message
        const messageElement = Utils.dom.create('div', {
            className: `form-message ${type}`
        }, message);
        
        // Insert at top of form
        const form = Utils.dom.get('contact-form');
        form.insertBefore(messageElement, form.firstChild);
        
        // Auto-hide after 5 seconds
        setTimeout(() => {
            if (messageElement.parentNode) {
                Utils.animation.fadeOut(messageElement, 300).addEventListener('finish', () => {
                    messageElement.remove();
                });
            }
        }, 5000);
    },
    
    // Email validation
    isValidEmail(email) {
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        return emailRegex.test(email);
    }
};

// Global access
window.ContactFormHandler = ContactFormHandler; // Settings functionality
class SettingsManager {
    constructor() {
        this.wallpapers = [
            { name: 'Greece', file: 'greece.webp' },
            { name: 'Game of Thrones', file: 'gameofthrones.webp' },
            { name: 'Colosseum', file: 'Colleseum.webp' },
            { name: 'Colosseum 2', file: 'Colluseum2.webp' },
            { name: 'Colosseum 3', file: 'Coluseum3.webp' },
            { name: 'Corfu Greece', file: 'CorfuGreece.webp' },
            { name: 'Corfu Greece 2', file: 'CorfuGreece2.webp' },
            { name: 'Rome', file: 'Rome.webp' },
            { name: 'Hawaii', file: 'Hawaii.webp' },
            { name: 'Croatia Beach', file: 'CroatiaBeach.webp' },
            { name: 'Colorado Springs', file: 'ColoradoSprings.webp' },
            { name: 'Ocean City MD', file: 'OceanCityMD.webp' }
        ];
        this.currentWallpaper = this.getDefaultWallpaper(); // Responsive default wallpaper
        this.init();
    }

    getDefaultWallpaper() {
        // Detect if mobile device
        const isMobile = window.innerWidth <= 768 || 
                        /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
        
        // Return appropriate default wallpaper
        return isMobile ? 'CorfuGreece.webp' : 'ColoradoSprings.webp';
    }

    init() {
        this.loadWallpapers();
        this.bindEvents();
    }

    loadWallpapers() {
        const wallpaperGrid = document.getElementById('wallpaper-grid');
        if (!wallpaperGrid) return;

        // Set up the grid with fixed dimensions to prevent layout shifts
        wallpaperGrid.style.display = 'grid';
        wallpaperGrid.style.gridTemplateColumns = 'repeat(auto-fit, minmax(140px, 1fr))';
        wallpaperGrid.style.gap = '15px';
        wallpaperGrid.style.padding = '20px';
        wallpaperGrid.style.minHeight = '400px';
        wallpaperGrid.style.contain = 'layout style paint';
        wallpaperGrid.className = 'wallpaper-grid';

        wallpaperGrid.innerHTML = '';

        this.wallpapers.forEach(wallpaper => {
            const wallpaperOption = document.createElement('div');
            wallpaperOption.className = 'wallpaper-option';
            wallpaperOption.dataset.wallpaper = wallpaper.file;
            
            // Set fixed dimensions immediately to prevent shifts
            wallpaperOption.style.width = '140px';
            wallpaperOption.style.minHeight = '120px';
            wallpaperOption.style.maxHeight = '120px';
            wallpaperOption.style.contain = 'layout style paint';
            wallpaperOption.style.boxSizing = 'border-box';
            
            // Check if this is the current wallpaper
            if (wallpaper.file === this.currentWallpaper) {
                wallpaperOption.classList.add('selected');
            }

            // Use placeholder first, load actual image lazily with progressive loading
            const placeholder = Utils.ProgressiveImageLoader.createPlaceholder(120, 80, '#f0f0f0');
            
            wallpaperOption.innerHTML = `
                <img src="${placeholder}" 
                     data-src="images/wallpapers/${wallpaper.file}" 
                     alt="${wallpaper.name}" 
                     class="wallpaper-preview lazy-load"
                     width="120" 
                     height="80"
                     style="width: 120px !important; height: 80px !important; flex-shrink: 0; display: block;"
                     loading="lazy">
                <div class="wallpaper-name" style="height: 16px; line-height: 16px; overflow: hidden;">${wallpaper.name}</div>
            `;

            wallpaperOption.addEventListener('click', () => {
                this.selectWallpaper(wallpaper.file);
            });

            wallpaperGrid.appendChild(wallpaperOption);
        });

        // Initialize progressive lazy loading
        this.initProgressiveLazyLoading();
    }

    initProgressiveLazyLoading() {
        // Use Intersection Observer for lazy loading with progressive enhancement
        if ('IntersectionObserver' in window) {
            const lazyImageObserver = new IntersectionObserver((entries, observer) => {
                entries.forEach(entry => {
                    if (entry.isIntersecting) {
                        const img = entry.target;
                        const highResSrc = img.dataset.src;
                        
                        // Use progressive loading if network allows
                        if (Utils.NetworkMonitor.shouldUseHighQualityImages()) {
                            Utils.ProgressiveImageLoader.loadImageProgressive(img, highResSrc, {
                                onComplete: () => {
                                    img.classList.remove('lazy-load');
                                    observer.unobserve(img);
                                },
                                onError: () => {
                                    console.warn('Failed to load wallpaper preview:', highResSrc);
                                    observer.unobserve(img);
                                }
                            });
                        } else {
                            // For slow connections, use a simpler approach
                            img.src = highResSrc;
                            img.classList.remove('lazy-load');
                            observer.unobserve(img);
                        }
                    }
                });
            }, {
                // Load images when they're 200px from viewport (increased buffer for slow connections)
                rootMargin: '200px'
            });

            document.querySelectorAll('.lazy-load').forEach(img => {
                lazyImageObserver.observe(img);
            });
        } else {
            // Fallback for browsers without Intersection Observer
            this.fallbackLazyLoad();
        }
    }

    fallbackLazyLoad() {
        // Simple fallback that loads images on scroll or after a delay
        const loadImagesOnScroll = () => {
            const lazyImages = document.querySelectorAll('.lazy-load');
            lazyImages.forEach(img => {
                const rect = img.getBoundingClientRect();
                if (rect.top < window.innerHeight && rect.bottom > 0) {
                    img.src = img.dataset.src;
                    img.classList.remove('lazy-load');
                }
            });
        };

        // Load images on scroll
        window.addEventListener('scroll', loadImagesOnScroll, { passive: true });
        
        // Also load images after a delay (for settings window)
        setTimeout(loadImagesOnScroll, 1000);
    }

    selectWallpaper(wallpaperFile) {
        // Update visual selection
        const allOptions = document.querySelectorAll('.wallpaper-option');
        allOptions.forEach(option => option.classList.remove('selected'));
        
        const selectedOption = document.querySelector(`[data-wallpaper="${wallpaperFile}"]`);
        if (selectedOption) {
            selectedOption.classList.add('selected');
        }

        // Update desktop background
        this.changeDesktopBackground(wallpaperFile);
        
        // Store current selection
        this.currentWallpaper = wallpaperFile;
        this.saveWallpaperPreference(wallpaperFile);
    }

    changeDesktopBackground(wallpaperFile) {
        const desktop = document.getElementById('desktop');
        if (desktop) {
            desktop.style.backgroundImage = `url('images/wallpapers/${wallpaperFile}')`;
        }
    }

    saveWallpaperPreference(wallpaperFile) {
        // Save to localStorage for persistence
        try {
            localStorage.setItem('selectedWallpaper', wallpaperFile);
        } catch (e) {
            console.log('Could not save wallpaper preference:', e);
        }
    }

    loadWallpaperPreference() {
        // Load from localStorage
        try {
            const saved = localStorage.getItem('selectedWallpaper');
            if (saved && this.wallpapers.some(w => w.file === saved)) {
                this.currentWallpaper = saved;
                this.changeDesktopBackground(saved);
            } else {
                // No saved preference, use responsive default
                this.currentWallpaper = this.getDefaultWallpaper();
                this.changeDesktopBackground(this.currentWallpaper);
            }
        } catch (e) {
            console.log('Could not load wallpaper preference:', e);
            // Fallback to responsive default
            this.currentWallpaper = this.getDefaultWallpaper();
            this.changeDesktopBackground(this.currentWallpaper);
        }
    }

    // Method to dynamically detect new wallpapers
    async refreshWallpapers() {
        try {
            // This would need a server endpoint to list files
            // For now, we'll manually manage the list
            this.loadWallpapers();
        } catch (e) {
            console.log('Could not refresh wallpapers:', e);
        }
    }

    bindEvents() {
        // Handle settings window opening
        document.addEventListener('click', (e) => {
            if (e.target.closest('[data-app="settings"]')) {
                this.loadWallpapers(); // Refresh wallpapers when opening settings
            }
        });
    }

    // Method to add new wallpapers programmatically
    addWallpaper(name, filename) {
        this.wallpapers.push({ name: name, file: filename });
        this.loadWallpapers();
    }
}

// Initialize settings manager when DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
    const settingsManager = new SettingsManager();
    
    // Load saved wallpaper preference
    settingsManager.loadWallpaperPreference();
    
    // Make it globally accessible for debugging
    window.settingsManager = settingsManager;
});

// Export for potential use in other modules
if (typeof module !== 'undefined' && module.exports) {
    module.exports = SettingsManager;
} // Animations Manager Module
const AnimationsManager = {
    activeAnimations: new Set(),
    
    // Initialize animations system
    init() {
        this.setupAnimationHelpers();
        Utils.logger.debug('Animations Manager initialized');
    },
    
    // Set up animation helpers
    setupAnimationHelpers() {
        // Track active animations
        this.interceptAnimations();
    },
    
    // Intercept and track animations
    interceptAnimations() {
        const originalAnimate = Element.prototype.animate;
        
        Element.prototype.animate = function(keyframes, options) {
            const animation = originalAnimate.call(this, keyframes, options);
            
            AnimationsManager.activeAnimations.add(animation);
            
            animation.addEventListener('finish', () => {
                AnimationsManager.activeAnimations.delete(animation);
            });
            
            animation.addEventListener('cancel', () => {
                AnimationsManager.activeAnimations.delete(animation);
            });
            
            return animation;
        };
    },
    
    // Cancel all animations
    cancelAll() {
        this.activeAnimations.forEach(animation => {
            animation.cancel();
        });
        this.activeAnimations.clear();
    },
    
    // Get active animation count
    getActiveCount() {
        return this.activeAnimations.size;
    }
};

// Global access
window.AnimationsManager = AnimationsManager; // Mobile Interface Handler for iPhone-style Experience
const MobileInterface = {
    // State management
    state: {
        isMobile: false,
        isInitialized: false,
        currentView: 'home',
        currentWallpaper: null,
        availableWallpapers: [
            { name: 'Default Gradient', file: null },
            { name: 'Greece', file: 'images/wallpapers/greece.webp' },
            { name: 'Game of Thrones', file: 'images/wallpapers/gameofthrones.webp' },
            { name: 'Colosseum', file: 'images/wallpapers/Colleseum.webp' },
            { name: 'Colosseum 2', file: 'images/wallpapers/Colluseum2.webp' },
            { name: 'Colosseum 3', file: 'images/wallpapers/Coluseum3.webp' },
            { name: 'Corfu Greece', file: 'images/wallpapers/CorfuGreece.webp' },
            { name: 'Corfu Greece 2', file: 'images/wallpapers/CorfuGreece2.webp' },
            { name: 'Rome', file: 'images/wallpapers/Rome.webp' },
            { name: 'Hawaii', file: 'images/wallpapers/Hawaii.webp' },
            { name: 'Croatia Beach', file: 'images/wallpapers/CroatiaBeach.webp' },
            { name: 'Colorado Springs', file: 'images/wallpapers/ColoradoSprings.webp' },
            { name: 'Ocean City MD', file: 'images/wallpapers/OceanCityMD.webp' }
        ],
        activeDropdown: null,
        batteryLevel: 84,
        batteryTimeRemaining: '6:42',
        wifiStrength: 3,
        connectedNetwork: 'KevinPlumlee_5G'
    },
    
    // Initialize mobile interface
    init() {
        this.detectMobileDevice();
                if (this.state.isMobile) {
            this.setupMobileInterface();
            this.setupMobileEventListeners();
            this.updateMobileTime();
            this.loadSavedWallpaper();
            this.state.isInitialized = true;
            
            // Double-check that mobile interface is visible
            setTimeout(() => {
                const homeScreen = Utils.dom.get('mobile-home-screen');
                const computedStyle = window.getComputedStyle(homeScreen);
                console.log('📱 Mobile home screen visibility check:', {
                    display: computedStyle.display,
                    visibility: computedStyle.visibility,
                    opacity: computedStyle.opacity,
                    zIndex: computedStyle.zIndex
                });
                
                if (computedStyle.display === 'none') {
                    console.warn('⚠️ Mobile home screen is hidden, forcing visibility...');
                    homeScreen.style.display = 'block';
                    homeScreen.style.visibility = 'visible';
                    homeScreen.style.opacity = '1';
                }
            }, 500);
            
            console.log('✅ Mobile interface initialized successfully');
        } else {
            console.log('🖥️ Desktop interface active - no mobile setup needed');
        }
    },
    
    // Detect if device is mobile
    detectMobileDevice() {
        const isMobileSize = window.innerWidth <= 680;
        const isTouchDevice = 'ontouchstart' in window || navigator.maxTouchPoints > 0;
        const isMobileUserAgent = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
        
        // Use size OR user agent for better detection
        this.state.isMobile = isMobileSize || (isMobileUserAgent && window.innerWidth <= 1024);
        
        // Update body class for mobile styling
        if (this.state.isMobile) {
            document.body.classList.add('mobile-interface');
            console.log('🔧 Mobile interface activated');
        } else {
            document.body.classList.remove('mobile-interface');
            console.log('🖥️ Desktop interface activated');
        }
        
        console.log('📱 Mobile detection:', {
            screenWidth: window.innerWidth,
            screenHeight: window.innerHeight,
            isMobileSize,
            isTouchDevice,
            isMobileUserAgent,
            finalDecision: this.state.isMobile
        });
    },
    
    // Setup mobile interface elements
    setupMobileInterface() {
        console.log('🔧 Setting up mobile interface...');
        
        // Show mobile home screen
        const mobileHomeScreen = Utils.dom.get('mobile-home-screen');
        if (mobileHomeScreen) {
            mobileHomeScreen.style.display = 'block';
            console.log('✅ Mobile home screen shown');
        } else {
            console.error('❌ Mobile home screen not found');
        }
        
        // Hide desktop elements
        const desktop = Utils.dom.get('desktop');
        const menuBar = Utils.dom.query('.menu-bar');
        const dock = Utils.dom.query('.dock');
        
        if (desktop) {
            desktop.style.display = 'none';
            console.log('✅ Desktop hidden');
        }
        if (menuBar) {
            menuBar.style.display = 'none';
            console.log('✅ Menu bar hidden');
        }
        if (dock) {
            dock.style.display = 'none';
            console.log('✅ Dock hidden');
        }
        
        // Update viewport for mobile
        this.updateViewportMeta();
        
        // Prevent zoom on input focus (iOS Safari)
        this.preventInputZoom();
        
        // Force body styling
        document.body.style.overflow = 'hidden';
        document.body.style.height = '100vh';
        document.body.style.width = '100vw';
        
        console.log('✅ Mobile interface setup complete');
    },
    
    // Setup mobile event listeners
    setupMobileEventListeners() {
        console.log('📱 Setting up mobile event listeners');
        
        // iPhone app click handlers
        const iphoneApps = Utils.dom.queryAll('.iphone-app');
        iphoneApps.forEach(app => {
            Utils.dom.on(app, 'click', (e) => {
                e.preventDefault();
                this.handleAppClick(app.dataset.app);
            });
            
            // Add touch feedback
            Utils.dom.on(app, 'touchstart', () => {
                app.style.transform = 'scale(0.95)';
            });
            
            Utils.dom.on(app, 'touchend', () => {
                setTimeout(() => {
                    app.style.transform = 'scale(1)';
                }, 150);
            });
        });
        
        // iPhone back button handlers
        const backButtons = Utils.dom.queryAll('.iphone-back-button');
        backButtons.forEach(button => {
            Utils.dom.on(button, 'click', (e) => {
                e.preventDefault();
                this.handleBackButton();
            });
        });
        
        // Window resize handler
        Utils.dom.on(window, 'resize', () => {
            this.handleResize();
        });
        
        // Orientation change handler
        Utils.dom.on(window, 'orientationchange', () => {
            setTimeout(() => {
                this.handleOrientationChange();
            }, 100);
        });
        
        // Prevent default touch behaviors that might interfere
        Utils.dom.on(document, 'touchmove', (e) => {
            // Allow scrolling within scrollable containers
            const target = e.target;
            const scrollableParent = target.closest('.window-content, .mobile-home-screen');
            if (!scrollableParent) {
                e.preventDefault();
            }
        }, { passive: false });
        
        // Add long-press gesture to change wallpaper on home screen
        this.setupWallpaperGesture();
        
        // Setup mobile status bar interactions (new dropdown functionality)
        this.setupMobileStatusBarListeners();
        
        // Close dropdowns when clicking outside
        document.addEventListener('click', (e) => {
            if (!e.target.closest('.mobile-dropdown') && !e.target.closest('.status-right')) {
                this.closeMobileDropdowns();
            }
        });
    },
    
    // Setup wallpaper gesture
    setupWallpaperGesture() {
        const homeScreen = Utils.dom.get('mobile-home-screen');
        if (!homeScreen) return;
        
        let longPressTimer;
        let startTouch = null;
        let isLongPressing = false;
        
        // Improved touch start handler
        const handleTouchStart = (e) => {
            // Only on background touches, not on apps
            if (e.target.closest('.iphone-app, .iphone-profile-card')) {
                return;
            }
            
            console.log('🎯 Touch start detected for wallpaper gesture');
            
            startTouch = {
                x: e.touches[0].clientX,
                y: e.touches[0].clientY,
                time: Date.now()
            };
            
            isLongPressing = false;
            
            longPressTimer = setTimeout(() => {
                console.log('⏰ Long press detected, cycling wallpaper');
                isLongPressing = true;
                
                // Haptic feedback if available
                if (navigator.vibrate) {
                    navigator.vibrate(50);
                }
                
                this.cycleWallpaper();
            }, 600); // Reduced from 800ms to 600ms for better responsiveness
        };
        
        // Improved touch move handler
        const handleTouchMove = (e) => {
            if (!startTouch || isLongPressing) return;
            
            const currentTouch = {
                x: e.touches[0].clientX,
                y: e.touches[0].clientY
            };
            
            const distance = Math.sqrt(
                Math.pow(currentTouch.x - startTouch.x, 2) + 
                Math.pow(currentTouch.y - startTouch.y, 2)
            );
            
            // Cancel long press if moved too much
            if (distance > 15) { // Increased threshold for better touch tolerance
                console.log('👆 Touch moved too much, cancelling long press');
                clearTimeout(longPressTimer);
                startTouch = null;
            }
        };
        
        // Improved touch end handler
        const handleTouchEnd = (e) => {
            clearTimeout(longPressTimer);
            
            if (isLongPressing) {
                console.log('✅ Long press completed');
                e.preventDefault();
                e.stopPropagation();
            }
            
            startTouch = null;
            isLongPressing = false;
        };
        
        // Remove existing listeners first
        homeScreen.removeEventListener('touchstart', this.boundTouchStart);
        homeScreen.removeEventListener('touchmove', this.boundTouchMove);
        homeScreen.removeEventListener('touchend', this.boundTouchEnd);
        
        // Bind the handlers to this context
        this.boundTouchStart = handleTouchStart.bind(this);
        this.boundTouchMove = handleTouchMove.bind(this);
        this.boundTouchEnd = handleTouchEnd.bind(this);
        
        // Add event listeners with optimized passive options
        homeScreen.addEventListener('touchstart', this.boundTouchStart, { passive: true });
        homeScreen.addEventListener('touchmove', this.boundTouchMove, { passive: true });
        homeScreen.addEventListener('touchend', this.boundTouchEnd, { passive: false }); // Only touchend needs to prevent default
        
        console.log('✅ Mobile wallpaper gesture setup complete');
    },
    
    // Handle app clicks
    handleAppClick(appName) {
        if (!appName) return;
        
        Utils.logger.debug(`Mobile app clicked: ${appName}`);
        
        // Handle special apps
        switch (appName) {
            case 'linkedin':
                window.open('https://linkedin.com/in/kevinplumlee', '_blank');
                break;
            case 'unlock-health':
                window.open('https://unlockhealth.com', '_blank');
                break;
            case 'settings':
                // Handle settings with mobile wallpaper options
                this.openSettingsApp();
                break;
            default:
                // Handle regular app windows
                this.openMobileApp(appName);
        }
    },
    
    // Open mobile app (full screen)
    async openMobileApp(appName) {
        const window = Utils.dom.get(`${appName}-window`);
        if (!window) {
            Utils.logger.warn(`Window not found: ${appName}`);
            return;
        }
        
        try {
            // Load content first
            await ContentLoader.loadContent(appName);
            
            // Show the window with mobile animation
            this.showMobileWindow(window, appName);
            
            // Update state
            this.state.currentView = appName;
            
            // Hide home screen
            const homeScreen = Utils.dom.get('mobile-home-screen');
            if (homeScreen) {
                homeScreen.style.display = 'none';
            }
            
        } catch (error) {
            Utils.logger.error(`Failed to open mobile app ${appName}:`, error);
        }
    },
    
    // Show mobile window with animation
    showMobileWindow(window, appName) {
        // Remove any existing open windows
        Utils.dom.queryAll('.window').forEach(w => {
            w.classList.remove('open', 'active');
            w.style.transform = 'translateX(100%)';
        });
        
        // Show the new window
        window.classList.add('open', 'active');
        
        // Animate in from right
        window.style.transform = 'translateX(100%)';
        setTimeout(() => {
            window.style.transform = 'translateX(0)';
        }, 10);
        
        // Ensure content is scrollable
        setTimeout(() => {
            this.ensureContentScrollable(window);
        }, 300);
    },
    
    // Ensure window content is scrollable
    ensureContentScrollable(window) {
        const content = window.querySelector('.window-content');
        if (content) {
            content.style.overflowY = 'auto';
            content.style.height = 'calc(100vh - 60px)';
            content.scrollTop = 0;
        }
    },
    
    // Handle back button
    handleBackButton() {
        const activeWindow = Utils.dom.query('.window.active');
        if (activeWindow) {
            // Animate out to right
            activeWindow.style.transform = 'translateX(100%)';
            
            setTimeout(() => {
                activeWindow.classList.remove('open', 'active');
                
                // Show home screen
                const homeScreen = Utils.dom.get('mobile-home-screen');
                if (homeScreen) {
                    homeScreen.style.display = 'block';
                }
                
                this.state.currentView = 'home';
            }, 300);
        }
    },
    
    // Handle window resize
    handleResize() {
        const wasMobile = this.state.isMobile;
        this.detectMobileDevice();
        
        // If mobile state changed, reinitialize
        if (wasMobile !== this.state.isMobile) {
            if (this.state.isMobile) {
                this.setupMobileInterface();
            } else {
                this.teardownMobileInterface();
            }
        }
    },
    
    // Handle orientation change
    handleOrientationChange() {
        if (this.state.isMobile) {
            // Force a resize check
            setTimeout(() => {
                this.handleResize();
                this.updateMobileViewport();
            }, 200);
        }
    },
    
    // Update mobile viewport
    updateMobileViewport() {
        // Force viewport recalculation
        const viewport = document.querySelector('meta[name="viewport"]');
        if (viewport) {
            const content = viewport.getAttribute('content');
            viewport.setAttribute('content', content + ', user-scalable=no');
            setTimeout(() => {
                viewport.setAttribute('content', content);
            }, 10);
        }
    },
    
    // Teardown mobile interface
    teardownMobileInterface() {
        // Hide mobile home screen
        const mobileHomeScreen = Utils.dom.get('mobile-home-screen');
        if (mobileHomeScreen) {
            mobileHomeScreen.style.display = 'none';
        }
        
        // Show desktop elements
        const desktop = Utils.dom.get('desktop');
        const menuBar = Utils.dom.query('.menu-bar');
        const dock = Utils.dom.query('.dock');
        
        if (desktop) desktop.style.display = 'block';
        if (menuBar) menuBar.style.display = 'flex';
        if (dock) dock.style.display = 'flex';
        
        // Close any open windows
        Utils.dom.queryAll('.window').forEach(window => {
            window.classList.remove('open', 'active');
            window.style.transform = '';
        });
        
        this.state.currentView = 'home';
    },
    
    // Update mobile time display
    updateMobileTime() {
        const updateTime = () => {
            const mobileTimeEl = Utils.dom.get('mobile-time');
            if (mobileTimeEl && this.state.isMobile) {
                const now = new Date();
                const timeString = now.toLocaleTimeString('en-US', {
                    hour: 'numeric',
                    minute: '2-digit',
                    hour12: true
                });
                mobileTimeEl.textContent = timeString;
            }
            
            // Update detailed time if dropdown is open
            if (this.state.activeDropdown === 'time') {
                this.updateMobileDetailedTime();
            }
        };
        
        updateTime();
        setInterval(updateTime, 1000);
    },
    
    // Update viewport meta tag for mobile
    updateViewportMeta() {
        let viewport = document.querySelector('meta[name="viewport"]');
        if (!viewport) {
            viewport = document.createElement('meta');
            viewport.name = 'viewport';
            document.head.appendChild(viewport);
        }
        
        viewport.content = 'width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no, viewport-fit=cover';
    },
    
    // Prevent input zoom on iOS
    preventInputZoom() {
        const inputs = Utils.dom.queryAll('input, textarea, select');
        inputs.forEach(input => {
            if (input.style.fontSize === '' || parseFloat(input.style.fontSize) < 16) {
                input.style.fontSize = '16px';
            }
        });
    },
    
    // Public API methods
    isMobileView() {
        return this.state.isMobile;
    },
    
    getCurrentView() {
        return this.state.currentView;
    },
    
    // Force mobile mode (for testing)
    forceMobileMode(enabled = true) {
        this.state.isMobile = enabled;
        if (enabled) {
            this.setupMobileInterface();
            this.setupMobileEventListeners();
        } else {
            this.teardownMobileInterface();
        }
    },
    
    // Wallpaper management
    loadSavedWallpaper() {
        if (this.state.isMobile) {
            console.log('🎨 Loading saved wallpaper...');
            const savedWallpaper = localStorage.getItem('mobile-wallpaper');
            console.log('🎨 Saved wallpaper from storage:', savedWallpaper);
            
            if (savedWallpaper) {
                const wallpaper = this.state.availableWallpapers.find(w => w.file === savedWallpaper);
                if (wallpaper) {
                    console.log('🎨 Found saved wallpaper:', wallpaper.name);
                    this.setWallpaper(wallpaper);
                } else {
                    console.log('🎨 Saved wallpaper not found in available wallpapers, using random');
                    this.setRandomWallpaper();
                }
            } else {
                console.log('🎨 No saved wallpaper, setting random');
                this.setRandomWallpaper();
            }
        }
    },
    
    setRandomWallpaper() {
        // Set a random wallpaper by default (excluding the first one which is "Default Gradient")
        const randomIndex = Math.floor(Math.random() * (this.state.availableWallpapers.length - 1)) + 1;
        const randomWallpaper = this.state.availableWallpapers[randomIndex];
        console.log('🎨 Setting random wallpaper:', randomWallpaper.name);
        this.setWallpaper(randomWallpaper);
    },
    
    setWallpaper(wallpaper) {
        if (!this.state.isMobile) return;
        
        this.state.currentWallpaper = wallpaper;
        
        console.log(`🎨 Setting wallpaper: ${wallpaper.name}`, wallpaper);
        
        if (wallpaper.file) {
            // Set wallpaper background on body with !important to override any other styles
            document.body.style.setProperty('background-image', `url('${wallpaper.file}')`, 'important');
            document.body.style.setProperty('background-size', 'cover', 'important');
            document.body.style.setProperty('background-position', 'center', 'important');
            document.body.style.setProperty('background-repeat', 'no-repeat', 'important');
            document.body.style.setProperty('background-attachment', 'fixed', 'important');
            
            // Add the wallpaper class
            document.body.classList.add('has-wallpaper');
            
            // Force re-render by toggling a class
            document.body.classList.remove('wallpaper-refresh');
            setTimeout(() => {
                document.body.classList.add('wallpaper-refresh');
            }, 10);
            
            // Save to localStorage
            localStorage.setItem('mobile-wallpaper', wallpaper.file);
            
            console.log(`✅ Wallpaper set: ${wallpaper.name} (${wallpaper.file})`);
        } else {
            // Use default gradient
            document.body.style.removeProperty('background-image');
            document.body.style.removeProperty('background-size');
            document.body.style.removeProperty('background-position');
            document.body.style.removeProperty('background-repeat');
            document.body.style.removeProperty('background-attachment');
            document.body.classList.remove('has-wallpaper');
            localStorage.removeItem('mobile-wallpaper');
            
            console.log('✅ Wallpaper reset to default gradient');
        }
        
        // Force a visual update and verify
        setTimeout(() => {
            const hasWallpaper = document.body.classList.contains('has-wallpaper');
            const backgroundImage = getComputedStyle(document.body).backgroundImage;
            const bodyClassList = Array.from(document.body.classList);
            
            console.log('🎨 Wallpaper verification:', {
                hasWallpaperClass: hasWallpaper,
                computedBackgroundImage: backgroundImage,
                wallpaperName: wallpaper.name,
                bodyClasses: bodyClassList,
                isMobile: this.state.isMobile
            });
            
            // Double-check that the wallpaper is actually visible
            if (wallpaper.file && backgroundImage === 'none') {
                console.warn('⚠️ Wallpaper not applied correctly, retrying...');
                // Try again with a different approach
                document.body.style.background = `url('${wallpaper.file}') center/cover no-repeat fixed`;
            }
        }, 200);
    },
    
    getAvailableWallpapers() {
        return this.state.availableWallpapers;
    },
    
    getCurrentWallpaper() {
        return this.state.currentWallpaper;
    },
    
    cycleWallpaper() {
        if (!this.state.isMobile) return;
        
        const currentIndex = this.state.availableWallpapers.findIndex(w => w === this.state.currentWallpaper);
        const nextIndex = (currentIndex + 1) % this.state.availableWallpapers.length;
        const nextWallpaper = this.state.availableWallpapers[nextIndex];
        
        this.setWallpaper(nextWallpaper);
        
        // Show wallpaper change notification
        this.showWallpaperNotification(nextWallpaper.name);
    },
    
    showWallpaperNotification(wallpaperName) {
        // Create temporary notification
        const notification = document.createElement('div');
        notification.style.cssText = `
            position: fixed;
            top: 80px;
            left: 50%;
            transform: translateX(-50%);
            background: rgba(0, 0, 0, 0.8);
            color: white;
            padding: 12px 20px;
            border-radius: 25px;
            font-size: 14px;
            font-weight: 500;
            z-index: 10000;
            backdrop-filter: blur(10px);
            transition: opacity 0.3s ease;
        `;
        notification.textContent = `Wallpaper: ${wallpaperName}`;
        
        document.body.appendChild(notification);
        
        // Fade out and remove
        setTimeout(() => {
            notification.style.opacity = '0';
            setTimeout(() => {
                if (notification.parentNode) {
                    notification.remove();
                }
            }, 300);
        }, 2000);
    },
    
    // Open settings app with mobile wallpaper options
    async openSettingsApp() {
        try {
            // Load the settings content first (this will load desktop settings)
            await ContentLoader.loadContent('settings');
            
            // Show the window with mobile animation
            const window = Utils.dom.get('settings-window');
            if (window) {
                this.showMobileWindow(window, 'settings');
                
                // Update state
                this.state.currentView = 'settings';
                
                // Hide home screen
                const homeScreen = Utils.dom.get('mobile-home-screen');
                if (homeScreen) {
                    homeScreen.style.display = 'none';
                }
            }
            
            // Show mobile settings section after a short delay
            setTimeout(() => {
                this.setupMobileSettings();
            }, 300);
            
        } catch (error) {
            Utils.logger.error('Failed to open settings app:', error);
        }
    },
    
    // Setup mobile settings content
    setupMobileSettings() {
        if (!this.state.isMobile) return;
        
        // Get the settings content container
        const settingsContent = document.getElementById('settings-content');
        if (!settingsContent) return;
        
        // Clear existing content
        settingsContent.innerHTML = '';
        
        // Create mobile-specific settings content
        const mobileSettingsHTML = `
            <div class="settings-section mobile-only">
                <h3>Mobile Background</h3>
                <p>Select a wallpaper for your mobile experience:</p>
                <div class="mobile-wallpaper-grid" id="mobile-wallpaper-grid">
                    <!-- Mobile wallpapers will be loaded dynamically -->
                </div>
                <div class="settings-tip">
                    <i class="fas fa-info-circle"></i>
                    <span>Tip: Long-press on the home screen to cycle through wallpapers</span>
                </div>
            </div>
        `;
        
        settingsContent.innerHTML = mobileSettingsHTML;
        
        // Populate wallpaper grid
        this.populateMobileWallpaperGrid();
    },
    
    // Populate mobile wallpaper grid
    populateMobileWallpaperGrid() {
        const grid = document.getElementById('mobile-wallpaper-grid');
        if (!grid) return;
        
        grid.innerHTML = '';
        
        this.state.availableWallpapers.forEach((wallpaper, index) => {
            const item = document.createElement('div');
            item.className = 'mobile-wallpaper-item';
            item.dataset.wallpaper = index;
            
            if (wallpaper.file) {
                item.style.backgroundImage = `url('${wallpaper.file}')`;
            } else {
                item.classList.add('gradient');
            }
            
            if (this.state.currentWallpaper === wallpaper) {
                item.classList.add('active');
            }
            
            const nameLabel = document.createElement('div');
            nameLabel.className = 'mobile-wallpaper-name';
            nameLabel.textContent = wallpaper.name;
            item.appendChild(nameLabel);
            
            item.addEventListener('click', () => {
                this.selectWallpaperFromSettings(wallpaper);
            });
            
            grid.appendChild(item);
        });
    },
    
    // Select wallpaper from settings
    selectWallpaperFromSettings(wallpaper) {
        this.setWallpaper(wallpaper);
        
        // Update active state in grid
        const grid = document.getElementById('mobile-wallpaper-grid');
        if (grid) {
            grid.querySelectorAll('.mobile-wallpaper-item').forEach(item => {
                item.classList.remove('active');
            });
            
            const activeItem = grid.querySelector(`[data-wallpaper="${this.state.availableWallpapers.indexOf(wallpaper)}"]`);
            if (activeItem) {
                activeItem.classList.add('active');
            }
        }
        
        // Show selection feedback
        this.showWallpaperNotification(`Selected: ${wallpaper.name}`);
    },

    // Setup mobile status bar listeners
    setupMobileStatusBarListeners() {
        if (!this.state.isMobile) return;

        console.log('📱 Setting up mobile status bar listeners');

        // Add a slight delay to ensure status bar elements are rendered
        setTimeout(() => {
            // WiFi icon click
            const wifiIcon = document.querySelector('.iphone-status-bar .fa-wifi');
            if (wifiIcon) {
                console.log('📶 WiFi icon found, adding click listener');
                wifiIcon.style.cursor = 'pointer';
                wifiIcon.addEventListener('click', (e) => {
                    e.stopPropagation();
                    console.log('📶 WiFi icon clicked');
                    this.toggleMobileDropdown('wifi');
                });
            } else {
                console.warn('📶 WiFi icon not found');
            }

            // Battery icon click
            const batteryIcon = document.querySelector('.iphone-status-bar .battery-icon');
            if (batteryIcon) {
                console.log('🔋 Battery icon found, adding click listener');
                batteryIcon.style.cursor = 'pointer';
                batteryIcon.addEventListener('click', (e) => {
                    e.stopPropagation();
                    console.log('🔋 Battery icon clicked');
                    this.toggleMobileDropdown('battery');
                });
            } else {
                console.warn('🔋 Battery icon not found');
            }

            // Time click
            const timeElement = document.querySelector('.iphone-status-bar #mobile-time');
            if (timeElement) {
                console.log('🕐 Time element found, adding click listener');
                timeElement.style.cursor = 'pointer';
                timeElement.addEventListener('click', (e) => {
                    e.stopPropagation();
                    console.log('🕐 Time element clicked');
                    this.toggleMobileDropdown('time');
                });
            } else {
                console.warn('🕐 Time element not found');
            }

            // Create mobile dropdowns after elements are confirmed to exist
            this.createMobileDropdowns();
        }, 100);
    },

    // Create mobile dropdown elements
    createMobileDropdowns() {
        const statusRight = document.querySelector('.iphone-status-bar .status-right');
        if (!statusRight) {
            console.error('iPhone status-right container not found - cannot create mobile dropdowns');
            return;
        }

        console.log('📱 Creating mobile dropdowns...');

        // Remove any existing dropdowns first
        statusRight.querySelectorAll('.mobile-dropdown').forEach(dropdown => dropdown.remove());

        // Time dropdown
        const timeDropdown = document.createElement('div');
        timeDropdown.id = 'mobile-time-dropdown';
        timeDropdown.className = 'mobile-dropdown';
        timeDropdown.innerHTML = this.getMobileTimeDropdownHTML();
        statusRight.appendChild(timeDropdown);

        // WiFi dropdown
        const wifiDropdown = document.createElement('div');
        wifiDropdown.id = 'mobile-wifi-dropdown';
        wifiDropdown.className = 'mobile-dropdown';
        wifiDropdown.innerHTML = this.getMobileWifiDropdownHTML();
        statusRight.appendChild(wifiDropdown);

        // Battery dropdown
        const batteryDropdown = document.createElement('div');
        batteryDropdown.id = 'mobile-battery-dropdown';
        batteryDropdown.className = 'mobile-dropdown';
        batteryDropdown.innerHTML = this.getMobileBatteryDropdownHTML();
        statusRight.appendChild(batteryDropdown);

        console.log('✅ Mobile dropdowns created:', {
            time: document.getElementById('mobile-time-dropdown'),
            wifi: document.getElementById('mobile-wifi-dropdown'),
            battery: document.getElementById('mobile-battery-dropdown')
        });
    },

    // Toggle mobile dropdown
    toggleMobileDropdown(type) {
        const dropdown = document.getElementById(`mobile-${type}-dropdown`);
        if (!dropdown) return;

        // Close other dropdowns
        this.closeMobileDropdowns(type);

        // Toggle current dropdown
        if (this.state.activeDropdown === type) {
            dropdown.classList.remove('show');
            this.state.activeDropdown = null;
        } else {
            dropdown.classList.add('show');
            this.state.activeDropdown = type;

            // Update content for specific dropdowns
            if (type === 'time') {
                this.updateMobileDetailedTime();
            } else if (type === 'battery') {
                this.updateMobileBatteryLevel();
            }
        }
    },

    // Close mobile dropdowns
    closeMobileDropdowns(except = null) {
        ['time', 'wifi', 'battery'].forEach(type => {
            if (type !== except) {
                const dropdown = document.getElementById(`mobile-${type}-dropdown`);
                if (dropdown) {
                    dropdown.classList.remove('show');
                }
            }
        });
        
        if (!except) {
            this.state.activeDropdown = null;
        }
    },

    // Get mobile time dropdown HTML
    getMobileTimeDropdownHTML() {
        return `
            <div class="mobile-dropdown-content">
                <div class="mobile-digital-clock">
                    <div class="mobile-time-display" id="mobile-detailed-time">12:00:00 PM</div>
                    <div class="mobile-date-display" id="mobile-detailed-date">Monday, January 1, 2024</div>
                </div>
                <div class="mobile-calendar-container">
                    <div class="mobile-calendar-header">
                        <button onclick="MobileInterface.previousMonth()">&lt;</button>
                        <span id="mobile-calendar-title">January 2024</span>
                        <button onclick="MobileInterface.nextMonth()">&gt;</button>
                    </div>
                    <div class="mobile-calendar-grid" id="mobile-calendar-grid">
                        <!-- Calendar will be populated dynamically -->
                    </div>
                </div>
            </div>
        `;
    },

    // Get mobile WiFi dropdown HTML
    getMobileWifiDropdownHTML() {
        const networks = [
            { name: "KevinPlumlee_5G", strength: 3, locked: false, connected: true },
            { name: "FBI Surveillance Van", strength: 2, locked: true, connected: false },
            { name: "404_Network_Unavailable", strength: 1, locked: true, connected: false },
            { name: "Pretty_Fly_For_A_WiFi", strength: 2, locked: true, connected: false },
            { name: "Loading...", strength: 1, locked: false, connected: false },
            { name: "It_Hurts_When_IP", strength: 3, locked: true, connected: false }
        ];

        let html = '<div class="mobile-dropdown-content"><div class="mobile-wifi-header">Wi-Fi Networks</div>';
        networks.forEach(network => {
            const bars = '▂▄▆'.substring(0, network.strength);
            const lockIcon = network.locked ? '🔒' : '';
            const checkIcon = network.connected ? '✓' : '';
            html += `
                <div class="mobile-wifi-network ${network.connected ? 'connected' : ''}" onclick="MobileInterface.connectToMobileWifi('${network.name}')">
                    <span class="mobile-network-name">${checkIcon} ${network.name} ${lockIcon}</span>
                    <span class="mobile-signal-strength">${bars}</span>
                </div>
            `;
        });
        html += '</div>';
        return html;
    },

    // Get mobile battery dropdown HTML
    getMobileBatteryDropdownHTML() {
        return `
            <div class="mobile-dropdown-content">
                <div class="mobile-battery-header">Battery Status</div>
                <div class="mobile-battery-visual">
                    <div class="mobile-battery-body">
                        <div class="mobile-battery-level" id="mobile-battery-fill"></div>
                    </div>
                    <div class="mobile-battery-tip"></div>
                </div>
                <div class="mobile-battery-info">
                    <div class="mobile-battery-percentage" id="mobile-battery-percent">${this.state.batteryLevel}%</div>
                    <div class="mobile-battery-time" id="mobile-battery-time">${this.state.batteryTimeRemaining} remaining</div>
                </div>
                <div class="mobile-battery-tips">
                    <div class="mobile-tip">💡 Tip: Your phone is powered by pure determination</div>
                    <div class="mobile-tip">⚡ Fun fact: This battery is 73% organic</div>
                    <div class="mobile-tip">🔋 Current mood: Electrically optimistic</div>
                </div>
                <button class="mobile-battery-saver" onclick="MobileInterface.toggleMobileBatterySaver()">
                    Enable Focus Mode
                </button>
            </div>
        `;
    },

    // Update mobile detailed time
    updateMobileDetailedTime() {
        const timeEl = document.getElementById('mobile-detailed-time');
        const dateEl = document.getElementById('mobile-detailed-date');
        if (timeEl && dateEl) {
            const now = new Date();
            timeEl.textContent = now.toLocaleTimeString('en-US', {
                hour12: true,
                hour: 'numeric',
                minute: '2-digit',
                second: '2-digit'
            });
            dateEl.textContent = now.toLocaleDateString('en-US', {
                weekday: 'long',
                year: 'numeric',
                month: 'long',
                day: 'numeric'
            });
        }
        this.updateMobileCalendar();
    },

    // Update mobile calendar
    updateMobileCalendar() {
        const grid = document.getElementById('mobile-calendar-grid');
        const title = document.getElementById('mobile-calendar-title');
        if (!grid || !title) return;

        const now = new Date();
        const currentMonth = now.getMonth();
        const currentYear = now.getFullYear();
        const currentDate = now.getDate();

        title.textContent = now.toLocaleDateString('en-US', { month: 'long', year: 'numeric' });

        // Clear grid
        grid.innerHTML = '';

        // Add day headers
        const dayHeaders = ['S', 'M', 'T', 'W', 'T', 'F', 'S'];
        const headerRow = document.createElement('div');
        headerRow.className = 'mobile-calendar-row';
        dayHeaders.forEach(day => {
            const header = document.createElement('div');
            header.className = 'mobile-calendar-day-header';
            header.textContent = day;
            headerRow.appendChild(header);
        });
        grid.appendChild(headerRow);

        // Get first day of month and number of days
        const firstDay = new Date(currentYear, currentMonth, 1).getDay();
        const daysInMonth = new Date(currentYear, currentMonth + 1, 0).getDate();

        // Add calendar days
        let dayCount = 1;
        const totalCells = Math.ceil((firstDay + daysInMonth) / 7) * 7;

        for (let week = 0; week < totalCells / 7; week++) {
            const weekRow = document.createElement('div');
            weekRow.className = 'mobile-calendar-row';

            for (let day = 0; day < 7; day++) {
                const dayCell = document.createElement('div');
                dayCell.className = 'mobile-calendar-day';
                
                const cellIndex = week * 7 + day;
                if (cellIndex >= firstDay && dayCount <= daysInMonth) {
                    dayCell.textContent = dayCount;
                    if (dayCount === currentDate) {
                        dayCell.classList.add('today');
                    }
                    dayCount++;
                } else {
                    dayCell.classList.add('empty');
                }
                
                weekRow.appendChild(dayCell);
            }
            grid.appendChild(weekRow);
        }
    },

    // Mobile WiFi connection handler
    connectToMobileWifi(networkName) {
        console.log(`📶 Connecting to mobile WiFi: ${networkName}`);
        
        // Update state
        this.state.connectedNetwork = networkName;
        
        // Show connection feedback
        this.showMobileNotification(`Connected to ${networkName}`);
        
        // Close dropdown
        this.closeMobileDropdowns();
        
        // Update WiFi dropdown to reflect new connection
        setTimeout(() => {
            const dropdown = document.getElementById('mobile-wifi-dropdown');
            if (dropdown) {
                dropdown.innerHTML = this.getMobileWifiDropdownHTML();
            }
        }, 500);
    },

    // Mobile battery saver toggle
    toggleMobileBatterySaver() {
        console.log('🔋 Toggling mobile battery saver mode');
        this.showMobileNotification('Focus Mode Enabled');
        this.closeMobileDropdowns();
    },

    // Show mobile notification
    showMobileNotification(message) {
        const notification = document.createElement('div');
        notification.className = 'mobile-notification';
        notification.style.cssText = `
            position: fixed;
            top: 80px;
            left: 50%;
            transform: translateX(-50%);
            background: rgba(0, 0, 0, 0.85);
            color: white;
            padding: 12px 20px;
            border-radius: 25px;
            font-size: 14px;
            font-weight: 500;
            z-index: 10001;
            backdrop-filter: blur(10px);
            transition: opacity 0.3s ease;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
        `;
        notification.textContent = message;
        
        document.body.appendChild(notification);
        
        // Fade out and remove
        setTimeout(() => {
            notification.style.opacity = '0';
            setTimeout(() => {
                if (notification.parentNode) {
                    notification.remove();
                }
            }, 300);
        }, 2000);
    },

    // Update mobile battery level visual
    updateMobileBatteryLevel() {
        const batteryFill = document.getElementById('mobile-battery-fill');
        const batteryPercent = document.getElementById('mobile-battery-percent');
        const batteryTime = document.getElementById('mobile-battery-time');
        
        if (batteryFill) {
            batteryFill.style.width = `${this.state.batteryLevel}%`;
        }
        if (batteryPercent) {
            batteryPercent.textContent = `${this.state.batteryLevel}%`;
        }
        if (batteryTime) {
            batteryTime.textContent = `${this.state.batteryTimeRemaining} remaining`;
        }
    },

    // Calendar navigation
    previousMonth() {
        // Implementation for calendar navigation
        console.log('📅 Previous month clicked');
    },

    nextMonth() {
        // Implementation for calendar navigation
        console.log('📅 Next month clicked');
    },
};

// Auto-initialize when DOM is ready
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
        console.log('📱 Initializing mobile interface on DOMContentLoaded');
        MobileInterface.init();
    });
} else {
    console.log('📱 Initializing mobile interface immediately');
    MobileInterface.init();
}

// Add manual triggers for testing
window.forceMobileInterface = function() {
    console.log('🔧 Forcing mobile interface...');
    document.body.classList.add('mobile-interface');
    MobileInterface.state.isMobile = true;
    MobileInterface.setupMobileInterface();
    MobileInterface.setupMobileEventListeners();
    MobileInterface.loadSavedWallpaper();
};

window.testWallpaper = function(wallpaperName) {
    const wallpaper = MobileInterface.state.availableWallpapers.find(w => 
        w.name.toLowerCase().includes(wallpaperName.toLowerCase())
    );
    if (wallpaper) {
        console.log('🎨 Testing wallpaper:', wallpaper.name);
        MobileInterface.setWallpaper(wallpaper);
    } else {
        console.log('❌ Wallpaper not found. Available:', 
            MobileInterface.state.availableWallpapers.map(w => w.name)
        );
    }
};

window.testRandomWallpaper = function() {
    console.log('🎲 Setting random wallpaper...');
    MobileInterface.setRandomWallpaper();
};

window.testLongPress = function() {
    console.log('🎯 Testing long press wallpaper cycle...');
    MobileInterface.cycleWallpaper();
};

window.debugMobileWallpaper = function() {
    console.log('🔍 Mobile wallpaper debug info:');
    console.log('- Is mobile:', MobileInterface.state.isMobile);
    console.log('- Current wallpaper:', MobileInterface.state.currentWallpaper);
    console.log('- Available wallpapers:', MobileInterface.state.availableWallpapers);
    console.log('- Body classes:', Array.from(document.body.classList));
    console.log('- Body background:', getComputedStyle(document.body).background);
    console.log('- Home screen element:', document.getElementById('mobile-home-screen'));
    
    // Test wallpaper setting
    const testWallpaper = MobileInterface.state.availableWallpapers[1]; // Greece
    console.log('- Testing wallpaper set with:', testWallpaper.name);
    MobileInterface.setWallpaper(testWallpaper);
};

window.fixMobileWallpaper = function() {
    console.log('🔧 Attempting to fix mobile wallpaper...');
    
    // Force mobile mode
    MobileInterface.state.isMobile = true;
    document.body.classList.add('mobile-interface');
    
    // Show home screen
    const homeScreen = document.getElementById('mobile-home-screen');
    if (homeScreen) {
        homeScreen.style.display = 'block';
        homeScreen.style.visibility = 'visible';
    }
    
    // Set a test wallpaper
    const testWallpaper = MobileInterface.state.availableWallpapers[2]; // Game of Thrones
    MobileInterface.setWallpaper(testWallpaper);
    
    console.log('✅ Mobile wallpaper fix attempt complete');
};

// Also trigger on window load as backup
window.addEventListener('load', () => {
    console.log('📱 Window loaded, checking mobile interface...');
    if (!MobileInterface.state.isInitialized) {
        console.log('📱 Mobile interface not initialized, initializing now...');
        MobileInterface.init();
    }
});

// Debug helper for testing mobile dropdowns
window.testMobileDropdowns = function() {
    console.log('🔧 Testing mobile dropdowns...');
    console.log('- Is mobile:', MobileInterface.state.isMobile);
    console.log('- Status bar exists:', !!document.querySelector('.iphone-status-bar'));
    console.log('- WiFi icon exists:', !!document.querySelector('.iphone-status-bar .fa-wifi'));
    console.log('- Battery icon exists:', !!document.querySelector('.iphone-status-bar .battery-icon'));
    console.log('- Time element exists:', !!document.querySelector('.iphone-status-bar #mobile-time'));
    console.log('- Dropdowns exist:', {
        time: !!document.getElementById('mobile-time-dropdown'),
        wifi: !!document.getElementById('mobile-wifi-dropdown'),
        battery: !!document.getElementById('mobile-battery-dropdown')
    });
    
    // Test dropdown toggle
    console.log('🔧 Testing WiFi dropdown toggle...');
    MobileInterface.toggleMobileDropdown('wifi');
};

window.forceMobileDropdownTest = function() {
    console.log('🔧 Forcing mobile dropdown setup...');
    MobileInterface.state.isMobile = true;
    document.body.classList.add('mobile-interface');
    
    // Show mobile home screen
    const homeScreen = document.getElementById('mobile-home-screen');
    if (homeScreen) {
        homeScreen.style.display = 'block';
    }
    
    // Re-setup mobile listeners
    MobileInterface.setupMobileStatusBarListeners();
}; // Main Application Controller
const PortfolioApp = {
    // Application state
    state: {
        initialized: false,
        activeWindows: new Set(),
        windowStates: new Map(),
        dragState: null,
        currentTheme: 'light'
    },
    
    // Loading screen management
    loadingManager: {
        progress: 0,
        steps: [
            'Initializing Kevin OS...',
            'Loading healthcare marketing expertise...',
            'Calibrating coffee sensors...',
            'Connecting to Columbia, MD servers...',
            'Initializing creative genius protocols...',
            'Loading professional achievements...',
            'Preparing portfolio interface...',
            'Kevin Plumlee system ready!'
        ],
        
        async start() {
            const loadingScreen = Utils.dom.get('loading-screen');
            const loadingBar = Utils.dom.get('loading-bar');
            const loadingStatus = Utils.dom.get('loading-status');
            
            if (!loadingScreen || !loadingBar || !loadingStatus) return;
            
            // Show loading screen
            loadingScreen.classList.remove('hidden');
            
            // Animate through loading steps
            for (let i = 0; i < this.steps.length; i++) {
                const progress = ((i + 1) / this.steps.length) * 100;
                
                // Update status text
                loadingStatus.textContent = this.steps[i];
                
                // Animate progress bar
                loadingBar.style.width = progress + '%';
                
                // Wait for each step (vary timing for realism) - Cut in half
                const delay = i === this.steps.length - 1 ? 400 : Math.random() * 300 + 200;
                await new Promise(resolve => setTimeout(resolve, delay));
            }
            
            // Wait a moment to show completion - Cut in half
            await new Promise(resolve => setTimeout(resolve, 250));
            
            // Hide loading screen
            loadingScreen.classList.add('hidden');
            
            // Remove from DOM after transition
            setTimeout(() => {
                if (loadingScreen.parentNode) {
                    loadingScreen.remove();
                }
            }, 1000);
        }
    },
    
    // Initialize the entire application
    async init() {
        try {
            Utils.logger.info('Initializing Portfolio App...');
            
            // Check if already initialized
            if (this.state.initialized) {
                Utils.logger.warn('App already initialized');
                return;
            }
            
            // Initialize mobile interface first
            if (typeof MobileInterface !== 'undefined') {
                MobileInterface.init();
            }
            
            // Start loading screen
            await this.loadingManager.start();
            
            // Initialize core systems
            await this.initializeSystems();
            
            // Initialize UI components
            this.initializeUI();
            
            // Load user preferences
            this.loadUserPreferences();
            
            // Start background processes
            this.startBackgroundProcesses();
            
            // Mark as initialized
            this.state.initialized = true;
            
            Utils.logger.info('Portfolio App initialized successfully');
            
            // Show welcome message and open About Kevin (only on desktop)
            if (typeof MobileInterface === 'undefined' || !MobileInterface.isMobileView()) {
                this.showWelcomeMessage();
            }
            
        } catch (error) {
            Utils.logger.error('Failed to initialize app:', error);
        }
    },
    
    // Initialize core systems
    async initializeSystems() {
        // Initialize managers
        WindowManager.init();
        DockManager.init();
        DesktopManager.init();
        MenuBarManager.init();
        AnimationsManager.init();
        
        // Initialize window management
        this.initializeWindows();
        
        // Initialize dock
        this.initializeDock();
        
        // Initialize desktop
        this.initializeDesktop();
        
        // Initialize menu bar
        this.initializeMenuBar();
        
        // Set up global event listeners
        this.setupGlobalEvents();
        
        // Initialize keyboard shortcuts
        this.initializeKeyboardShortcuts();
        
        // Start content preloading
        await ContentLoader.preloadAll();
    },
    
    // Initialize window system
    initializeWindows() {
        const windows = Utils.dom.queryAll('.window');
        
        windows.forEach((window, index) => {
            const appName = window.dataset.app;
            
            // Use larger default size from config
            const defaultSize = { width: Config.windows.defaultWidth, height: Config.windows.defaultHeight };
            const baseZIndex = 1000;
            
            // Calculate center position for first window, then stack others with offset
            const centerX = Math.max(50, (window.innerWidth - defaultSize.width) / 2);
            const centerY = Math.max(50, (window.innerHeight - defaultSize.height) / 2);
            const stackOffset = 40; // Larger offset for better visibility
            
            this.state.windowStates.set(appName, {
                isOpen: false,
                isMinimized: false,
                isMaximized: false,
                zIndex: baseZIndex + index,
                position: { 
                    x: centerX + (index * stackOffset), 
                    y: centerY + (index * stackOffset) 
                },
                size: defaultSize
            });
            
            // Set initial z-index
            window.style.zIndex = baseZIndex + index;
            
            // Add click-to-front functionality - listen for any click on the window
            Utils.dom.on(window, 'mousedown', (e) => {
                // Only bring to front if the window is open but not already the frontmost
                const windowState = this.state.windowStates.get(appName);
                if (windowState && windowState.isOpen && !windowState.isMinimized) {
                    this.bringWindowToFront(appName);
                    this.updateDockIndicators();
                }
            });
            
            // Also handle clicks on window content
            Utils.dom.on(window, 'click', (e) => {
                const windowState = this.state.windowStates.get(appName);
                if (windowState && windowState.isOpen && !windowState.isMinimized) {
                    this.bringWindowToFront(appName);
                }
            });
        });
        
        Utils.logger.debug('Windows initialized');
    },
    
    // Initialize dock system
    initializeDock() {
        const dockItems = Utils.dom.queryAll('.dock-item');
        
        dockItems.forEach(item => {
            // Click handlers
            Utils.dom.on(item, 'click', (e) => {
                e.preventDefault();
                const appName = item.dataset.app;
                this.handleDockItemClick(appName);
            });
        });
        
        Utils.logger.debug('Dock initialized');
    },
    
    // Initialize desktop
    initializeDesktop() {
        const desktopIcons = Utils.dom.queryAll('.desktop-icon');
        
        desktopIcons.forEach(icon => {
            // Double click to open
            Utils.dom.on(icon, 'dblclick', () => {
                const appName = icon.dataset.app;
                this.openApplication(appName);
            });
        });
        
        Utils.logger.debug('Desktop initialized');
    },
    
    // Initialize menu bar
    initializeMenuBar() {
        // Apple logo easter egg - Enhanced with multiple click patterns
        const appleIcon = Utils.dom.query('.fab.fa-apple');
        const plumIcon = Utils.dom.query('.plum-icon.menu-icon');
        const targetIcon = appleIcon || plumIcon;
        
        if (targetIcon) {
            let clickCount = 0;
            let rapidClicks = 0;
            let lastClickTime = 0;
            let clickPattern = [];
            let secretUnlocked = false;
            
            Utils.dom.on(targetIcon, 'click', (e) => {
                const currentTime = Date.now();
                const timeDiff = currentTime - lastClickTime;
                
                clickCount++;
                clickPattern.push(timeDiff);
                
                // Rapid clicking detection (clicks within 300ms)
                if (timeDiff < 300) {
                    rapidClicks++;
                } else {
                    rapidClicks = 0;
                }
                
                // Visual feedback for each click
                this.addClickEffect(targetIcon, clickCount);
                
                // Different responses based on click patterns
                if (rapidClicks >= 10) {
                    // Super rapid clicking
                    this.showHyperCaffeinated();
                    clickCount = 0;
                    rapidClicks = 0;
                    clickPattern = [];
                } else if (clickCount === 3 && timeDiff > 1000) {
                    // Slow deliberate triple click
                    this.showSecretMessage();
                    clickCount = 0;
                } else if (clickCount === 7) {
                    // Lucky number 7
                    this.showLuckyMessage();
                    clickCount = 0;
                } else if (clickCount >= 5 && clickCount < 10) {
                    // Original 5+ click behavior but enhanced
                    this.showAboutMac();
                    clickCount = 0;
                } else if (clickCount >= 15) {
                    // Persistent clicking
                    this.showPersistentClickerMessage();
                    clickCount = 0;
                    rapidClicks = 0;
                    clickPattern = [];
                }
                
                // Reset click count after 3 seconds of inactivity
                setTimeout(() => {
                    if (Date.now() - lastClickTime > 3000) {
                        clickCount = 0;
                        rapidClicks = 0;
                        clickPattern = [];
                    }
                }, 3000);
                
                lastClickTime = currentTime;
            });
            
            // Double-click for instant coffee mode
            Utils.dom.on(targetIcon, 'dblclick', (e) => {
                e.preventDefault();
                this.showInstantCoffeeMode();
            });
            
            // Add hover effects
            Utils.dom.on(targetIcon, 'mouseenter', () => {
                this.addHoverEffect(targetIcon);
            });
        }
        
        // Update time
        this.updateMenuBarTime();
        
        Utils.logger.debug('Menu bar initialized with enhanced apple interactions');
    },
    
    // Add visual click effects
    addClickEffect(element, clickCount) {
        // Create ripple effect
        const ripple = document.createElement('div');
        ripple.style.cssText = `
            position: absolute;
            width: 20px;
            height: 20px;
            border-radius: 50%;
            background: rgba(255, 255, 255, 0.6);
            transform: scale(0);
            animation: ripple 0.6s linear;
            pointer-events: none;
            z-index: 9999;
        `;
        
        const rect = element.getBoundingClientRect();
        ripple.style.left = (rect.left + rect.width / 2 - 10) + 'px';
        ripple.style.top = (rect.top + rect.height / 2 - 10) + 'px';
        
        document.body.appendChild(ripple);
        
        // Scale effect based on click count
        element.style.transform = `scale(${1 + (clickCount * 0.1)})`;
        setTimeout(() => {
            element.style.transform = 'scale(1)';
            ripple.remove();
        }, 300);
        
        // Add CSS animation
        if (!document.getElementById('ripple-style')) {
            const style = document.createElement('style');
            style.id = 'ripple-style';
            style.textContent = `
                @keyframes ripple {
                    to {
                        transform: scale(4);
                        opacity: 0;
                    }
                }
            `;
            document.head.appendChild(style);
        }
    },
    
    // Add hover effects
    addHoverEffect(element) {
        element.style.transition = 'all 0.3s ease';
        element.style.filter = 'drop-shadow(0 0 10px rgba(255, 255, 255, 0.8)) brightness(1.2)';
        
        setTimeout(() => {
            element.style.filter = '';
        }, 1000);
    },
    
    // Show hyper-caffeinated mode
    showHyperCaffeinated() {
        const messages = [
            '🚨 HYPER-CAFFEINATED MODE DETECTED! ☕💨\n\nClick Speed: SUPERHUMAN\nCaffeine Level: MAXIMUM OVERDRIVE\nProductivity: THROUGH THE ROOF\n\nKevin\'s brain is now operating at 347% normal capacity!\n\n⚠️ Warning: May cause spontaneous brilliance and uncontrollable healthcare marketing ideas!',
            '⚡ RAPID-FIRE GENIUS ACTIVATED! ⚡\n\nClick Rate: 847 CPM (Clicks Per Marketing-idea)\nEnergy Level: UNSTOPPABLE FORCE\nCreativity: OVERFLOWING LIKE NIAGARA FALLS\n\nYou\'ve unlocked Kevin\'s hidden BEAST MODE!\n\n🎯 Achievement Unlocked: Speed Demon Healthcare Marketer!',
            '🌪️ WHIRLWIND KEVIN UNLEASHED! 🌪️\n\nTurbocharged Thinking: ENGAGED\nImpossible Speed: ACHIEVED\nMarketing Momentum: LEGENDARY\n\nCongratulations! You\'ve triggered Kevin\'s SECRET TURBO MODE!\n\n💡 Ideas are now generating faster than you can click!'
        ];
        const message = messages[Math.floor(Math.random() * messages.length)];
        this.showEnhancedAlert(message, '⚡', 'hyper');
    },
    
    // Show secret message for slow triple click
    showSecretMessage() {
        const secrets = [
            '🤫 SECRET UNLOCKED: The Kevin Code\n\nYou\'ve discovered the ancient art of the deliberate triple-click!\n\n🔑 Hidden Truth: Kevin\'s superpowers actually come from a secret blend of Colombian coffee beans and pure healthcare marketing passion.\n\n✨ Bonus Secret: Every website Kevin touches gets an automatic +47% conversion boost!',
            '🕵️ CONFIDENTIAL: Behind the Scenes\n\nPsst... you found the secret entrance!\n\n🎭 Kevin\'s Secret Identity: By day, VP Performance Marketing. By night, CSS Superhero and JavaScript Wizard.\n\n🦸‍♂️ Special Power: Can debug healthcare marketing campaigns with his eyes closed while drinking coffee.',
            '🔮 MYSTICAL REVELATION UNLOCKED!\n\nThe Triple-Click of Wisdom has been activated!\n\n🧙‍♂️ Ancient Kevin Wisdom: "A conversion optimized is a patient helped, a coffee consumed is an idea born."\n\n🌟 You are now blessed with +10 Marketing Intuition and permanent coffee immunity!'
        ];
        const secret = secrets[Math.floor(Math.random() * secrets.length)];
        this.showEnhancedAlert(secret, '🤫', 'secret');
    },
    
    // Show lucky number 7 message
    showLuckyMessage() {
        const luckyMessages = [
            '🍀 LUCKY NUMBER 7 ACTIVATED! 🍀\n\nJackpot! You\'ve hit Kevin\'s lucky number!\n\n🎰 Your Winnings:\n• 7x Healthcare Marketing Luck\n• 777% Conversion Rate Boost\n• Lucky LinkedIn Connection Charm\n• Infinite Coffee Refill Power-up\n\n🌟 Lady Luck smiles upon your marketing endeavors!',
            '🎯 SEVEN WONDERS OF KEVIN UNLOCKED! 🎯\n\n7️⃣ Magic Number Achievement!\n\n✨ The 7 Pillars of Kevin\'s Success:\n1. Coffee ☕  2. Creativity 💡  3. Conversions 📈\n4. Caffeine ☕  5. Code 💻  6. Coffee ☕  7. COFFEE ☕\n\n🏆 Congratulations! Your marketing karma just increased by 777 points!',
            '🌈 RAINBOW OF HEALTHCARE MARKETING MAGIC! 🌈\n\nSeven clicks = Seven times the awesome!\n\n🦄 Magical Kevin Powers Activated:\n• SEO Unicorn Summoning\n• Conversion Rate Leprechaun\n• Patient Acquisition Rainbow Bridge\n• Coffee-to-Gold Alchemy\n\n☘️ May all your campaigns be blessed with Kevin\'s lucky 7 magic!'
        ];
        const lucky = luckyMessages[Math.floor(Math.random() * luckyMessages.length)];
        this.showEnhancedAlert(lucky, '🍀', 'lucky');
    },
    
    // Show instant coffee mode
    showInstantCoffeeMode() {
        const instantMessages = [
            '☕ INSTANT COFFEE MODE ACTIVATED! ⚡\n\nDouble-click detected: MAXIMUM EFFICIENCY ENGAGED!\n\n🚀 Instant Results:\n• Ideas: Brewing in 0.5 seconds\n• Solutions: Ready-to-serve\n• Creativity: Instantly caffeinated\n• Healthcare marketing: Instantly optimized\n\n⏰ No waiting required - Kevin delivers instant gratification!',
            '💨 ESPRESSO EXPRESS ACTIVATED! 💨\n\nDouble-click = Double the speed!\n\n⚡ Lightning Fast Kevin Services:\n• Instant website diagnosis\n• Rapid conversion optimization\n• Turbo-charged SEO analysis\n• Express healthcare marketing strategy\n\n🏁 From zero to marketing hero in 2.3 seconds!',
            '🎯 RAPID-FIRE RESULTS MODE! 🎯\n\nYou chose speed over everything!\n\n💥 Instant Kevin Delivery:\n• Problem identified: 0.1 sec\n• Solution generated: 0.2 sec\n• Implementation plan: 0.3 sec\n• Mind blown: 0.4 sec\n\n⚡ Warning: Results may be too fast for human comprehension!'
        ];
        const instant = instantMessages[Math.floor(Math.random() * instantMessages.length)];
        this.showEnhancedAlert(instant, '☕', 'instant');
    },
    
    // Show persistent clicker message
    showPersistentClickerMessage() {
        const persistentMessages = [
            '🤖 CLICK MASTER DETECTED! 🤖\n\nImpressive dedication! You\'ve achieved PERSISTENT CLICKER status!\n\n🏆 Awards Earned:\n• Tenacity Trophy 🏆\n• Dedication Diamond 💎\n• Persistence Plaque 🥇\n• Kevin\'s Personal Respect Badge 🎖️\n\n🎉 You clearly understand that good things come to those who click (a lot)!',
            '🔥 UNSTOPPABLE FORCE MEETS UNMOVABLE KEVIN! 🔥\n\nYour clicking power is LEGENDARY!\n\n⚔️ Battle Stats:\n• Clicks Survived: 15+\n• Kevin\'s Amazement: MAXIMUM\n• Determination Level: SUPERHUMAN\n• Finger Strength: ELITE\n\n👑 You are now officially Kevin\'s #1 Fan and Click Champion!',
            '🌟 CLICKING HALL OF FAME INDUCTEE! 🌟\n\nCongratulations! Your name will be remembered in Kevin\'s Digital History!\n\n📜 Your Legacy:\n• Most Dedicated Clicker of 2024\n• First Person to Out-Click Kevin\'s Expectations\n• Official Healthcare Marketing Click Champion\n\n🎊 Kevin salutes your unwavering commitment to button pressing!'
        ];
        const persistent = persistentMessages[Math.floor(Math.random() * persistentMessages.length)];
        this.showEnhancedAlert(persistent, '🏆', 'persistent');
    },
    
    // Enhanced alert system with different themes
    showEnhancedAlert(message, icon = '💡', theme = 'normal') {
        const modal = document.createElement('div');
        modal.style.cssText = `
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(0, 0, 0, 0.4);
            backdrop-filter: blur(20px);
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 10000;
            animation: fadeIn 0.2s ease;
        `;
        
        const content = document.createElement('div');
        content.style.cssText = `
            background: rgba(30, 30, 30, 0.95);
            backdrop-filter: blur(40px);
            border-radius: 12px;
            padding: 24px 32px;
            max-width: 500px;
            max-height: 75vh;
            overflow-y: auto;
            color: #ffffff;
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Helvetica Neue', Arial, sans-serif;
            text-align: left;
            box-shadow: 0 12px 40px rgba(0, 0, 0, 0.6), 0 0 0 0.5px rgba(255, 255, 255, 0.1);
            transform: scale(0.95);
            animation: popIn 0.2s ease forwards;
            position: relative;
            border: 1px solid rgba(255, 255, 255, 0.08);
        `;
        
        content.innerHTML = `
            <div style="text-align: center; margin-bottom: 20px;">
                <div style="font-size: 56px; margin-bottom: 8px; animation: bounce 2s infinite;">${icon}</div>
            </div>
            <div style="
                font-family: 'SF Mono', Monaco, 'Cascadia Code', 'Roboto Mono', Consolas, monospace;
                white-space: pre-wrap;
                line-height: 1.4;
                margin: 0;
                font-size: 13px;
                color: #e5e5e7;
                background: rgba(0, 0, 0, 0.2);
                padding: 16px;
                border-radius: 8px;
                border: 1px solid rgba(255, 255, 255, 0.05);
            ">${message}</div>
            <div style="text-align: center; margin-top: 24px;">
                <button onclick="this.closest('.modal').remove()" style="
                    background: rgba(0, 122, 255, 0.8);
                    border: none;
                    color: white;
                    padding: 8px 20px;
                    border-radius: 6px;
                    cursor: pointer;
                    font-size: 13px;
                    font-weight: 500;
                    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
                    transition: all 0.2s ease;
                    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.3);
                " onmouseover="this.style.background='rgba(0, 122, 255, 1)'; this.style.transform='scale(1.02)'" onmouseout="this.style.background='rgba(0, 122, 255, 0.8)'; this.style.transform='scale(1)'">
                    OK
                </button>
            </div>
        `;
        
        modal.className = 'modal';
        modal.appendChild(content);
        document.body.appendChild(modal);
        
        // Add macOS-style CSS animations
        const style = document.createElement('style');
        style.textContent = `
            @keyframes fadeIn {
                from { opacity: 0; }
                to { opacity: 1; }
            }
            @keyframes popIn {
                from { transform: scale(0.95); opacity: 0; }
                to { transform: scale(1); opacity: 1; }
            }
            @keyframes bounce {
                0%, 20%, 50%, 80%, 100% { transform: translateY(0); }
                40% { transform: translateY(-8px); }
                60% { transform: translateY(-4px); }
            }
        `;
        document.head.appendChild(style);
        
        // Auto-close after 15 seconds
        setTimeout(() => {
            if (modal.parentNode) {
                modal.remove();
                style.remove();
            }
        }, 15000);
    },
    
    showAboutMac() {
        const aboutMessages = [
            '🖥️ About This Kevin™ - DEVELOPER EDITION\n\nModel: Kevin Plumlee (Healthcare Marketing Powerhouse)\nProcessor: M1 Pro Creativity Chip + Coffee Accelerator\nMemory: 15+ Years of Healthcare Marketing RAM\nStorage: Unlimited Patient Success Stories\nGraphics: Pure CSS Magic with Healthcare Focus\nOperating System: KevinOS v2024.12 "Columbia Command Center"\n\n🔧 Installed Applications:\n• Healthcare Marketing Suite Pro\n• SEO Optimization Engine\n• Conversion Rate Maximizer\n• Coffee Dependency Manager\n• LinkedIn Networking Protocol\n\n📊 System Performance:\n• Uptime: 15+ years of excellence\n• Crashes: 0 (Kevin doesn\'t break)\n• Updates: Daily coffee-powered improvements\n• Warranty: Lifetime guarantee of awesome\n\n☕ Power Source: Premium Colombian Coffee Beans\n🚀 Turbo Mode: Always Enabled',
            '💻 Kevin™ System Specifications - ULTIMATE EDITION\n\n🧠 Processor: Healthcare Marketing Genius M2 Ultra Pro Max\n⚡ Clock Speed: 3.4 GHz (Ideas per second)\n🔋 Battery: Coffee-Powered Perpetual Motion Engine\n💾 RAM: Infinite Healthcare Knowledge Database\n💿 Storage: 15+ Years of Epic Marketing Wins\n📱 Display: Visionary Healthcare Strategy Retina\n🔊 Audio: Conversion "Cha-Ching" Surround Sound\n\n🛠️ Built-in Features:\n• Auto-SEO Optimization\n• Real-time ROI Calculator\n• Patient Acquisition Radar\n• HIPAA Compliance Detector\n• Coffee Level Monitor (Critical System)\n\n🌟 Kevin Certification: Authentic Healthcare Marketing Genius\n⚠️ Warning: Operating without coffee may void warranty',
            '🚀 Kevin™ Advanced System Report - LEGENDARY STATUS\n\n🏥 Primary Function: Healthcare Marketing Domination\n☕ Core Requirements: Colombian Coffee Bean Architecture\n🎯 Target Acquisition: 99.9% Conversion Success Rate\n📈 Performance Metrics: Continuously Exceeding Expectations\n💡 Innovation Engine: Perpetual Breakthrough Generator\n\n🔍 Diagnostic Results:\n✅ Creative Processes: Optimal\n✅ Healthcare Knowledge: Maximum Capacity\n✅ Coffee Integration: Perfect Harmony\n✅ Client Satisfaction: Off the Charts\n✅ Fun Factor: Legendary Levels\n\n🎖️ Certifications:\n• ISO 9001 Coffee Quality Management\n• Healthcare Marketing Excellence Award\n• Unlimited Dad Jokes License\n• Professional Awesome Certification\n\n📞 Technical Support: Kevin Personally Available 24/7*\n*Except during power naps and coffee breaks'
        ];
        
        const aboutMessage = aboutMessages[Math.floor(Math.random() * aboutMessages.length)];
        this.showEnhancedAlert(aboutMessage, '🖥️');
    },
    
    // Set up global event listeners
    setupGlobalEvents() {
        // Prevent context menu
        Utils.dom.on(document, 'contextmenu', (e) => {
            e.preventDefault();
        });
        
        Utils.logger.debug('Global events initialized');
    },
    
    // Initialize keyboard shortcuts
    initializeKeyboardShortcuts() {
        Utils.dom.on(document, 'keydown', (e) => {
            // Close window: Cmd/Ctrl + W
            if (Utils.event.matchKey(e, 'ctrl+w')) {
                e.preventDefault();
                this.closeActiveWindow();
            }
            
            // Minimize window: Cmd/Ctrl + M
            if (Utils.event.matchKey(e, 'ctrl+m')) {
                e.preventDefault();
                this.minimizeActiveWindow();
            }
        });
        
        Utils.logger.debug('Keyboard shortcuts initialized');
    },
    
    // Application control methods
    async openApplication(appName) {
        Utils.logger.debug(`Opening application: ${appName}`);
        
        const windowState = this.state.windowStates.get(appName);
        if (!windowState) {
            Utils.logger.warn(`No window state found for ${appName}`);
            return;
        }
        
        // Show dock feedback for opening
        if (window.DockManager && typeof window.DockManager.showOpenFeedback === 'function') {
            window.DockManager.showOpenFeedback(appName);
        }
        
        // Show window first
        this.showWindow(appName);
        
        // Load content if not already loaded
        try {
            await ContentLoader.loadContent(appName);
        } catch (error) {
            Utils.logger.error(`Failed to load content for ${appName}:`, error);
            return;
        }
        
        // Update states
        windowState.isOpen = true;
        windowState.isMinimized = false;
        this.state.activeWindows.add(appName);
        
        // Update dock
        this.updateDockIndicators();
        
        // Bring to front
        this.bringWindowToFront(appName);
        
        // Final layout recalculation after everything is loaded
        setTimeout(() => {
            const window = Utils.dom.get(`${appName}-window`);
            if (window && window.classList.contains('active')) {
                this.recalculateWindowLayout(window);
            }
        }, 600);
    },
    
    // Show window with animation
    showWindow(appName) {
        const window = Utils.dom.get(`${appName}-window`);
        if (!window) return;
        
        // Remove active class from all other windows
        Utils.dom.queryAll('.window').forEach(w => w.classList.remove('active'));
        
        // Set initial window positioning and size
        const windowState = this.state.windowStates.get(appName);
        if (windowState) {
            window.style.left = windowState.position.x + 'px';
            window.style.top = windowState.position.y + 'px';
            window.style.width = windowState.size.width + 'px';
            window.style.height = windowState.size.height + 'px';
            
            // Make sure z-index is set properly
            window.style.zIndex = windowState.zIndex;
        }
        
        window.classList.add('open', 'active');
        window.classList.remove('minimized');
        
        // Force layout recalculation and enable scrolling
        setTimeout(() => {
            this.recalculateWindowLayout(window);
        }, 50);
        
        // Animate appearance
        Utils.animation.scale(window, 0.8, 1, 300);
    },
    
    // Recalculate window layout to enable scrolling
    recalculateWindowLayout(window) {
        const content = window.querySelector('.window-content');
        if (!content) return;
        
        // Force reflow to calculate proper dimensions
        content.style.height = 'auto';
        const rect = window.getBoundingClientRect();
        const headerHeight = window.querySelector('.window-header')?.offsetHeight || 36;
        const availableHeight = rect.height - headerHeight;
        
        // Set proper content height
        content.style.height = availableHeight + 'px';
        
        // Force scroll recalculation
        content.scrollTop = content.scrollTop;
        
        Utils.logger.debug('Window layout recalculated for scrolling');
    },
    
    // Handle dock item clicks
    handleDockItemClick(appName) {
        if (!appName) return;
        
        // Handle special dock items
        switch (appName) {
            case 'linkedin':
                window.open('https://linkedin.com/in/kevinplumlee', '_blank');
                break;
            case 'unlock-health':
                window.open('https://unlockhealth.com', '_blank');
                break;
            case 'credentials':
                window.open('https://badgr.com/public/assertions/thX0QvfBRc-IOJV7qjZs7g', '_blank');
                break;
            case 'finder':
                this.showFinder();
                break;
            case 'settings':
                this.showSettings();
                break;
            case 'trash':
                this.showTrash();
                break;
            default:
                // Handle app windows with toggle functionality
                const windowState = this.state.windowStates.get(appName);
                if (windowState && windowState.isOpen) {
                    if (windowState.isMinimized) {
                        // If minimized, restore it
                        this.unminimizeWindow(appName);
                    } else {
                        // If open and active, check if it's the currently active window
                        const windowElement = Utils.dom.get(`${appName}-window`);
                        if (windowElement && windowElement.classList.contains('active')) {
                            // If it's the active window, close it completely
                            this.closeWindow(appName);
                        } else {
                            // If it's open but not active, bring it to front
                            this.bringWindowToFront(appName);
                        }
                    }
                } else {
                    // If not open, open it
                    this.openApplication(appName);
                }
        }
    },
    
    // Window control methods
    closeWindow(appName) {
        const windowElement = Utils.dom.get(`${appName}-window`);
        const windowState = this.state.windowStates.get(appName);
        if (!windowElement || !windowState) return;
        
        // Show dock feedback for closing
        if (window.DockManager && typeof window.DockManager.showToggleCloseFeedback === 'function') {
            window.DockManager.showToggleCloseFeedback(appName);
        }
        
        // Add smooth closing animation
        windowElement.style.transition = 'all 0.25s cubic-bezier(0.25, 0.46, 0.45, 0.94)';
        windowElement.style.transform = 'scale(0.9)';
        windowElement.style.opacity = '0';
        
        // Update state immediately to prevent double-clicks
        windowState.isOpen = false;
        windowState.isMinimized = false;
        this.state.activeWindows.delete(appName);
        
        // Update dock indicators immediately for responsive feedback
        this.updateDockIndicators();
        
        // Remove classes after animation completes
        setTimeout(() => {
            windowElement.classList.remove('active', 'open');
            
            // Reset styles for next opening
            windowElement.style.transition = '';
            windowElement.style.transform = '';
            windowElement.style.opacity = '';
            
            // Log for debugging
            Utils.logger.debug(`Window ${appName} closed via dock toggle`);
        }, 250);
    },
    
    minimizeWindow(appName) {
        const window = Utils.dom.get(`${appName}-window`);
        const windowState = this.state.windowStates.get(appName);
        
        if (!window || !windowState) return;
        
        window.classList.add('minimized');
        window.classList.remove('active');
        // Keep 'open' class so it can be restored later
        
        windowState.isMinimized = true;
        this.updateDockIndicators();
    },
    
    unminimizeWindow(appName) {
        const window = Utils.dom.get(`${appName}-window`);
        const windowState = this.state.windowStates.get(appName);
        
        if (!window || !windowState) return;
        
        // Remove active class from all other windows first
        Utils.dom.queryAll('.window').forEach(w => w.classList.remove('active'));
        
        window.classList.remove('minimized');
        window.classList.add('active');
        // 'open' class should already be there from when it was first opened
        
        windowState.isMinimized = false;
        this.bringWindowToFront(appName);
        this.updateDockIndicators();
        
        // Recalculate layout when unminimizing
        setTimeout(() => {
            this.recalculateWindowLayout(window);
        }, 100);
    },
    
    // Bring window to front
    bringWindowToFront(appName) {
        const window = Utils.dom.get(`${appName}-window`);
        const windowState = this.state.windowStates.get(appName);
        
        if (!window || !windowState) return;
        
        // Find the highest z-index among all open windows
        let highestZIndex = 1000;
        this.state.windowStates.forEach((state, name) => {
            if (state.isOpen && !state.isMinimized) {
                highestZIndex = Math.max(highestZIndex, state.zIndex);
            }
        });
        
        // Remove active class from all other windows
        Utils.dom.queryAll('.window').forEach(w => {
            if (w !== window) {
                w.classList.remove('active');
            }
        });
        
        // Make this window active and set it above all others
        window.classList.add('active');
        // Always increment z-index to ensure proper layering
        windowState.zIndex = highestZIndex + 1;
        window.style.zIndex = windowState.zIndex;
        
        Utils.logger.debug(`Brought window ${appName} to front with z-index ${windowState.zIndex}`);
    },
    
    // Update dock indicators
    updateDockIndicators() {
        Utils.dom.queryAll('.dock-item').forEach(item => {
            const appName = item.dataset.app;
            const windowState = this.state.windowStates.get(appName);
            
            item.classList.remove('active');
            
            if (windowState && windowState.isOpen && !windowState.isMinimized) {
                item.classList.add('active');
            }
        });
    },
    
    // Update menu bar time
    updateMenuBarTime() {
        const timeElement = Utils.dom.get('current-time');
        if (timeElement) {
            timeElement.textContent = Utils.time.formatTime();
        }
    },
    
    // Start background processes
    startBackgroundProcesses() {
        // Update time every second
        setInterval(() => {
            this.updateMenuBarTime();
        }, 1000);
        
        Utils.logger.debug('Background processes started');
    },
    
    // Load user preferences
    loadUserPreferences() {
        const preferences = Utils.storage.get('portfolio_preferences', {});
        
        if (preferences.theme) {
            this.state.currentTheme = preferences.theme;
        }
        
        Utils.logger.debug('User preferences loaded');
    },
    
    // Show welcome message and always open About Kevin
    showWelcomeMessage() {
        // Always open the About Kevin window after loading finishes
        setTimeout(() => {
            this.openApplication('about');
            
            // Update last visit timestamp
            Utils.storage.set('portfolio_last_visit', Date.now());
        }, 1000);
    },
    
    // Initialize UI components
    initializeUI() {
        // Set up window controls
        Utils.dom.queryAll('.control').forEach(control => {
            Utils.dom.on(control, 'click', (e) => {
                e.stopPropagation();
                const action = control.dataset.action;
                const window = control.closest('.window');
                const appName = window.dataset.app;
                
                switch (action) {
                    case 'close':
                        this.closeWindow(appName);
                        break;
                    case 'minimize':
                        this.minimizeWindow(appName);
                        break;
                    case 'maximize':
                        this.toggleMaximizeWindow(appName);
                        break;
                }
            });
        });
    },
    
    // Special window methods
    showFinder() {
        const content = `
            <div style="text-align: center; padding: 40px;">
                <i class="fas fa-search" style="font-size: 48px; color: #007AFF; margin-bottom: 20px;"></i>
                <h2>Finder</h2>
                <p>File explorer functionality would go here.</p>
            </div>
        `;
        this.showTemporaryWindow('Finder', content);
    },
    
    showSettings() {
        this.openApplication('settings');
    },
    
    showTrash() {
        const content = `
            <div style="text-align: center; padding: 40px;">
                <i class="fas fa-trash" style="font-size: 48px; color: #666; margin-bottom: 20px;"></i>
                <h2>Trash (Empty)</h2>
                <p>No items in trash.</p>
            </div>
        `;
        this.showTemporaryWindow('Trash', content);
    },
    
    showTemporaryWindow(title, content) {
        const centerX = Math.max(50, (window.innerWidth - Config.windows.defaultWidth) / 2);
        const centerY = Math.max(50, (window.innerHeight - Config.windows.defaultHeight) / 2);
        
        const tempWindow = Utils.dom.create('div', {
            className: 'window active',
            style: `
                left: ${centerX + Math.random() * 100}px;
                top: ${centerY + Math.random() * 100}px;
                width: ${Config.windows.defaultWidth}px;
                height: ${Config.windows.defaultHeight}px;
                z-index: ${Date.now()};
            `
        });
        
        tempWindow.innerHTML = `
            <div class="window-header">
                <div class="window-controls">
                    <div class="control close" onclick="this.closest('.window').remove()"></div>
                    <div class="control minimize"></div>
                    <div class="control maximize"></div>
                </div>
                <div class="window-title">${title}</div>
            </div>
            <div class="window-content">${content}</div>
        `;
        
        Utils.dom.get('windows-container').appendChild(tempWindow);
        
        // Auto remove after 30 seconds
        setTimeout(() => {
            if (tempWindow.parentNode) {
                tempWindow.remove();
            }
        }, 30000);
    },
    
    // Debug method to test scrolling
    testScrolling() {
        Utils.dom.queryAll('.window.active').forEach(window => {
            const content = window.querySelector('.window-content');
            if (content) {
                console.log(`Window: ${window.dataset.app}`);
                console.log(`Content height: ${content.scrollHeight}px`);
                console.log(`Visible height: ${content.clientHeight}px`);
                console.log(`Scrollable: ${content.scrollHeight > content.clientHeight}`);
                console.log(`Overflow Y: ${getComputedStyle(content).overflowY}`);
                console.log('---');
            }
        });
    },
    
    // Helper methods
    getActiveWindow() {
        const activeWindows = Array.from(this.state.activeWindows);
        if (activeWindows.length === 0) return null;
        
        return activeWindows.reduce((highest, current) => {
            const currentState = this.state.windowStates.get(current);
            const highestState = this.state.windowStates.get(highest);
            
            return currentState.zIndex > highestState.zIndex ? current : highest;
        });
    },
    
    closeActiveWindow() {
        const activeWindow = this.getActiveWindow();
        if (activeWindow) {
            this.closeWindow(activeWindow);
        }
    },
    
    minimizeActiveWindow() {
        const activeWindow = this.getActiveWindow();
        if (activeWindow) {
            this.minimizeWindow(activeWindow);
        }
    },
    
    // Toggle maximize window
    toggleMaximizeWindow(appName) {
        const window = Utils.dom.get(`${appName}-window`);
        const windowState = this.state.windowStates.get(appName);
        
        if (!window || !windowState) return;
        
        if (windowState.isMaximized) {
            // Restore window
            window.classList.remove('maximized');
            window.style.left = windowState.position.x + 'px';
            window.style.top = windowState.position.y + 'px';
            window.style.width = windowState.size.width + 'px';
            window.style.height = windowState.size.height + 'px';
            windowState.isMaximized = false;
        } else {
            // Store current position and size
            const rect = window.getBoundingClientRect();
            windowState.position.x = rect.left;
            windowState.position.y = rect.top;
            windowState.size.width = rect.width;
            windowState.size.height = rect.height;
            
            // Maximize window
            window.classList.add('maximized');
            windowState.isMaximized = true;
        }
        
        // Recalculate layout after maximize/restore
        setTimeout(() => {
            this.recalculateWindowLayout(window);
        }, 100);
    }
};

// Initialize app when DOM is loaded
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
        PortfolioApp.init();
    });
} else {
    PortfolioApp.init();
}

// Global access
window.PortfolioApp = PortfolioApp; 